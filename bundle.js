/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={234:function(t,e){!function(t){"use strict";var e={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"},i="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this",n={5:i,"5module":i+" export import",6:i+" const class extends export import super"},s=/^in(stanceof)?$/,r="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",o="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿",a=new RegExp("["+r+"]"),l=new RegExp("["+r+o+"]");r=o=null;var h=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938],u=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];function c(t,e){for(var i=65536,n=0;n<e.length;n+=2){if((i+=e[n])>t)return!1;if((i+=e[n+1])>=t)return!0}}function d(t,e){return t<65?36===t:t<91||(t<97?95===t:t<123||(t<=65535?t>=170&&a.test(String.fromCharCode(t)):!1!==e&&c(t,h)))}function p(t,e){return t<48?36===t:t<58||!(t<65)&&(t<91||(t<97?95===t:t<123||(t<=65535?t>=170&&l.test(String.fromCharCode(t)):!1!==e&&(c(t,h)||c(t,u)))))}var f=function(t,e){void 0===e&&(e={}),this.label=t,this.keyword=e.keyword,this.beforeExpr=!!e.beforeExpr,this.startsExpr=!!e.startsExpr,this.isLoop=!!e.isLoop,this.isAssign=!!e.isAssign,this.prefix=!!e.prefix,this.postfix=!!e.postfix,this.binop=e.binop||null,this.updateContext=null};function g(t,e){return new f(t,{beforeExpr:!0,binop:e})}var m={beforeExpr:!0},v={startsExpr:!0},b={};function _(t,e){return void 0===e&&(e={}),e.keyword=t,b[t]=new f(t,e)}var y={num:new f("num",v),regexp:new f("regexp",v),string:new f("string",v),name:new f("name",v),privateId:new f("privateId",v),eof:new f("eof"),bracketL:new f("[",{beforeExpr:!0,startsExpr:!0}),bracketR:new f("]"),braceL:new f("{",{beforeExpr:!0,startsExpr:!0}),braceR:new f("}"),parenL:new f("(",{beforeExpr:!0,startsExpr:!0}),parenR:new f(")"),comma:new f(",",m),semi:new f(";",m),colon:new f(":",m),dot:new f("."),question:new f("?",m),questionDot:new f("?."),arrow:new f("=>",m),template:new f("template"),invalidTemplate:new f("invalidTemplate"),ellipsis:new f("...",m),backQuote:new f("`",v),dollarBraceL:new f("${",{beforeExpr:!0,startsExpr:!0}),eq:new f("=",{beforeExpr:!0,isAssign:!0}),assign:new f("_=",{beforeExpr:!0,isAssign:!0}),incDec:new f("++/--",{prefix:!0,postfix:!0,startsExpr:!0}),prefix:new f("!/~",{beforeExpr:!0,prefix:!0,startsExpr:!0}),logicalOR:g("||",1),logicalAND:g("&&",2),bitwiseOR:g("|",3),bitwiseXOR:g("^",4),bitwiseAND:g("&",5),equality:g("==/!=/===/!==",6),relational:g("</>/<=/>=",7),bitShift:g("<</>>/>>>",8),plusMin:new f("+/-",{beforeExpr:!0,binop:9,prefix:!0,startsExpr:!0}),modulo:g("%",10),star:g("*",10),slash:g("/",10),starstar:new f("**",{beforeExpr:!0}),coalesce:g("??",1),_break:_("break"),_case:_("case",m),_catch:_("catch"),_continue:_("continue"),_debugger:_("debugger"),_default:_("default",m),_do:_("do",{isLoop:!0,beforeExpr:!0}),_else:_("else",m),_finally:_("finally"),_for:_("for",{isLoop:!0}),_function:_("function",v),_if:_("if"),_return:_("return",m),_switch:_("switch"),_throw:_("throw",m),_try:_("try"),_var:_("var"),_const:_("const"),_while:_("while",{isLoop:!0}),_with:_("with"),_new:_("new",{beforeExpr:!0,startsExpr:!0}),_this:_("this",v),_super:_("super",v),_class:_("class",v),_extends:_("extends",m),_export:_("export"),_import:_("import",v),_null:_("null",v),_true:_("true",v),_false:_("false",v),_in:_("in",{beforeExpr:!0,binop:7}),_instanceof:_("instanceof",{beforeExpr:!0,binop:7}),_typeof:_("typeof",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_void:_("void",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_delete:_("delete",{beforeExpr:!0,prefix:!0,startsExpr:!0})},w=/\r\n?|\n|\u2028|\u2029/,x=new RegExp(w.source,"g");function C(t){return 10===t||13===t||8232===t||8233===t}function S(t,e,i){void 0===i&&(i=t.length);for(var n=e;n<i;n++){var s=t.charCodeAt(n);if(C(s))return n<i-1&&13===s&&10===t.charCodeAt(n+1)?n+2:n+1}return-1}var P=/[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/,k=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,T=Object.prototype,A=T.hasOwnProperty,I=T.toString,E=Object.hasOwn||function(t,e){return A.call(t,e)},M=Array.isArray||function(t){return"[object Array]"===I.call(t)};function D(t){return new RegExp("^(?:"+t.replace(/ /g,"|")+")$")}var L=/(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/,N=function(t,e){this.line=t,this.column=e};N.prototype.offset=function(t){return new N(this.line,this.column+t)};var O=function(t,e,i){this.start=e,this.end=i,null!==t.sourceFile&&(this.source=t.sourceFile)};function R(t,e){for(var i=1,n=0;;){var s=S(t,n,e);if(s<0)return new N(i,e-n);++i,n=s}}var F={ecmaVersion:null,sourceType:"script",onInsertedSemicolon:null,onTrailingComma:null,allowReserved:null,allowReturnOutsideFunction:!1,allowImportExportEverywhere:!1,allowAwaitOutsideFunction:null,allowSuperOutsideMethod:null,allowHashBang:!1,locations:!1,onToken:null,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null,preserveParens:!1},B=!1;function V(t){var e={};for(var i in F)e[i]=t&&E(t,i)?t[i]:F[i];if("latest"===e.ecmaVersion?e.ecmaVersion=1e8:null==e.ecmaVersion?(!B&&"object"==typeof console&&console.warn&&(B=!0,console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.")),e.ecmaVersion=11):e.ecmaVersion>=2015&&(e.ecmaVersion-=2009),null==e.allowReserved&&(e.allowReserved=e.ecmaVersion<5),M(e.onToken)){var n=e.onToken;e.onToken=function(t){return n.push(t)}}return M(e.onComment)&&(e.onComment=function(t,e){return function(i,n,s,r,o,a){var l={type:i?"Block":"Line",value:n,start:s,end:r};t.locations&&(l.loc=new O(this,o,a)),t.ranges&&(l.range=[s,r]),e.push(l)}}(e,e.onComment)),e}var j=256;function z(t,e){return 2|(t?4:0)|(e?8:0)}var U=function(t,i,s){this.options=t=V(t),this.sourceFile=t.sourceFile,this.keywords=D(n[t.ecmaVersion>=6?6:"module"===t.sourceType?"5module":5]);var r="";!0!==t.allowReserved&&(r=e[t.ecmaVersion>=6?6:5===t.ecmaVersion?5:3],"module"===t.sourceType&&(r+=" await")),this.reservedWords=D(r);var o=(r?r+" ":"")+e.strict;this.reservedWordsStrict=D(o),this.reservedWordsStrictBind=D(o+" "+e.strictBind),this.input=String(i),this.containsEsc=!1,s?(this.pos=s,this.lineStart=this.input.lastIndexOf("\n",s-1)+1,this.curLine=this.input.slice(0,this.lineStart).split(w).length):(this.pos=this.lineStart=0,this.curLine=1),this.type=y.eof,this.value=null,this.start=this.end=this.pos,this.startLoc=this.endLoc=this.curPosition(),this.lastTokEndLoc=this.lastTokStartLoc=null,this.lastTokStart=this.lastTokEnd=this.pos,this.context=this.initialContext(),this.exprAllowed=!0,this.inModule="module"===t.sourceType,this.strict=this.inModule||this.strictDirective(this.pos),this.potentialArrowAt=-1,this.potentialArrowInForAwait=!1,this.yieldPos=this.awaitPos=this.awaitIdentPos=0,this.labels=[],this.undefinedExports=Object.create(null),0===this.pos&&t.allowHashBang&&"#!"===this.input.slice(0,2)&&this.skipLineComment(2),this.scopeStack=[],this.enterScope(1),this.regexpState=null,this.privateNameStack=[]},q={inFunction:{configurable:!0},inGenerator:{configurable:!0},inAsync:{configurable:!0},canAwait:{configurable:!0},allowSuper:{configurable:!0},allowDirectSuper:{configurable:!0},treatFunctionsAsVar:{configurable:!0},allowNewDotTarget:{configurable:!0},inClassStaticBlock:{configurable:!0}};U.prototype.parse=function(){var t=this.options.program||this.startNode();return this.nextToken(),this.parseTopLevel(t)},q.inFunction.get=function(){return(2&this.currentVarScope().flags)>0},q.inGenerator.get=function(){return(8&this.currentVarScope().flags)>0&&!this.currentVarScope().inClassFieldInit},q.inAsync.get=function(){return(4&this.currentVarScope().flags)>0&&!this.currentVarScope().inClassFieldInit},q.canAwait.get=function(){for(var t=this.scopeStack.length-1;t>=0;t--){var e=this.scopeStack[t];if(e.inClassFieldInit||e.flags&j)return!1;if(2&e.flags)return(4&e.flags)>0}return this.inModule&&this.options.ecmaVersion>=13||this.options.allowAwaitOutsideFunction},q.allowSuper.get=function(){var t=this.currentThisScope(),e=t.flags,i=t.inClassFieldInit;return(64&e)>0||i||this.options.allowSuperOutsideMethod},q.allowDirectSuper.get=function(){return(128&this.currentThisScope().flags)>0},q.treatFunctionsAsVar.get=function(){return this.treatFunctionsAsVarInScope(this.currentScope())},q.allowNewDotTarget.get=function(){var t=this.currentThisScope(),e=t.flags,i=t.inClassFieldInit;return(258&e)>0||i},q.inClassStaticBlock.get=function(){return(this.currentVarScope().flags&j)>0},U.extend=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];for(var i=this,n=0;n<t.length;n++)i=t[n](i);return i},U.parse=function(t,e){return new this(e,t).parse()},U.parseExpressionAt=function(t,e,i){var n=new this(i,t,e);return n.nextToken(),n.parseExpression()},U.tokenizer=function(t,e){return new this(e,t)},Object.defineProperties(U.prototype,q);var H=U.prototype,G=/^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;function W(){this.shorthandAssign=this.trailingComma=this.parenthesizedAssign=this.parenthesizedBind=this.doubleProto=-1}H.strictDirective=function(t){for(;;){k.lastIndex=t,t+=k.exec(this.input)[0].length;var e=G.exec(this.input.slice(t));if(!e)return!1;if("use strict"===(e[1]||e[2])){k.lastIndex=t+e[0].length;var i=k.exec(this.input),n=i.index+i[0].length,s=this.input.charAt(n);return";"===s||"}"===s||w.test(i[0])&&!(/[(`.[+\-/*%<>=,?^&]/.test(s)||"!"===s&&"="===this.input.charAt(n+1))}t+=e[0].length,k.lastIndex=t,t+=k.exec(this.input)[0].length,";"===this.input[t]&&t++}},H.eat=function(t){return this.type===t&&(this.next(),!0)},H.isContextual=function(t){return this.type===y.name&&this.value===t&&!this.containsEsc},H.eatContextual=function(t){return!!this.isContextual(t)&&(this.next(),!0)},H.expectContextual=function(t){this.eatContextual(t)||this.unexpected()},H.canInsertSemicolon=function(){return this.type===y.eof||this.type===y.braceR||w.test(this.input.slice(this.lastTokEnd,this.start))},H.insertSemicolon=function(){if(this.canInsertSemicolon())return this.options.onInsertedSemicolon&&this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc),!0},H.semicolon=function(){this.eat(y.semi)||this.insertSemicolon()||this.unexpected()},H.afterTrailingComma=function(t,e){if(this.type===t)return this.options.onTrailingComma&&this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc),e||this.next(),!0},H.expect=function(t){this.eat(t)||this.unexpected()},H.unexpected=function(t){this.raise(null!=t?t:this.start,"Unexpected token")},H.checkPatternErrors=function(t,e){if(t){t.trailingComma>-1&&this.raiseRecoverable(t.trailingComma,"Comma is not permitted after the rest element");var i=e?t.parenthesizedAssign:t.parenthesizedBind;i>-1&&this.raiseRecoverable(i,"Parenthesized pattern")}},H.checkExpressionErrors=function(t,e){if(!t)return!1;var i=t.shorthandAssign,n=t.doubleProto;if(!e)return i>=0||n>=0;i>=0&&this.raise(i,"Shorthand property assignments are valid only in destructuring patterns"),n>=0&&this.raiseRecoverable(n,"Redefinition of __proto__ property")},H.checkYieldAwaitInDefaultParams=function(){this.yieldPos&&(!this.awaitPos||this.yieldPos<this.awaitPos)&&this.raise(this.yieldPos,"Yield expression cannot be a default value"),this.awaitPos&&this.raise(this.awaitPos,"Await expression cannot be a default value")},H.isSimpleAssignTarget=function(t){return"ParenthesizedExpression"===t.type?this.isSimpleAssignTarget(t.expression):"Identifier"===t.type||"MemberExpression"===t.type};var K=U.prototype;K.parseTopLevel=function(t){var e=Object.create(null);for(t.body||(t.body=[]);this.type!==y.eof;){var i=this.parseStatement(null,!0,e);t.body.push(i)}if(this.inModule)for(var n=0,s=Object.keys(this.undefinedExports);n<s.length;n+=1){var r=s[n];this.raiseRecoverable(this.undefinedExports[r].start,"Export '"+r+"' is not defined")}return this.adaptDirectivePrologue(t.body),this.next(),t.sourceType=this.options.sourceType,this.finishNode(t,"Program")};var Q={kind:"loop"},X={kind:"switch"};K.isLet=function(t){if(this.options.ecmaVersion<6||!this.isContextual("let"))return!1;k.lastIndex=this.pos;var e=k.exec(this.input),i=this.pos+e[0].length,n=this.input.charCodeAt(i);if(91===n||92===n||n>55295&&n<56320)return!0;if(t)return!1;if(123===n)return!0;if(d(n,!0)){for(var r=i+1;p(n=this.input.charCodeAt(r),!0);)++r;if(92===n||n>55295&&n<56320)return!0;var o=this.input.slice(i,r);if(!s.test(o))return!0}return!1},K.isAsyncFunction=function(){if(this.options.ecmaVersion<8||!this.isContextual("async"))return!1;k.lastIndex=this.pos;var t,e=k.exec(this.input),i=this.pos+e[0].length;return!(w.test(this.input.slice(this.pos,i))||"function"!==this.input.slice(i,i+8)||i+8!==this.input.length&&(p(t=this.input.charCodeAt(i+8))||t>55295&&t<56320))},K.parseStatement=function(t,e,i){var n,s=this.type,r=this.startNode();switch(this.isLet(t)&&(s=y._var,n="let"),s){case y._break:case y._continue:return this.parseBreakContinueStatement(r,s.keyword);case y._debugger:return this.parseDebuggerStatement(r);case y._do:return this.parseDoStatement(r);case y._for:return this.parseForStatement(r);case y._function:return t&&(this.strict||"if"!==t&&"label"!==t)&&this.options.ecmaVersion>=6&&this.unexpected(),this.parseFunctionStatement(r,!1,!t);case y._class:return t&&this.unexpected(),this.parseClass(r,!0);case y._if:return this.parseIfStatement(r);case y._return:return this.parseReturnStatement(r);case y._switch:return this.parseSwitchStatement(r);case y._throw:return this.parseThrowStatement(r);case y._try:return this.parseTryStatement(r);case y._const:case y._var:return n=n||this.value,t&&"var"!==n&&this.unexpected(),this.parseVarStatement(r,n);case y._while:return this.parseWhileStatement(r);case y._with:return this.parseWithStatement(r);case y.braceL:return this.parseBlock(!0,r);case y.semi:return this.parseEmptyStatement(r);case y._export:case y._import:if(this.options.ecmaVersion>10&&s===y._import){k.lastIndex=this.pos;var o=k.exec(this.input),a=this.pos+o[0].length,l=this.input.charCodeAt(a);if(40===l||46===l)return this.parseExpressionStatement(r,this.parseExpression())}return this.options.allowImportExportEverywhere||(e||this.raise(this.start,"'import' and 'export' may only appear at the top level"),this.inModule||this.raise(this.start,"'import' and 'export' may appear only with 'sourceType: module'")),s===y._import?this.parseImport(r):this.parseExport(r,i);default:if(this.isAsyncFunction())return t&&this.unexpected(),this.next(),this.parseFunctionStatement(r,!0,!t);var h=this.value,u=this.parseExpression();return s===y.name&&"Identifier"===u.type&&this.eat(y.colon)?this.parseLabeledStatement(r,h,u,t):this.parseExpressionStatement(r,u)}},K.parseBreakContinueStatement=function(t,e){var i="break"===e;this.next(),this.eat(y.semi)||this.insertSemicolon()?t.label=null:this.type!==y.name?this.unexpected():(t.label=this.parseIdent(),this.semicolon());for(var n=0;n<this.labels.length;++n){var s=this.labels[n];if(null==t.label||s.name===t.label.name){if(null!=s.kind&&(i||"loop"===s.kind))break;if(t.label&&i)break}}return n===this.labels.length&&this.raise(t.start,"Unsyntactic "+e),this.finishNode(t,i?"BreakStatement":"ContinueStatement")},K.parseDebuggerStatement=function(t){return this.next(),this.semicolon(),this.finishNode(t,"DebuggerStatement")},K.parseDoStatement=function(t){return this.next(),this.labels.push(Q),t.body=this.parseStatement("do"),this.labels.pop(),this.expect(y._while),t.test=this.parseParenExpression(),this.options.ecmaVersion>=6?this.eat(y.semi):this.semicolon(),this.finishNode(t,"DoWhileStatement")},K.parseForStatement=function(t){this.next();var e=this.options.ecmaVersion>=9&&this.canAwait&&this.eatContextual("await")?this.lastTokStart:-1;if(this.labels.push(Q),this.enterScope(0),this.expect(y.parenL),this.type===y.semi)return e>-1&&this.unexpected(e),this.parseFor(t,null);var i=this.isLet();if(this.type===y._var||this.type===y._const||i){var n=this.startNode(),s=i?"let":this.value;return this.next(),this.parseVar(n,!0,s),this.finishNode(n,"VariableDeclaration"),(this.type===y._in||this.options.ecmaVersion>=6&&this.isContextual("of"))&&1===n.declarations.length?(this.options.ecmaVersion>=9&&(this.type===y._in?e>-1&&this.unexpected(e):t.await=e>-1),this.parseForIn(t,n)):(e>-1&&this.unexpected(e),this.parseFor(t,n))}var r=this.isContextual("let"),o=!1,a=new W,l=this.parseExpression(!(e>-1)||"await",a);return this.type===y._in||(o=this.options.ecmaVersion>=6&&this.isContextual("of"))?(this.options.ecmaVersion>=9&&(this.type===y._in?e>-1&&this.unexpected(e):t.await=e>-1),r&&o&&this.raise(l.start,"The left-hand side of a for-of loop may not start with 'let'."),this.toAssignable(l,!1,a),this.checkLValPattern(l),this.parseForIn(t,l)):(this.checkExpressionErrors(a,!0),e>-1&&this.unexpected(e),this.parseFor(t,l))},K.parseFunctionStatement=function(t,e,i){return this.next(),this.parseFunction(t,J|(i?0:Z),!1,e)},K.parseIfStatement=function(t){return this.next(),t.test=this.parseParenExpression(),t.consequent=this.parseStatement("if"),t.alternate=this.eat(y._else)?this.parseStatement("if"):null,this.finishNode(t,"IfStatement")},K.parseReturnStatement=function(t){return this.inFunction||this.options.allowReturnOutsideFunction||this.raise(this.start,"'return' outside of function"),this.next(),this.eat(y.semi)||this.insertSemicolon()?t.argument=null:(t.argument=this.parseExpression(),this.semicolon()),this.finishNode(t,"ReturnStatement")},K.parseSwitchStatement=function(t){var e;this.next(),t.discriminant=this.parseParenExpression(),t.cases=[],this.expect(y.braceL),this.labels.push(X),this.enterScope(0);for(var i=!1;this.type!==y.braceR;)if(this.type===y._case||this.type===y._default){var n=this.type===y._case;e&&this.finishNode(e,"SwitchCase"),t.cases.push(e=this.startNode()),e.consequent=[],this.next(),n?e.test=this.parseExpression():(i&&this.raiseRecoverable(this.lastTokStart,"Multiple default clauses"),i=!0,e.test=null),this.expect(y.colon)}else e||this.unexpected(),e.consequent.push(this.parseStatement(null));return this.exitScope(),e&&this.finishNode(e,"SwitchCase"),this.next(),this.labels.pop(),this.finishNode(t,"SwitchStatement")},K.parseThrowStatement=function(t){return this.next(),w.test(this.input.slice(this.lastTokEnd,this.start))&&this.raise(this.lastTokEnd,"Illegal newline after throw"),t.argument=this.parseExpression(),this.semicolon(),this.finishNode(t,"ThrowStatement")};var Y=[];K.parseTryStatement=function(t){if(this.next(),t.block=this.parseBlock(),t.handler=null,this.type===y._catch){var e=this.startNode();if(this.next(),this.eat(y.parenL)){e.param=this.parseBindingAtom();var i="Identifier"===e.param.type;this.enterScope(i?32:0),this.checkLValPattern(e.param,i?4:2),this.expect(y.parenR)}else this.options.ecmaVersion<10&&this.unexpected(),e.param=null,this.enterScope(0);e.body=this.parseBlock(!1),this.exitScope(),t.handler=this.finishNode(e,"CatchClause")}return t.finalizer=this.eat(y._finally)?this.parseBlock():null,t.handler||t.finalizer||this.raise(t.start,"Missing catch or finally clause"),this.finishNode(t,"TryStatement")},K.parseVarStatement=function(t,e){return this.next(),this.parseVar(t,!1,e),this.semicolon(),this.finishNode(t,"VariableDeclaration")},K.parseWhileStatement=function(t){return this.next(),t.test=this.parseParenExpression(),this.labels.push(Q),t.body=this.parseStatement("while"),this.labels.pop(),this.finishNode(t,"WhileStatement")},K.parseWithStatement=function(t){return this.strict&&this.raise(this.start,"'with' in strict mode"),this.next(),t.object=this.parseParenExpression(),t.body=this.parseStatement("with"),this.finishNode(t,"WithStatement")},K.parseEmptyStatement=function(t){return this.next(),this.finishNode(t,"EmptyStatement")},K.parseLabeledStatement=function(t,e,i,n){for(var s=0,r=this.labels;s<r.length;s+=1)r[s].name===e&&this.raise(i.start,"Label '"+e+"' is already declared");for(var o=this.type.isLoop?"loop":this.type===y._switch?"switch":null,a=this.labels.length-1;a>=0;a--){var l=this.labels[a];if(l.statementStart!==t.start)break;l.statementStart=this.start,l.kind=o}return this.labels.push({name:e,kind:o,statementStart:this.start}),t.body=this.parseStatement(n?-1===n.indexOf("label")?n+"label":n:"label"),this.labels.pop(),t.label=i,this.finishNode(t,"LabeledStatement")},K.parseExpressionStatement=function(t,e){return t.expression=e,this.semicolon(),this.finishNode(t,"ExpressionStatement")},K.parseBlock=function(t,e,i){for(void 0===t&&(t=!0),void 0===e&&(e=this.startNode()),e.body=[],this.expect(y.braceL),t&&this.enterScope(0);this.type!==y.braceR;){var n=this.parseStatement(null);e.body.push(n)}return i&&(this.strict=!1),this.next(),t&&this.exitScope(),this.finishNode(e,"BlockStatement")},K.parseFor=function(t,e){return t.init=e,this.expect(y.semi),t.test=this.type===y.semi?null:this.parseExpression(),this.expect(y.semi),t.update=this.type===y.parenR?null:this.parseExpression(),this.expect(y.parenR),t.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(t,"ForStatement")},K.parseForIn=function(t,e){var i=this.type===y._in;return this.next(),"VariableDeclaration"===e.type&&null!=e.declarations[0].init&&(!i||this.options.ecmaVersion<8||this.strict||"var"!==e.kind||"Identifier"!==e.declarations[0].id.type)&&this.raise(e.start,(i?"for-in":"for-of")+" loop variable declaration may not have an initializer"),t.left=e,t.right=i?this.parseExpression():this.parseMaybeAssign(),this.expect(y.parenR),t.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(t,i?"ForInStatement":"ForOfStatement")},K.parseVar=function(t,e,i){for(t.declarations=[],t.kind=i;;){var n=this.startNode();if(this.parseVarId(n,i),this.eat(y.eq)?n.init=this.parseMaybeAssign(e):"const"!==i||this.type===y._in||this.options.ecmaVersion>=6&&this.isContextual("of")?"Identifier"===n.id.type||e&&(this.type===y._in||this.isContextual("of"))?n.init=null:this.raise(this.lastTokEnd,"Complex binding patterns require an initialization value"):this.unexpected(),t.declarations.push(this.finishNode(n,"VariableDeclarator")),!this.eat(y.comma))break}return t},K.parseVarId=function(t,e){t.id=this.parseBindingAtom(),this.checkLValPattern(t.id,"var"===e?1:2,!1)};var J=1,Z=2;function $(t,e){var i=e.key.name,n=t[i],s="true";return"MethodDefinition"!==e.type||"get"!==e.kind&&"set"!==e.kind||(s=(e.static?"s":"i")+e.kind),"iget"===n&&"iset"===s||"iset"===n&&"iget"===s||"sget"===n&&"sset"===s||"sset"===n&&"sget"===s?(t[i]="true",!1):!!n||(t[i]=s,!1)}function tt(t,e){var i=t.computed,n=t.key;return!i&&("Identifier"===n.type&&n.name===e||"Literal"===n.type&&n.value===e)}K.parseFunction=function(t,e,i,n,s){this.initFunction(t),(this.options.ecmaVersion>=9||this.options.ecmaVersion>=6&&!n)&&(this.type===y.star&&e&Z&&this.unexpected(),t.generator=this.eat(y.star)),this.options.ecmaVersion>=8&&(t.async=!!n),e&J&&(t.id=4&e&&this.type!==y.name?null:this.parseIdent(),!t.id||e&Z||this.checkLValSimple(t.id,this.strict||t.generator||t.async?this.treatFunctionsAsVar?1:2:3));var r=this.yieldPos,o=this.awaitPos,a=this.awaitIdentPos;return this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(z(t.async,t.generator)),e&J||(t.id=this.type===y.name?this.parseIdent():null),this.parseFunctionParams(t),this.parseFunctionBody(t,i,!1,s),this.yieldPos=r,this.awaitPos=o,this.awaitIdentPos=a,this.finishNode(t,e&J?"FunctionDeclaration":"FunctionExpression")},K.parseFunctionParams=function(t){this.expect(y.parenL),t.params=this.parseBindingList(y.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams()},K.parseClass=function(t,e){this.next();var i=this.strict;this.strict=!0,this.parseClassId(t,e),this.parseClassSuper(t);var n=this.enterClassBody(),s=this.startNode(),r=!1;for(s.body=[],this.expect(y.braceL);this.type!==y.braceR;){var o=this.parseClassElement(null!==t.superClass);o&&(s.body.push(o),"MethodDefinition"===o.type&&"constructor"===o.kind?(r&&this.raise(o.start,"Duplicate constructor in the same class"),r=!0):o.key&&"PrivateIdentifier"===o.key.type&&$(n,o)&&this.raiseRecoverable(o.key.start,"Identifier '#"+o.key.name+"' has already been declared"))}return this.strict=i,this.next(),t.body=this.finishNode(s,"ClassBody"),this.exitClassBody(),this.finishNode(t,e?"ClassDeclaration":"ClassExpression")},K.parseClassElement=function(t){if(this.eat(y.semi))return null;var e=this.options.ecmaVersion,i=this.startNode(),n="",s=!1,r=!1,o="method",a=!1;if(this.eatContextual("static")){if(e>=13&&this.eat(y.braceL))return this.parseClassStaticBlock(i),i;this.isClassElementNameStart()||this.type===y.star?a=!0:n="static"}if(i.static=a,!n&&e>=8&&this.eatContextual("async")&&(!this.isClassElementNameStart()&&this.type!==y.star||this.canInsertSemicolon()?n="async":r=!0),!n&&(e>=9||!r)&&this.eat(y.star)&&(s=!0),!n&&!r&&!s){var l=this.value;(this.eatContextual("get")||this.eatContextual("set"))&&(this.isClassElementNameStart()?o=l:n=l)}if(n?(i.computed=!1,i.key=this.startNodeAt(this.lastTokStart,this.lastTokStartLoc),i.key.name=n,this.finishNode(i.key,"Identifier")):this.parseClassElementName(i),e<13||this.type===y.parenL||"method"!==o||s||r){var h=!i.static&&tt(i,"constructor"),u=h&&t;h&&"method"!==o&&this.raise(i.key.start,"Constructor can't have get/set modifier"),i.kind=h?"constructor":o,this.parseClassMethod(i,s,r,u)}else this.parseClassField(i);return i},K.isClassElementNameStart=function(){return this.type===y.name||this.type===y.privateId||this.type===y.num||this.type===y.string||this.type===y.bracketL||this.type.keyword},K.parseClassElementName=function(t){this.type===y.privateId?("constructor"===this.value&&this.raise(this.start,"Classes can't have an element named '#constructor'"),t.computed=!1,t.key=this.parsePrivateIdent()):this.parsePropertyName(t)},K.parseClassMethod=function(t,e,i,n){var s=t.key;"constructor"===t.kind?(e&&this.raise(s.start,"Constructor can't be a generator"),i&&this.raise(s.start,"Constructor can't be an async method")):t.static&&tt(t,"prototype")&&this.raise(s.start,"Classes may not have a static property named prototype");var r=t.value=this.parseMethod(e,i,n);return"get"===t.kind&&0!==r.params.length&&this.raiseRecoverable(r.start,"getter should have no params"),"set"===t.kind&&1!==r.params.length&&this.raiseRecoverable(r.start,"setter should have exactly one param"),"set"===t.kind&&"RestElement"===r.params[0].type&&this.raiseRecoverable(r.params[0].start,"Setter cannot use rest params"),this.finishNode(t,"MethodDefinition")},K.parseClassField=function(t){if(tt(t,"constructor")?this.raise(t.key.start,"Classes can't have a field named 'constructor'"):t.static&&tt(t,"prototype")&&this.raise(t.key.start,"Classes can't have a static field named 'prototype'"),this.eat(y.eq)){var e=this.currentThisScope(),i=e.inClassFieldInit;e.inClassFieldInit=!0,t.value=this.parseMaybeAssign(),e.inClassFieldInit=i}else t.value=null;return this.semicolon(),this.finishNode(t,"PropertyDefinition")},K.parseClassStaticBlock=function(t){t.body=[];var e=this.labels;for(this.labels=[],this.enterScope(320);this.type!==y.braceR;){var i=this.parseStatement(null);t.body.push(i)}return this.next(),this.exitScope(),this.labels=e,this.finishNode(t,"StaticBlock")},K.parseClassId=function(t,e){this.type===y.name?(t.id=this.parseIdent(),e&&this.checkLValSimple(t.id,2,!1)):(!0===e&&this.unexpected(),t.id=null)},K.parseClassSuper=function(t){t.superClass=this.eat(y._extends)?this.parseExprSubscripts(!1):null},K.enterClassBody=function(){var t={declared:Object.create(null),used:[]};return this.privateNameStack.push(t),t.declared},K.exitClassBody=function(){for(var t=this.privateNameStack.pop(),e=t.declared,i=t.used,n=this.privateNameStack.length,s=0===n?null:this.privateNameStack[n-1],r=0;r<i.length;++r){var o=i[r];E(e,o.name)||(s?s.used.push(o):this.raiseRecoverable(o.start,"Private field '#"+o.name+"' must be declared in an enclosing class"))}},K.parseExport=function(t,e){if(this.next(),this.eat(y.star))return this.options.ecmaVersion>=11&&(this.eatContextual("as")?(t.exported=this.parseModuleExportName(),this.checkExport(e,t.exported.name,this.lastTokStart)):t.exported=null),this.expectContextual("from"),this.type!==y.string&&this.unexpected(),t.source=this.parseExprAtom(),this.semicolon(),this.finishNode(t,"ExportAllDeclaration");if(this.eat(y._default)){var i;if(this.checkExport(e,"default",this.lastTokStart),this.type===y._function||(i=this.isAsyncFunction())){var n=this.startNode();this.next(),i&&this.next(),t.declaration=this.parseFunction(n,4|J,!1,i)}else if(this.type===y._class){var s=this.startNode();t.declaration=this.parseClass(s,"nullableID")}else t.declaration=this.parseMaybeAssign(),this.semicolon();return this.finishNode(t,"ExportDefaultDeclaration")}if(this.shouldParseExportStatement())t.declaration=this.parseStatement(null),"VariableDeclaration"===t.declaration.type?this.checkVariableExport(e,t.declaration.declarations):this.checkExport(e,t.declaration.id.name,t.declaration.id.start),t.specifiers=[],t.source=null;else{if(t.declaration=null,t.specifiers=this.parseExportSpecifiers(e),this.eatContextual("from"))this.type!==y.string&&this.unexpected(),t.source=this.parseExprAtom();else{for(var r=0,o=t.specifiers;r<o.length;r+=1){var a=o[r];this.checkUnreserved(a.local),this.checkLocalExport(a.local),"Literal"===a.local.type&&this.raise(a.local.start,"A string literal cannot be used as an exported binding without `from`.")}t.source=null}this.semicolon()}return this.finishNode(t,"ExportNamedDeclaration")},K.checkExport=function(t,e,i){t&&(E(t,e)&&this.raiseRecoverable(i,"Duplicate export '"+e+"'"),t[e]=!0)},K.checkPatternExport=function(t,e){var i=e.type;if("Identifier"===i)this.checkExport(t,e.name,e.start);else if("ObjectPattern"===i)for(var n=0,s=e.properties;n<s.length;n+=1){var r=s[n];this.checkPatternExport(t,r)}else if("ArrayPattern"===i)for(var o=0,a=e.elements;o<a.length;o+=1){var l=a[o];l&&this.checkPatternExport(t,l)}else"Property"===i?this.checkPatternExport(t,e.value):"AssignmentPattern"===i?this.checkPatternExport(t,e.left):"RestElement"===i?this.checkPatternExport(t,e.argument):"ParenthesizedExpression"===i&&this.checkPatternExport(t,e.expression)},K.checkVariableExport=function(t,e){if(t)for(var i=0,n=e;i<n.length;i+=1){var s=n[i];this.checkPatternExport(t,s.id)}},K.shouldParseExportStatement=function(){return"var"===this.type.keyword||"const"===this.type.keyword||"class"===this.type.keyword||"function"===this.type.keyword||this.isLet()||this.isAsyncFunction()},K.parseExportSpecifiers=function(t){var e=[],i=!0;for(this.expect(y.braceL);!this.eat(y.braceR);){if(i)i=!1;else if(this.expect(y.comma),this.afterTrailingComma(y.braceR))break;var n=this.startNode();n.local=this.parseModuleExportName(),n.exported=this.eatContextual("as")?this.parseModuleExportName():n.local,this.checkExport(t,n.exported["Identifier"===n.exported.type?"name":"value"],n.exported.start),e.push(this.finishNode(n,"ExportSpecifier"))}return e},K.parseImport=function(t){return this.next(),this.type===y.string?(t.specifiers=Y,t.source=this.parseExprAtom()):(t.specifiers=this.parseImportSpecifiers(),this.expectContextual("from"),t.source=this.type===y.string?this.parseExprAtom():this.unexpected()),this.semicolon(),this.finishNode(t,"ImportDeclaration")},K.parseImportSpecifiers=function(){var t=[],e=!0;if(this.type===y.name){var i=this.startNode();if(i.local=this.parseIdent(),this.checkLValSimple(i.local,2),t.push(this.finishNode(i,"ImportDefaultSpecifier")),!this.eat(y.comma))return t}if(this.type===y.star){var n=this.startNode();return this.next(),this.expectContextual("as"),n.local=this.parseIdent(),this.checkLValSimple(n.local,2),t.push(this.finishNode(n,"ImportNamespaceSpecifier")),t}for(this.expect(y.braceL);!this.eat(y.braceR);){if(e)e=!1;else if(this.expect(y.comma),this.afterTrailingComma(y.braceR))break;var s=this.startNode();s.imported=this.parseModuleExportName(),this.eatContextual("as")?s.local=this.parseIdent():(this.checkUnreserved(s.imported),s.local=s.imported),this.checkLValSimple(s.local,2),t.push(this.finishNode(s,"ImportSpecifier"))}return t},K.parseModuleExportName=function(){if(this.options.ecmaVersion>=13&&this.type===y.string){var t=this.parseLiteral(this.value);return L.test(t.value)&&this.raise(t.start,"An export name cannot include a lone surrogate."),t}return this.parseIdent(!0)},K.adaptDirectivePrologue=function(t){for(var e=0;e<t.length&&this.isDirectiveCandidate(t[e]);++e)t[e].directive=t[e].expression.raw.slice(1,-1)},K.isDirectiveCandidate=function(t){return"ExpressionStatement"===t.type&&"Literal"===t.expression.type&&"string"==typeof t.expression.value&&('"'===this.input[t.start]||"'"===this.input[t.start])};var et=U.prototype;et.toAssignable=function(t,e,i){if(this.options.ecmaVersion>=6&&t)switch(t.type){case"Identifier":this.inAsync&&"await"===t.name&&this.raise(t.start,"Cannot use 'await' as identifier inside an async function");break;case"ObjectPattern":case"ArrayPattern":case"AssignmentPattern":case"RestElement":break;case"ObjectExpression":t.type="ObjectPattern",i&&this.checkPatternErrors(i,!0);for(var n=0,s=t.properties;n<s.length;n+=1){var r=s[n];this.toAssignable(r,e),"RestElement"!==r.type||"ArrayPattern"!==r.argument.type&&"ObjectPattern"!==r.argument.type||this.raise(r.argument.start,"Unexpected token")}break;case"Property":"init"!==t.kind&&this.raise(t.key.start,"Object pattern can't contain getter or setter"),this.toAssignable(t.value,e);break;case"ArrayExpression":t.type="ArrayPattern",i&&this.checkPatternErrors(i,!0),this.toAssignableList(t.elements,e);break;case"SpreadElement":t.type="RestElement",this.toAssignable(t.argument,e),"AssignmentPattern"===t.argument.type&&this.raise(t.argument.start,"Rest elements cannot have a default value");break;case"AssignmentExpression":"="!==t.operator&&this.raise(t.left.end,"Only '=' operator can be used for specifying default value."),t.type="AssignmentPattern",delete t.operator,this.toAssignable(t.left,e);break;case"ParenthesizedExpression":this.toAssignable(t.expression,e,i);break;case"ChainExpression":this.raiseRecoverable(t.start,"Optional chaining cannot appear in left-hand side");break;case"MemberExpression":if(!e)break;default:this.raise(t.start,"Assigning to rvalue")}else i&&this.checkPatternErrors(i,!0);return t},et.toAssignableList=function(t,e){for(var i=t.length,n=0;n<i;n++){var s=t[n];s&&this.toAssignable(s,e)}if(i){var r=t[i-1];6===this.options.ecmaVersion&&e&&r&&"RestElement"===r.type&&"Identifier"!==r.argument.type&&this.unexpected(r.argument.start)}return t},et.parseSpread=function(t){var e=this.startNode();return this.next(),e.argument=this.parseMaybeAssign(!1,t),this.finishNode(e,"SpreadElement")},et.parseRestBinding=function(){var t=this.startNode();return this.next(),6===this.options.ecmaVersion&&this.type!==y.name&&this.unexpected(),t.argument=this.parseBindingAtom(),this.finishNode(t,"RestElement")},et.parseBindingAtom=function(){if(this.options.ecmaVersion>=6)switch(this.type){case y.bracketL:var t=this.startNode();return this.next(),t.elements=this.parseBindingList(y.bracketR,!0,!0),this.finishNode(t,"ArrayPattern");case y.braceL:return this.parseObj(!0)}return this.parseIdent()},et.parseBindingList=function(t,e,i){for(var n=[],s=!0;!this.eat(t);)if(s?s=!1:this.expect(y.comma),e&&this.type===y.comma)n.push(null);else{if(i&&this.afterTrailingComma(t))break;if(this.type===y.ellipsis){var r=this.parseRestBinding();this.parseBindingListItem(r),n.push(r),this.type===y.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.expect(t);break}var o=this.parseMaybeDefault(this.start,this.startLoc);this.parseBindingListItem(o),n.push(o)}return n},et.parseBindingListItem=function(t){return t},et.parseMaybeDefault=function(t,e,i){if(i=i||this.parseBindingAtom(),this.options.ecmaVersion<6||!this.eat(y.eq))return i;var n=this.startNodeAt(t,e);return n.left=i,n.right=this.parseMaybeAssign(),this.finishNode(n,"AssignmentPattern")},et.checkLValSimple=function(t,e,i){void 0===e&&(e=0);var n=0!==e;switch(t.type){case"Identifier":this.strict&&this.reservedWordsStrictBind.test(t.name)&&this.raiseRecoverable(t.start,(n?"Binding ":"Assigning to ")+t.name+" in strict mode"),n&&(2===e&&"let"===t.name&&this.raiseRecoverable(t.start,"let is disallowed as a lexically bound name"),i&&(E(i,t.name)&&this.raiseRecoverable(t.start,"Argument name clash"),i[t.name]=!0),5!==e&&this.declareName(t.name,e,t.start));break;case"ChainExpression":this.raiseRecoverable(t.start,"Optional chaining cannot appear in left-hand side");break;case"MemberExpression":n&&this.raiseRecoverable(t.start,"Binding member expression");break;case"ParenthesizedExpression":return n&&this.raiseRecoverable(t.start,"Binding parenthesized expression"),this.checkLValSimple(t.expression,e,i);default:this.raise(t.start,(n?"Binding":"Assigning to")+" rvalue")}},et.checkLValPattern=function(t,e,i){switch(void 0===e&&(e=0),t.type){case"ObjectPattern":for(var n=0,s=t.properties;n<s.length;n+=1){var r=s[n];this.checkLValInnerPattern(r,e,i)}break;case"ArrayPattern":for(var o=0,a=t.elements;o<a.length;o+=1){var l=a[o];l&&this.checkLValInnerPattern(l,e,i)}break;default:this.checkLValSimple(t,e,i)}},et.checkLValInnerPattern=function(t,e,i){switch(void 0===e&&(e=0),t.type){case"Property":this.checkLValInnerPattern(t.value,e,i);break;case"AssignmentPattern":this.checkLValPattern(t.left,e,i);break;case"RestElement":this.checkLValPattern(t.argument,e,i);break;default:this.checkLValPattern(t,e,i)}};var it=function(t,e,i,n,s){this.token=t,this.isExpr=!!e,this.preserveSpace=!!i,this.override=n,this.generator=!!s},nt={b_stat:new it("{",!1),b_expr:new it("{",!0),b_tmpl:new it("${",!1),p_stat:new it("(",!1),p_expr:new it("(",!0),q_tmpl:new it("`",!0,!0,(function(t){return t.tryReadTemplateToken()})),f_stat:new it("function",!1),f_expr:new it("function",!0),f_expr_gen:new it("function",!0,!1,null,!0),f_gen:new it("function",!1,!1,null,!0)},st=U.prototype;st.initialContext=function(){return[nt.b_stat]},st.curContext=function(){return this.context[this.context.length-1]},st.braceIsBlock=function(t){var e=this.curContext();return e===nt.f_expr||e===nt.f_stat||(t!==y.colon||e!==nt.b_stat&&e!==nt.b_expr?t===y._return||t===y.name&&this.exprAllowed?w.test(this.input.slice(this.lastTokEnd,this.start)):t===y._else||t===y.semi||t===y.eof||t===y.parenR||t===y.arrow||(t===y.braceL?e===nt.b_stat:t!==y._var&&t!==y._const&&t!==y.name&&!this.exprAllowed):!e.isExpr)},st.inGeneratorContext=function(){for(var t=this.context.length-1;t>=1;t--){var e=this.context[t];if("function"===e.token)return e.generator}return!1},st.updateContext=function(t){var e,i=this.type;i.keyword&&t===y.dot?this.exprAllowed=!1:(e=i.updateContext)?e.call(this,t):this.exprAllowed=i.beforeExpr},st.overrideContext=function(t){this.curContext()!==t&&(this.context[this.context.length-1]=t)},y.parenR.updateContext=y.braceR.updateContext=function(){if(1!==this.context.length){var t=this.context.pop();t===nt.b_stat&&"function"===this.curContext().token&&(t=this.context.pop()),this.exprAllowed=!t.isExpr}else this.exprAllowed=!0},y.braceL.updateContext=function(t){this.context.push(this.braceIsBlock(t)?nt.b_stat:nt.b_expr),this.exprAllowed=!0},y.dollarBraceL.updateContext=function(){this.context.push(nt.b_tmpl),this.exprAllowed=!0},y.parenL.updateContext=function(t){var e=t===y._if||t===y._for||t===y._with||t===y._while;this.context.push(e?nt.p_stat:nt.p_expr),this.exprAllowed=!0},y.incDec.updateContext=function(){},y._function.updateContext=y._class.updateContext=function(t){!t.beforeExpr||t===y._else||t===y.semi&&this.curContext()!==nt.p_stat||t===y._return&&w.test(this.input.slice(this.lastTokEnd,this.start))||(t===y.colon||t===y.braceL)&&this.curContext()===nt.b_stat?this.context.push(nt.f_stat):this.context.push(nt.f_expr),this.exprAllowed=!1},y.backQuote.updateContext=function(){this.curContext()===nt.q_tmpl?this.context.pop():this.context.push(nt.q_tmpl),this.exprAllowed=!1},y.star.updateContext=function(t){if(t===y._function){var e=this.context.length-1;this.context[e]===nt.f_expr?this.context[e]=nt.f_expr_gen:this.context[e]=nt.f_gen}this.exprAllowed=!0},y.name.updateContext=function(t){var e=!1;this.options.ecmaVersion>=6&&t!==y.dot&&("of"===this.value&&!this.exprAllowed||"yield"===this.value&&this.inGeneratorContext())&&(e=!0),this.exprAllowed=e};var rt=U.prototype;function ot(t){return"MemberExpression"===t.type&&"PrivateIdentifier"===t.property.type||"ChainExpression"===t.type&&ot(t.expression)}rt.checkPropClash=function(t,e,i){if(!(this.options.ecmaVersion>=9&&"SpreadElement"===t.type||this.options.ecmaVersion>=6&&(t.computed||t.method||t.shorthand))){var n,s=t.key;switch(s.type){case"Identifier":n=s.name;break;case"Literal":n=String(s.value);break;default:return}var r=t.kind;if(this.options.ecmaVersion>=6)"__proto__"===n&&"init"===r&&(e.proto&&(i?i.doubleProto<0&&(i.doubleProto=s.start):this.raiseRecoverable(s.start,"Redefinition of __proto__ property")),e.proto=!0);else{var o=e[n="$"+n];o?("init"===r?this.strict&&o.init||o.get||o.set:o.init||o[r])&&this.raiseRecoverable(s.start,"Redefinition of property"):o=e[n]={init:!1,get:!1,set:!1},o[r]=!0}}},rt.parseExpression=function(t,e){var i=this.start,n=this.startLoc,s=this.parseMaybeAssign(t,e);if(this.type===y.comma){var r=this.startNodeAt(i,n);for(r.expressions=[s];this.eat(y.comma);)r.expressions.push(this.parseMaybeAssign(t,e));return this.finishNode(r,"SequenceExpression")}return s},rt.parseMaybeAssign=function(t,e,i){if(this.isContextual("yield")){if(this.inGenerator)return this.parseYield(t);this.exprAllowed=!1}var n=!1,s=-1,r=-1,o=-1;e?(s=e.parenthesizedAssign,r=e.trailingComma,o=e.doubleProto,e.parenthesizedAssign=e.trailingComma=-1):(e=new W,n=!0);var a=this.start,l=this.startLoc;this.type!==y.parenL&&this.type!==y.name||(this.potentialArrowAt=this.start,this.potentialArrowInForAwait="await"===t);var h=this.parseMaybeConditional(t,e);if(i&&(h=i.call(this,h,a,l)),this.type.isAssign){var u=this.startNodeAt(a,l);return u.operator=this.value,this.type===y.eq&&(h=this.toAssignable(h,!1,e)),n||(e.parenthesizedAssign=e.trailingComma=e.doubleProto=-1),e.shorthandAssign>=h.start&&(e.shorthandAssign=-1),this.type===y.eq?this.checkLValPattern(h):this.checkLValSimple(h),u.left=h,this.next(),u.right=this.parseMaybeAssign(t),o>-1&&(e.doubleProto=o),this.finishNode(u,"AssignmentExpression")}return n&&this.checkExpressionErrors(e,!0),s>-1&&(e.parenthesizedAssign=s),r>-1&&(e.trailingComma=r),h},rt.parseMaybeConditional=function(t,e){var i=this.start,n=this.startLoc,s=this.parseExprOps(t,e);if(this.checkExpressionErrors(e))return s;if(this.eat(y.question)){var r=this.startNodeAt(i,n);return r.test=s,r.consequent=this.parseMaybeAssign(),this.expect(y.colon),r.alternate=this.parseMaybeAssign(t),this.finishNode(r,"ConditionalExpression")}return s},rt.parseExprOps=function(t,e){var i=this.start,n=this.startLoc,s=this.parseMaybeUnary(e,!1,!1,t);return this.checkExpressionErrors(e)||s.start===i&&"ArrowFunctionExpression"===s.type?s:this.parseExprOp(s,i,n,-1,t)},rt.parseExprOp=function(t,e,i,n,s){var r=this.type.binop;if(null!=r&&(!s||this.type!==y._in)&&r>n){var o=this.type===y.logicalOR||this.type===y.logicalAND,a=this.type===y.coalesce;a&&(r=y.logicalAND.binop);var l=this.value;this.next();var h=this.start,u=this.startLoc,c=this.parseExprOp(this.parseMaybeUnary(null,!1,!1,s),h,u,r,s),d=this.buildBinary(e,i,t,c,l,o||a);return(o&&this.type===y.coalesce||a&&(this.type===y.logicalOR||this.type===y.logicalAND))&&this.raiseRecoverable(this.start,"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"),this.parseExprOp(d,e,i,n,s)}return t},rt.buildBinary=function(t,e,i,n,s,r){"PrivateIdentifier"===n.type&&this.raise(n.start,"Private identifier can only be left side of binary expression");var o=this.startNodeAt(t,e);return o.left=i,o.operator=s,o.right=n,this.finishNode(o,r?"LogicalExpression":"BinaryExpression")},rt.parseMaybeUnary=function(t,e,i,n){var s,r=this.start,o=this.startLoc;if(this.isContextual("await")&&this.canAwait)s=this.parseAwait(n),e=!0;else if(this.type.prefix){var a=this.startNode(),l=this.type===y.incDec;a.operator=this.value,a.prefix=!0,this.next(),a.argument=this.parseMaybeUnary(null,!0,l,n),this.checkExpressionErrors(t,!0),l?this.checkLValSimple(a.argument):this.strict&&"delete"===a.operator&&"Identifier"===a.argument.type?this.raiseRecoverable(a.start,"Deleting local variable in strict mode"):"delete"===a.operator&&ot(a.argument)?this.raiseRecoverable(a.start,"Private fields can not be deleted"):e=!0,s=this.finishNode(a,l?"UpdateExpression":"UnaryExpression")}else if(e||this.type!==y.privateId){if(s=this.parseExprSubscripts(t,n),this.checkExpressionErrors(t))return s;for(;this.type.postfix&&!this.canInsertSemicolon();){var h=this.startNodeAt(r,o);h.operator=this.value,h.prefix=!1,h.argument=s,this.checkLValSimple(s),this.next(),s=this.finishNode(h,"UpdateExpression")}}else(n||0===this.privateNameStack.length)&&this.unexpected(),s=this.parsePrivateIdent(),this.type!==y._in&&this.unexpected();return i||!this.eat(y.starstar)?s:e?void this.unexpected(this.lastTokStart):this.buildBinary(r,o,s,this.parseMaybeUnary(null,!1,!1,n),"**",!1)},rt.parseExprSubscripts=function(t,e){var i=this.start,n=this.startLoc,s=this.parseExprAtom(t,e);if("ArrowFunctionExpression"===s.type&&")"!==this.input.slice(this.lastTokStart,this.lastTokEnd))return s;var r=this.parseSubscripts(s,i,n,!1,e);return t&&"MemberExpression"===r.type&&(t.parenthesizedAssign>=r.start&&(t.parenthesizedAssign=-1),t.parenthesizedBind>=r.start&&(t.parenthesizedBind=-1),t.trailingComma>=r.start&&(t.trailingComma=-1)),r},rt.parseSubscripts=function(t,e,i,n,s){for(var r=this.options.ecmaVersion>=8&&"Identifier"===t.type&&"async"===t.name&&this.lastTokEnd===t.end&&!this.canInsertSemicolon()&&t.end-t.start==5&&this.potentialArrowAt===t.start,o=!1;;){var a=this.parseSubscript(t,e,i,n,r,o,s);if(a.optional&&(o=!0),a===t||"ArrowFunctionExpression"===a.type){if(o){var l=this.startNodeAt(e,i);l.expression=a,a=this.finishNode(l,"ChainExpression")}return a}t=a}},rt.parseSubscript=function(t,e,i,n,s,r,o){var a=this.options.ecmaVersion>=11,l=a&&this.eat(y.questionDot);n&&l&&this.raise(this.lastTokStart,"Optional chaining cannot appear in the callee of new expressions");var h=this.eat(y.bracketL);if(h||l&&this.type!==y.parenL&&this.type!==y.backQuote||this.eat(y.dot)){var u=this.startNodeAt(e,i);u.object=t,h?(u.property=this.parseExpression(),this.expect(y.bracketR)):this.type===y.privateId&&"Super"!==t.type?u.property=this.parsePrivateIdent():u.property=this.parseIdent("never"!==this.options.allowReserved),u.computed=!!h,a&&(u.optional=l),t=this.finishNode(u,"MemberExpression")}else if(!n&&this.eat(y.parenL)){var c=new W,d=this.yieldPos,p=this.awaitPos,f=this.awaitIdentPos;this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0;var g=this.parseExprList(y.parenR,this.options.ecmaVersion>=8,!1,c);if(s&&!l&&!this.canInsertSemicolon()&&this.eat(y.arrow))return this.checkPatternErrors(c,!1),this.checkYieldAwaitInDefaultParams(),this.awaitIdentPos>0&&this.raise(this.awaitIdentPos,"Cannot use 'await' as identifier inside an async function"),this.yieldPos=d,this.awaitPos=p,this.awaitIdentPos=f,this.parseArrowExpression(this.startNodeAt(e,i),g,!0,o);this.checkExpressionErrors(c,!0),this.yieldPos=d||this.yieldPos,this.awaitPos=p||this.awaitPos,this.awaitIdentPos=f||this.awaitIdentPos;var m=this.startNodeAt(e,i);m.callee=t,m.arguments=g,a&&(m.optional=l),t=this.finishNode(m,"CallExpression")}else if(this.type===y.backQuote){(l||r)&&this.raise(this.start,"Optional chaining cannot appear in the tag of tagged template expressions");var v=this.startNodeAt(e,i);v.tag=t,v.quasi=this.parseTemplate({isTagged:!0}),t=this.finishNode(v,"TaggedTemplateExpression")}return t},rt.parseExprAtom=function(t,e){this.type===y.slash&&this.readRegexp();var i,n=this.potentialArrowAt===this.start;switch(this.type){case y._super:return this.allowSuper||this.raise(this.start,"'super' keyword outside a method"),i=this.startNode(),this.next(),this.type!==y.parenL||this.allowDirectSuper||this.raise(i.start,"super() call outside constructor of a subclass"),this.type!==y.dot&&this.type!==y.bracketL&&this.type!==y.parenL&&this.unexpected(),this.finishNode(i,"Super");case y._this:return i=this.startNode(),this.next(),this.finishNode(i,"ThisExpression");case y.name:var s=this.start,r=this.startLoc,o=this.containsEsc,a=this.parseIdent(!1);if(this.options.ecmaVersion>=8&&!o&&"async"===a.name&&!this.canInsertSemicolon()&&this.eat(y._function))return this.overrideContext(nt.f_expr),this.parseFunction(this.startNodeAt(s,r),0,!1,!0,e);if(n&&!this.canInsertSemicolon()){if(this.eat(y.arrow))return this.parseArrowExpression(this.startNodeAt(s,r),[a],!1,e);if(this.options.ecmaVersion>=8&&"async"===a.name&&this.type===y.name&&!o&&(!this.potentialArrowInForAwait||"of"!==this.value||this.containsEsc))return a=this.parseIdent(!1),!this.canInsertSemicolon()&&this.eat(y.arrow)||this.unexpected(),this.parseArrowExpression(this.startNodeAt(s,r),[a],!0,e)}return a;case y.regexp:var l=this.value;return(i=this.parseLiteral(l.value)).regex={pattern:l.pattern,flags:l.flags},i;case y.num:case y.string:return this.parseLiteral(this.value);case y._null:case y._true:case y._false:return(i=this.startNode()).value=this.type===y._null?null:this.type===y._true,i.raw=this.type.keyword,this.next(),this.finishNode(i,"Literal");case y.parenL:var h=this.start,u=this.parseParenAndDistinguishExpression(n,e);return t&&(t.parenthesizedAssign<0&&!this.isSimpleAssignTarget(u)&&(t.parenthesizedAssign=h),t.parenthesizedBind<0&&(t.parenthesizedBind=h)),u;case y.bracketL:return i=this.startNode(),this.next(),i.elements=this.parseExprList(y.bracketR,!0,!0,t),this.finishNode(i,"ArrayExpression");case y.braceL:return this.overrideContext(nt.b_expr),this.parseObj(!1,t);case y._function:return i=this.startNode(),this.next(),this.parseFunction(i,0);case y._class:return this.parseClass(this.startNode(),!1);case y._new:return this.parseNew();case y.backQuote:return this.parseTemplate();case y._import:return this.options.ecmaVersion>=11?this.parseExprImport():this.unexpected();default:this.unexpected()}},rt.parseExprImport=function(){var t=this.startNode();this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword import");var e=this.parseIdent(!0);switch(this.type){case y.parenL:return this.parseDynamicImport(t);case y.dot:return t.meta=e,this.parseImportMeta(t);default:this.unexpected()}},rt.parseDynamicImport=function(t){if(this.next(),t.source=this.parseMaybeAssign(),!this.eat(y.parenR)){var e=this.start;this.eat(y.comma)&&this.eat(y.parenR)?this.raiseRecoverable(e,"Trailing comma is not allowed in import()"):this.unexpected(e)}return this.finishNode(t,"ImportExpression")},rt.parseImportMeta=function(t){this.next();var e=this.containsEsc;return t.property=this.parseIdent(!0),"meta"!==t.property.name&&this.raiseRecoverable(t.property.start,"The only valid meta property for import is 'import.meta'"),e&&this.raiseRecoverable(t.start,"'import.meta' must not contain escaped characters"),"module"===this.options.sourceType||this.options.allowImportExportEverywhere||this.raiseRecoverable(t.start,"Cannot use 'import.meta' outside a module"),this.finishNode(t,"MetaProperty")},rt.parseLiteral=function(t){var e=this.startNode();return e.value=t,e.raw=this.input.slice(this.start,this.end),110===e.raw.charCodeAt(e.raw.length-1)&&(e.bigint=e.raw.slice(0,-1).replace(/_/g,"")),this.next(),this.finishNode(e,"Literal")},rt.parseParenExpression=function(){this.expect(y.parenL);var t=this.parseExpression();return this.expect(y.parenR),t},rt.parseParenAndDistinguishExpression=function(t,e){var i,n=this.start,s=this.startLoc,r=this.options.ecmaVersion>=8;if(this.options.ecmaVersion>=6){this.next();var o,a=this.start,l=this.startLoc,h=[],u=!0,c=!1,d=new W,p=this.yieldPos,f=this.awaitPos;for(this.yieldPos=0,this.awaitPos=0;this.type!==y.parenR;){if(u?u=!1:this.expect(y.comma),r&&this.afterTrailingComma(y.parenR,!0)){c=!0;break}if(this.type===y.ellipsis){o=this.start,h.push(this.parseParenItem(this.parseRestBinding())),this.type===y.comma&&this.raise(this.start,"Comma is not permitted after the rest element");break}h.push(this.parseMaybeAssign(!1,d,this.parseParenItem))}var g=this.lastTokEnd,m=this.lastTokEndLoc;if(this.expect(y.parenR),t&&!this.canInsertSemicolon()&&this.eat(y.arrow))return this.checkPatternErrors(d,!1),this.checkYieldAwaitInDefaultParams(),this.yieldPos=p,this.awaitPos=f,this.parseParenArrowList(n,s,h,e);h.length&&!c||this.unexpected(this.lastTokStart),o&&this.unexpected(o),this.checkExpressionErrors(d,!0),this.yieldPos=p||this.yieldPos,this.awaitPos=f||this.awaitPos,h.length>1?((i=this.startNodeAt(a,l)).expressions=h,this.finishNodeAt(i,"SequenceExpression",g,m)):i=h[0]}else i=this.parseParenExpression();if(this.options.preserveParens){var v=this.startNodeAt(n,s);return v.expression=i,this.finishNode(v,"ParenthesizedExpression")}return i},rt.parseParenItem=function(t){return t},rt.parseParenArrowList=function(t,e,i,n){return this.parseArrowExpression(this.startNodeAt(t,e),i,!1,n)};var at=[];rt.parseNew=function(){this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword new");var t=this.startNode(),e=this.parseIdent(!0);if(this.options.ecmaVersion>=6&&this.eat(y.dot)){t.meta=e;var i=this.containsEsc;return t.property=this.parseIdent(!0),"target"!==t.property.name&&this.raiseRecoverable(t.property.start,"The only valid meta property for new is 'new.target'"),i&&this.raiseRecoverable(t.start,"'new.target' must not contain escaped characters"),this.allowNewDotTarget||this.raiseRecoverable(t.start,"'new.target' can only be used in functions and class static block"),this.finishNode(t,"MetaProperty")}var n=this.start,s=this.startLoc,r=this.type===y._import;return t.callee=this.parseSubscripts(this.parseExprAtom(),n,s,!0,!1),r&&"ImportExpression"===t.callee.type&&this.raise(n,"Cannot use new with import()"),this.eat(y.parenL)?t.arguments=this.parseExprList(y.parenR,this.options.ecmaVersion>=8,!1):t.arguments=at,this.finishNode(t,"NewExpression")},rt.parseTemplateElement=function(t){var e=t.isTagged,i=this.startNode();return this.type===y.invalidTemplate?(e||this.raiseRecoverable(this.start,"Bad escape sequence in untagged template literal"),i.value={raw:this.value,cooked:null}):i.value={raw:this.input.slice(this.start,this.end).replace(/\r\n?/g,"\n"),cooked:this.value},this.next(),i.tail=this.type===y.backQuote,this.finishNode(i,"TemplateElement")},rt.parseTemplate=function(t){void 0===t&&(t={});var e=t.isTagged;void 0===e&&(e=!1);var i=this.startNode();this.next(),i.expressions=[];var n=this.parseTemplateElement({isTagged:e});for(i.quasis=[n];!n.tail;)this.type===y.eof&&this.raise(this.pos,"Unterminated template literal"),this.expect(y.dollarBraceL),i.expressions.push(this.parseExpression()),this.expect(y.braceR),i.quasis.push(n=this.parseTemplateElement({isTagged:e}));return this.next(),this.finishNode(i,"TemplateLiteral")},rt.isAsyncProp=function(t){return!t.computed&&"Identifier"===t.key.type&&"async"===t.key.name&&(this.type===y.name||this.type===y.num||this.type===y.string||this.type===y.bracketL||this.type.keyword||this.options.ecmaVersion>=9&&this.type===y.star)&&!w.test(this.input.slice(this.lastTokEnd,this.start))},rt.parseObj=function(t,e){var i=this.startNode(),n=!0,s={};for(i.properties=[],this.next();!this.eat(y.braceR);){if(n)n=!1;else if(this.expect(y.comma),this.options.ecmaVersion>=5&&this.afterTrailingComma(y.braceR))break;var r=this.parseProperty(t,e);t||this.checkPropClash(r,s,e),i.properties.push(r)}return this.finishNode(i,t?"ObjectPattern":"ObjectExpression")},rt.parseProperty=function(t,e){var i,n,s,r,o=this.startNode();if(this.options.ecmaVersion>=9&&this.eat(y.ellipsis))return t?(o.argument=this.parseIdent(!1),this.type===y.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.finishNode(o,"RestElement")):(this.type===y.parenL&&e&&(e.parenthesizedAssign<0&&(e.parenthesizedAssign=this.start),e.parenthesizedBind<0&&(e.parenthesizedBind=this.start)),o.argument=this.parseMaybeAssign(!1,e),this.type===y.comma&&e&&e.trailingComma<0&&(e.trailingComma=this.start),this.finishNode(o,"SpreadElement"));this.options.ecmaVersion>=6&&(o.method=!1,o.shorthand=!1,(t||e)&&(s=this.start,r=this.startLoc),t||(i=this.eat(y.star)));var a=this.containsEsc;return this.parsePropertyName(o),!t&&!a&&this.options.ecmaVersion>=8&&!i&&this.isAsyncProp(o)?(n=!0,i=this.options.ecmaVersion>=9&&this.eat(y.star),this.parsePropertyName(o,e)):n=!1,this.parsePropertyValue(o,t,i,n,s,r,e,a),this.finishNode(o,"Property")},rt.parsePropertyValue=function(t,e,i,n,s,r,o,a){if((i||n)&&this.type===y.colon&&this.unexpected(),this.eat(y.colon))t.value=e?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(!1,o),t.kind="init";else if(this.options.ecmaVersion>=6&&this.type===y.parenL)e&&this.unexpected(),t.kind="init",t.method=!0,t.value=this.parseMethod(i,n);else if(e||a||!(this.options.ecmaVersion>=5)||t.computed||"Identifier"!==t.key.type||"get"!==t.key.name&&"set"!==t.key.name||this.type===y.comma||this.type===y.braceR||this.type===y.eq)this.options.ecmaVersion>=6&&!t.computed&&"Identifier"===t.key.type?((i||n)&&this.unexpected(),this.checkUnreserved(t.key),"await"!==t.key.name||this.awaitIdentPos||(this.awaitIdentPos=s),t.kind="init",e?t.value=this.parseMaybeDefault(s,r,this.copyNode(t.key)):this.type===y.eq&&o?(o.shorthandAssign<0&&(o.shorthandAssign=this.start),t.value=this.parseMaybeDefault(s,r,this.copyNode(t.key))):t.value=this.copyNode(t.key),t.shorthand=!0):this.unexpected();else{(i||n)&&this.unexpected(),t.kind=t.key.name,this.parsePropertyName(t),t.value=this.parseMethod(!1);var l="get"===t.kind?0:1;if(t.value.params.length!==l){var h=t.value.start;"get"===t.kind?this.raiseRecoverable(h,"getter should have no params"):this.raiseRecoverable(h,"setter should have exactly one param")}else"set"===t.kind&&"RestElement"===t.value.params[0].type&&this.raiseRecoverable(t.value.params[0].start,"Setter cannot use rest params")}},rt.parsePropertyName=function(t){if(this.options.ecmaVersion>=6){if(this.eat(y.bracketL))return t.computed=!0,t.key=this.parseMaybeAssign(),this.expect(y.bracketR),t.key;t.computed=!1}return t.key=this.type===y.num||this.type===y.string?this.parseExprAtom():this.parseIdent("never"!==this.options.allowReserved)},rt.initFunction=function(t){t.id=null,this.options.ecmaVersion>=6&&(t.generator=t.expression=!1),this.options.ecmaVersion>=8&&(t.async=!1)},rt.parseMethod=function(t,e,i){var n=this.startNode(),s=this.yieldPos,r=this.awaitPos,o=this.awaitIdentPos;return this.initFunction(n),this.options.ecmaVersion>=6&&(n.generator=t),this.options.ecmaVersion>=8&&(n.async=!!e),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(64|z(e,n.generator)|(i?128:0)),this.expect(y.parenL),n.params=this.parseBindingList(y.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams(),this.parseFunctionBody(n,!1,!0,!1),this.yieldPos=s,this.awaitPos=r,this.awaitIdentPos=o,this.finishNode(n,"FunctionExpression")},rt.parseArrowExpression=function(t,e,i,n){var s=this.yieldPos,r=this.awaitPos,o=this.awaitIdentPos;return this.enterScope(16|z(i,!1)),this.initFunction(t),this.options.ecmaVersion>=8&&(t.async=!!i),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,t.params=this.toAssignableList(e,!0),this.parseFunctionBody(t,!0,!1,n),this.yieldPos=s,this.awaitPos=r,this.awaitIdentPos=o,this.finishNode(t,"ArrowFunctionExpression")},rt.parseFunctionBody=function(t,e,i,n){var s=e&&this.type!==y.braceL,r=this.strict,o=!1;if(s)t.body=this.parseMaybeAssign(n),t.expression=!0,this.checkParams(t,!1);else{var a=this.options.ecmaVersion>=7&&!this.isSimpleParamList(t.params);r&&!a||(o=this.strictDirective(this.end))&&a&&this.raiseRecoverable(t.start,"Illegal 'use strict' directive in function with non-simple parameter list");var l=this.labels;this.labels=[],o&&(this.strict=!0),this.checkParams(t,!r&&!o&&!e&&!i&&this.isSimpleParamList(t.params)),this.strict&&t.id&&this.checkLValSimple(t.id,5),t.body=this.parseBlock(!1,void 0,o&&!r),t.expression=!1,this.adaptDirectivePrologue(t.body.body),this.labels=l}this.exitScope()},rt.isSimpleParamList=function(t){for(var e=0,i=t;e<i.length;e+=1)if("Identifier"!==i[e].type)return!1;return!0},rt.checkParams=function(t,e){for(var i=Object.create(null),n=0,s=t.params;n<s.length;n+=1){var r=s[n];this.checkLValInnerPattern(r,1,e?null:i)}},rt.parseExprList=function(t,e,i,n){for(var s=[],r=!0;!this.eat(t);){if(r)r=!1;else if(this.expect(y.comma),e&&this.afterTrailingComma(t))break;var o=void 0;i&&this.type===y.comma?o=null:this.type===y.ellipsis?(o=this.parseSpread(n),n&&this.type===y.comma&&n.trailingComma<0&&(n.trailingComma=this.start)):o=this.parseMaybeAssign(!1,n),s.push(o)}return s},rt.checkUnreserved=function(t){var e=t.start,i=t.end,n=t.name;this.inGenerator&&"yield"===n&&this.raiseRecoverable(e,"Cannot use 'yield' as identifier inside a generator"),this.inAsync&&"await"===n&&this.raiseRecoverable(e,"Cannot use 'await' as identifier inside an async function"),this.currentThisScope().inClassFieldInit&&"arguments"===n&&this.raiseRecoverable(e,"Cannot use 'arguments' in class field initializer"),!this.inClassStaticBlock||"arguments"!==n&&"await"!==n||this.raise(e,"Cannot use "+n+" in class static initialization block"),this.keywords.test(n)&&this.raise(e,"Unexpected keyword '"+n+"'"),this.options.ecmaVersion<6&&-1!==this.input.slice(e,i).indexOf("\\")||(this.strict?this.reservedWordsStrict:this.reservedWords).test(n)&&(this.inAsync||"await"!==n||this.raiseRecoverable(e,"Cannot use keyword 'await' outside an async function"),this.raiseRecoverable(e,"The keyword '"+n+"' is reserved"))},rt.parseIdent=function(t,e){var i=this.startNode();return this.type===y.name?i.name=this.value:this.type.keyword?(i.name=this.type.keyword,"class"!==i.name&&"function"!==i.name||this.lastTokEnd===this.lastTokStart+1&&46===this.input.charCodeAt(this.lastTokStart)||this.context.pop()):this.unexpected(),this.next(!!t),this.finishNode(i,"Identifier"),t||(this.checkUnreserved(i),"await"!==i.name||this.awaitIdentPos||(this.awaitIdentPos=i.start)),i},rt.parsePrivateIdent=function(){var t=this.startNode();return this.type===y.privateId?t.name=this.value:this.unexpected(),this.next(),this.finishNode(t,"PrivateIdentifier"),0===this.privateNameStack.length?this.raise(t.start,"Private field '#"+t.name+"' must be declared in an enclosing class"):this.privateNameStack[this.privateNameStack.length-1].used.push(t),t},rt.parseYield=function(t){this.yieldPos||(this.yieldPos=this.start);var e=this.startNode();return this.next(),this.type===y.semi||this.canInsertSemicolon()||this.type!==y.star&&!this.type.startsExpr?(e.delegate=!1,e.argument=null):(e.delegate=this.eat(y.star),e.argument=this.parseMaybeAssign(t)),this.finishNode(e,"YieldExpression")},rt.parseAwait=function(t){this.awaitPos||(this.awaitPos=this.start);var e=this.startNode();return this.next(),e.argument=this.parseMaybeUnary(null,!0,!1,t),this.finishNode(e,"AwaitExpression")};var lt=U.prototype;lt.raise=function(t,e){var i=R(this.input,t);e+=" ("+i.line+":"+i.column+")";var n=new SyntaxError(e);throw n.pos=t,n.loc=i,n.raisedAt=this.pos,n},lt.raiseRecoverable=lt.raise,lt.curPosition=function(){if(this.options.locations)return new N(this.curLine,this.pos-this.lineStart)};var ht=U.prototype,ut=function(t){this.flags=t,this.var=[],this.lexical=[],this.functions=[],this.inClassFieldInit=!1};ht.enterScope=function(t){this.scopeStack.push(new ut(t))},ht.exitScope=function(){this.scopeStack.pop()},ht.treatFunctionsAsVarInScope=function(t){return 2&t.flags||!this.inModule&&1&t.flags},ht.declareName=function(t,e,i){var n=!1;if(2===e){var s=this.currentScope();n=s.lexical.indexOf(t)>-1||s.functions.indexOf(t)>-1||s.var.indexOf(t)>-1,s.lexical.push(t),this.inModule&&1&s.flags&&delete this.undefinedExports[t]}else if(4===e)this.currentScope().lexical.push(t);else if(3===e){var r=this.currentScope();n=this.treatFunctionsAsVar?r.lexical.indexOf(t)>-1:r.lexical.indexOf(t)>-1||r.var.indexOf(t)>-1,r.functions.push(t)}else for(var o=this.scopeStack.length-1;o>=0;--o){var a=this.scopeStack[o];if(a.lexical.indexOf(t)>-1&&!(32&a.flags&&a.lexical[0]===t)||!this.treatFunctionsAsVarInScope(a)&&a.functions.indexOf(t)>-1){n=!0;break}if(a.var.push(t),this.inModule&&1&a.flags&&delete this.undefinedExports[t],259&a.flags)break}n&&this.raiseRecoverable(i,"Identifier '"+t+"' has already been declared")},ht.checkLocalExport=function(t){-1===this.scopeStack[0].lexical.indexOf(t.name)&&-1===this.scopeStack[0].var.indexOf(t.name)&&(this.undefinedExports[t.name]=t)},ht.currentScope=function(){return this.scopeStack[this.scopeStack.length-1]},ht.currentVarScope=function(){for(var t=this.scopeStack.length-1;;t--){var e=this.scopeStack[t];if(259&e.flags)return e}},ht.currentThisScope=function(){for(var t=this.scopeStack.length-1;;t--){var e=this.scopeStack[t];if(259&e.flags&&!(16&e.flags))return e}};var ct=function(t,e,i){this.type="",this.start=e,this.end=0,t.options.locations&&(this.loc=new O(t,i)),t.options.directSourceFile&&(this.sourceFile=t.options.directSourceFile),t.options.ranges&&(this.range=[e,0])},dt=U.prototype;function pt(t,e,i,n){return t.type=e,t.end=i,this.options.locations&&(t.loc.end=n),this.options.ranges&&(t.range[1]=i),t}dt.startNode=function(){return new ct(this,this.start,this.startLoc)},dt.startNodeAt=function(t,e){return new ct(this,t,e)},dt.finishNode=function(t,e){return pt.call(this,t,e,this.lastTokEnd,this.lastTokEndLoc)},dt.finishNodeAt=function(t,e,i,n){return pt.call(this,t,e,i,n)},dt.copyNode=function(t){var e=new ct(this,t.start,this.startLoc);for(var i in t)e[i]=t[i];return e};var ft,gt,mt="ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS",vt=mt+" Extended_Pictographic",bt=vt+" EBase EComp EMod EPres ExtPict",_t={9:mt,10:vt,11:vt,12:bt,13:bt},yt="Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu",wt="Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb",xt=wt+" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd",Ct=xt+" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho",St=Ct+" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi",Pt={9:wt,10:xt,11:Ct,12:St,13:St+" Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith"},kt={};for(var Tt=0,At=[9,10,11,12,13];Tt<At.length;Tt+=1)gt=void 0,(gt=kt[ft=At[Tt]]={binary:D(_t[ft]+" "+yt),nonBinary:{General_Category:D(yt),Script:D(Pt[ft])}}).nonBinary.Script_Extensions=gt.nonBinary.Script,gt.nonBinary.gc=gt.nonBinary.General_Category,gt.nonBinary.sc=gt.nonBinary.Script,gt.nonBinary.scx=gt.nonBinary.Script_Extensions;var It=U.prototype,Et=function(t){this.parser=t,this.validFlags="gim"+(t.options.ecmaVersion>=6?"uy":"")+(t.options.ecmaVersion>=9?"s":"")+(t.options.ecmaVersion>=13?"d":""),this.unicodeProperties=kt[t.options.ecmaVersion>=13?13:t.options.ecmaVersion],this.source="",this.flags="",this.start=0,this.switchU=!1,this.switchN=!1,this.pos=0,this.lastIntValue=0,this.lastStringValue="",this.lastAssertionIsQuantifiable=!1,this.numCapturingParens=0,this.maxBackReference=0,this.groupNames=[],this.backReferenceNames=[]};function Mt(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}function Dt(t){return 36===t||t>=40&&t<=43||46===t||63===t||t>=91&&t<=94||t>=123&&t<=125}function Lt(t){return t>=65&&t<=90||t>=97&&t<=122}function Nt(t){return Lt(t)||95===t}function Ot(t){return Nt(t)||Rt(t)}function Rt(t){return t>=48&&t<=57}function Ft(t){return t>=48&&t<=57||t>=65&&t<=70||t>=97&&t<=102}function Bt(t){return t>=65&&t<=70?t-65+10:t>=97&&t<=102?t-97+10:t-48}function Vt(t){return t>=48&&t<=55}Et.prototype.reset=function(t,e,i){var n=-1!==i.indexOf("u");this.start=0|t,this.source=e+"",this.flags=i,this.switchU=n&&this.parser.options.ecmaVersion>=6,this.switchN=n&&this.parser.options.ecmaVersion>=9},Et.prototype.raise=function(t){this.parser.raiseRecoverable(this.start,"Invalid regular expression: /"+this.source+"/: "+t)},Et.prototype.at=function(t,e){void 0===e&&(e=!1);var i=this.source,n=i.length;if(t>=n)return-1;var s=i.charCodeAt(t);if(!e&&!this.switchU||s<=55295||s>=57344||t+1>=n)return s;var r=i.charCodeAt(t+1);return r>=56320&&r<=57343?(s<<10)+r-56613888:s},Et.prototype.nextIndex=function(t,e){void 0===e&&(e=!1);var i=this.source,n=i.length;if(t>=n)return n;var s,r=i.charCodeAt(t);return!e&&!this.switchU||r<=55295||r>=57344||t+1>=n||(s=i.charCodeAt(t+1))<56320||s>57343?t+1:t+2},Et.prototype.current=function(t){return void 0===t&&(t=!1),this.at(this.pos,t)},Et.prototype.lookahead=function(t){return void 0===t&&(t=!1),this.at(this.nextIndex(this.pos,t),t)},Et.prototype.advance=function(t){void 0===t&&(t=!1),this.pos=this.nextIndex(this.pos,t)},Et.prototype.eat=function(t,e){return void 0===e&&(e=!1),this.current(e)===t&&(this.advance(e),!0)},It.validateRegExpFlags=function(t){for(var e=t.validFlags,i=t.flags,n=0;n<i.length;n++){var s=i.charAt(n);-1===e.indexOf(s)&&this.raise(t.start,"Invalid regular expression flag"),i.indexOf(s,n+1)>-1&&this.raise(t.start,"Duplicate regular expression flag")}},It.validateRegExpPattern=function(t){this.regexp_pattern(t),!t.switchN&&this.options.ecmaVersion>=9&&t.groupNames.length>0&&(t.switchN=!0,this.regexp_pattern(t))},It.regexp_pattern=function(t){t.pos=0,t.lastIntValue=0,t.lastStringValue="",t.lastAssertionIsQuantifiable=!1,t.numCapturingParens=0,t.maxBackReference=0,t.groupNames.length=0,t.backReferenceNames.length=0,this.regexp_disjunction(t),t.pos!==t.source.length&&(t.eat(41)&&t.raise("Unmatched ')'"),(t.eat(93)||t.eat(125))&&t.raise("Lone quantifier brackets")),t.maxBackReference>t.numCapturingParens&&t.raise("Invalid escape");for(var e=0,i=t.backReferenceNames;e<i.length;e+=1){var n=i[e];-1===t.groupNames.indexOf(n)&&t.raise("Invalid named capture referenced")}},It.regexp_disjunction=function(t){for(this.regexp_alternative(t);t.eat(124);)this.regexp_alternative(t);this.regexp_eatQuantifier(t,!0)&&t.raise("Nothing to repeat"),t.eat(123)&&t.raise("Lone quantifier brackets")},It.regexp_alternative=function(t){for(;t.pos<t.source.length&&this.regexp_eatTerm(t););},It.regexp_eatTerm=function(t){return this.regexp_eatAssertion(t)?(t.lastAssertionIsQuantifiable&&this.regexp_eatQuantifier(t)&&t.switchU&&t.raise("Invalid quantifier"),!0):!!(t.switchU?this.regexp_eatAtom(t):this.regexp_eatExtendedAtom(t))&&(this.regexp_eatQuantifier(t),!0)},It.regexp_eatAssertion=function(t){var e=t.pos;if(t.lastAssertionIsQuantifiable=!1,t.eat(94)||t.eat(36))return!0;if(t.eat(92)){if(t.eat(66)||t.eat(98))return!0;t.pos=e}if(t.eat(40)&&t.eat(63)){var i=!1;if(this.options.ecmaVersion>=9&&(i=t.eat(60)),t.eat(61)||t.eat(33))return this.regexp_disjunction(t),t.eat(41)||t.raise("Unterminated group"),t.lastAssertionIsQuantifiable=!i,!0}return t.pos=e,!1},It.regexp_eatQuantifier=function(t,e){return void 0===e&&(e=!1),!!this.regexp_eatQuantifierPrefix(t,e)&&(t.eat(63),!0)},It.regexp_eatQuantifierPrefix=function(t,e){return t.eat(42)||t.eat(43)||t.eat(63)||this.regexp_eatBracedQuantifier(t,e)},It.regexp_eatBracedQuantifier=function(t,e){var i=t.pos;if(t.eat(123)){var n=0,s=-1;if(this.regexp_eatDecimalDigits(t)&&(n=t.lastIntValue,t.eat(44)&&this.regexp_eatDecimalDigits(t)&&(s=t.lastIntValue),t.eat(125)))return-1!==s&&s<n&&!e&&t.raise("numbers out of order in {} quantifier"),!0;t.switchU&&!e&&t.raise("Incomplete quantifier"),t.pos=i}return!1},It.regexp_eatAtom=function(t){return this.regexp_eatPatternCharacters(t)||t.eat(46)||this.regexp_eatReverseSolidusAtomEscape(t)||this.regexp_eatCharacterClass(t)||this.regexp_eatUncapturingGroup(t)||this.regexp_eatCapturingGroup(t)},It.regexp_eatReverseSolidusAtomEscape=function(t){var e=t.pos;if(t.eat(92)){if(this.regexp_eatAtomEscape(t))return!0;t.pos=e}return!1},It.regexp_eatUncapturingGroup=function(t){var e=t.pos;if(t.eat(40)){if(t.eat(63)&&t.eat(58)){if(this.regexp_disjunction(t),t.eat(41))return!0;t.raise("Unterminated group")}t.pos=e}return!1},It.regexp_eatCapturingGroup=function(t){if(t.eat(40)){if(this.options.ecmaVersion>=9?this.regexp_groupSpecifier(t):63===t.current()&&t.raise("Invalid group"),this.regexp_disjunction(t),t.eat(41))return t.numCapturingParens+=1,!0;t.raise("Unterminated group")}return!1},It.regexp_eatExtendedAtom=function(t){return t.eat(46)||this.regexp_eatReverseSolidusAtomEscape(t)||this.regexp_eatCharacterClass(t)||this.regexp_eatUncapturingGroup(t)||this.regexp_eatCapturingGroup(t)||this.regexp_eatInvalidBracedQuantifier(t)||this.regexp_eatExtendedPatternCharacter(t)},It.regexp_eatInvalidBracedQuantifier=function(t){return this.regexp_eatBracedQuantifier(t,!0)&&t.raise("Nothing to repeat"),!1},It.regexp_eatSyntaxCharacter=function(t){var e=t.current();return!!Dt(e)&&(t.lastIntValue=e,t.advance(),!0)},It.regexp_eatPatternCharacters=function(t){for(var e=t.pos,i=0;-1!==(i=t.current())&&!Dt(i);)t.advance();return t.pos!==e},It.regexp_eatExtendedPatternCharacter=function(t){var e=t.current();return!(-1===e||36===e||e>=40&&e<=43||46===e||63===e||91===e||94===e||124===e||(t.advance(),0))},It.regexp_groupSpecifier=function(t){if(t.eat(63)){if(this.regexp_eatGroupName(t))return-1!==t.groupNames.indexOf(t.lastStringValue)&&t.raise("Duplicate capture group name"),void t.groupNames.push(t.lastStringValue);t.raise("Invalid group")}},It.regexp_eatGroupName=function(t){if(t.lastStringValue="",t.eat(60)){if(this.regexp_eatRegExpIdentifierName(t)&&t.eat(62))return!0;t.raise("Invalid capture group name")}return!1},It.regexp_eatRegExpIdentifierName=function(t){if(t.lastStringValue="",this.regexp_eatRegExpIdentifierStart(t)){for(t.lastStringValue+=Mt(t.lastIntValue);this.regexp_eatRegExpIdentifierPart(t);)t.lastStringValue+=Mt(t.lastIntValue);return!0}return!1},It.regexp_eatRegExpIdentifierStart=function(t){var e=t.pos,i=this.options.ecmaVersion>=11,n=t.current(i);return t.advance(i),92===n&&this.regexp_eatRegExpUnicodeEscapeSequence(t,i)&&(n=t.lastIntValue),function(t){return d(t,!0)||36===t||95===t}(n)?(t.lastIntValue=n,!0):(t.pos=e,!1)},It.regexp_eatRegExpIdentifierPart=function(t){var e=t.pos,i=this.options.ecmaVersion>=11,n=t.current(i);return t.advance(i),92===n&&this.regexp_eatRegExpUnicodeEscapeSequence(t,i)&&(n=t.lastIntValue),function(t){return p(t,!0)||36===t||95===t||8204===t||8205===t}(n)?(t.lastIntValue=n,!0):(t.pos=e,!1)},It.regexp_eatAtomEscape=function(t){return!!(this.regexp_eatBackReference(t)||this.regexp_eatCharacterClassEscape(t)||this.regexp_eatCharacterEscape(t)||t.switchN&&this.regexp_eatKGroupName(t))||(t.switchU&&(99===t.current()&&t.raise("Invalid unicode escape"),t.raise("Invalid escape")),!1)},It.regexp_eatBackReference=function(t){var e=t.pos;if(this.regexp_eatDecimalEscape(t)){var i=t.lastIntValue;if(t.switchU)return i>t.maxBackReference&&(t.maxBackReference=i),!0;if(i<=t.numCapturingParens)return!0;t.pos=e}return!1},It.regexp_eatKGroupName=function(t){if(t.eat(107)){if(this.regexp_eatGroupName(t))return t.backReferenceNames.push(t.lastStringValue),!0;t.raise("Invalid named reference")}return!1},It.regexp_eatCharacterEscape=function(t){return this.regexp_eatControlEscape(t)||this.regexp_eatCControlLetter(t)||this.regexp_eatZero(t)||this.regexp_eatHexEscapeSequence(t)||this.regexp_eatRegExpUnicodeEscapeSequence(t,!1)||!t.switchU&&this.regexp_eatLegacyOctalEscapeSequence(t)||this.regexp_eatIdentityEscape(t)},It.regexp_eatCControlLetter=function(t){var e=t.pos;if(t.eat(99)){if(this.regexp_eatControlLetter(t))return!0;t.pos=e}return!1},It.regexp_eatZero=function(t){return 48===t.current()&&!Rt(t.lookahead())&&(t.lastIntValue=0,t.advance(),!0)},It.regexp_eatControlEscape=function(t){var e=t.current();return 116===e?(t.lastIntValue=9,t.advance(),!0):110===e?(t.lastIntValue=10,t.advance(),!0):118===e?(t.lastIntValue=11,t.advance(),!0):102===e?(t.lastIntValue=12,t.advance(),!0):114===e&&(t.lastIntValue=13,t.advance(),!0)},It.regexp_eatControlLetter=function(t){var e=t.current();return!!Lt(e)&&(t.lastIntValue=e%32,t.advance(),!0)},It.regexp_eatRegExpUnicodeEscapeSequence=function(t,e){void 0===e&&(e=!1);var i,n=t.pos,s=e||t.switchU;if(t.eat(117)){if(this.regexp_eatFixedHexDigits(t,4)){var r=t.lastIntValue;if(s&&r>=55296&&r<=56319){var o=t.pos;if(t.eat(92)&&t.eat(117)&&this.regexp_eatFixedHexDigits(t,4)){var a=t.lastIntValue;if(a>=56320&&a<=57343)return t.lastIntValue=1024*(r-55296)+(a-56320)+65536,!0}t.pos=o,t.lastIntValue=r}return!0}if(s&&t.eat(123)&&this.regexp_eatHexDigits(t)&&t.eat(125)&&((i=t.lastIntValue)>=0&&i<=1114111))return!0;s&&t.raise("Invalid unicode escape"),t.pos=n}return!1},It.regexp_eatIdentityEscape=function(t){if(t.switchU)return!!this.regexp_eatSyntaxCharacter(t)||!!t.eat(47)&&(t.lastIntValue=47,!0);var e=t.current();return!(99===e||t.switchN&&107===e||(t.lastIntValue=e,t.advance(),0))},It.regexp_eatDecimalEscape=function(t){t.lastIntValue=0;var e=t.current();if(e>=49&&e<=57){do{t.lastIntValue=10*t.lastIntValue+(e-48),t.advance()}while((e=t.current())>=48&&e<=57);return!0}return!1},It.regexp_eatCharacterClassEscape=function(t){var e=t.current();if(function(t){return 100===t||68===t||115===t||83===t||119===t||87===t}(e))return t.lastIntValue=-1,t.advance(),!0;if(t.switchU&&this.options.ecmaVersion>=9&&(80===e||112===e)){if(t.lastIntValue=-1,t.advance(),t.eat(123)&&this.regexp_eatUnicodePropertyValueExpression(t)&&t.eat(125))return!0;t.raise("Invalid property name")}return!1},It.regexp_eatUnicodePropertyValueExpression=function(t){var e=t.pos;if(this.regexp_eatUnicodePropertyName(t)&&t.eat(61)){var i=t.lastStringValue;if(this.regexp_eatUnicodePropertyValue(t)){var n=t.lastStringValue;return this.regexp_validateUnicodePropertyNameAndValue(t,i,n),!0}}if(t.pos=e,this.regexp_eatLoneUnicodePropertyNameOrValue(t)){var s=t.lastStringValue;return this.regexp_validateUnicodePropertyNameOrValue(t,s),!0}return!1},It.regexp_validateUnicodePropertyNameAndValue=function(t,e,i){E(t.unicodeProperties.nonBinary,e)||t.raise("Invalid property name"),t.unicodeProperties.nonBinary[e].test(i)||t.raise("Invalid property value")},It.regexp_validateUnicodePropertyNameOrValue=function(t,e){t.unicodeProperties.binary.test(e)||t.raise("Invalid property name")},It.regexp_eatUnicodePropertyName=function(t){var e=0;for(t.lastStringValue="";Nt(e=t.current());)t.lastStringValue+=Mt(e),t.advance();return""!==t.lastStringValue},It.regexp_eatUnicodePropertyValue=function(t){var e=0;for(t.lastStringValue="";Ot(e=t.current());)t.lastStringValue+=Mt(e),t.advance();return""!==t.lastStringValue},It.regexp_eatLoneUnicodePropertyNameOrValue=function(t){return this.regexp_eatUnicodePropertyValue(t)},It.regexp_eatCharacterClass=function(t){if(t.eat(91)){if(t.eat(94),this.regexp_classRanges(t),t.eat(93))return!0;t.raise("Unterminated character class")}return!1},It.regexp_classRanges=function(t){for(;this.regexp_eatClassAtom(t);){var e=t.lastIntValue;if(t.eat(45)&&this.regexp_eatClassAtom(t)){var i=t.lastIntValue;!t.switchU||-1!==e&&-1!==i||t.raise("Invalid character class"),-1!==e&&-1!==i&&e>i&&t.raise("Range out of order in character class")}}},It.regexp_eatClassAtom=function(t){var e=t.pos;if(t.eat(92)){if(this.regexp_eatClassEscape(t))return!0;if(t.switchU){var i=t.current();(99===i||Vt(i))&&t.raise("Invalid class escape"),t.raise("Invalid escape")}t.pos=e}var n=t.current();return 93!==n&&(t.lastIntValue=n,t.advance(),!0)},It.regexp_eatClassEscape=function(t){var e=t.pos;if(t.eat(98))return t.lastIntValue=8,!0;if(t.switchU&&t.eat(45))return t.lastIntValue=45,!0;if(!t.switchU&&t.eat(99)){if(this.regexp_eatClassControlLetter(t))return!0;t.pos=e}return this.regexp_eatCharacterClassEscape(t)||this.regexp_eatCharacterEscape(t)},It.regexp_eatClassControlLetter=function(t){var e=t.current();return!(!Rt(e)&&95!==e||(t.lastIntValue=e%32,t.advance(),0))},It.regexp_eatHexEscapeSequence=function(t){var e=t.pos;if(t.eat(120)){if(this.regexp_eatFixedHexDigits(t,2))return!0;t.switchU&&t.raise("Invalid escape"),t.pos=e}return!1},It.regexp_eatDecimalDigits=function(t){var e=t.pos,i=0;for(t.lastIntValue=0;Rt(i=t.current());)t.lastIntValue=10*t.lastIntValue+(i-48),t.advance();return t.pos!==e},It.regexp_eatHexDigits=function(t){var e=t.pos,i=0;for(t.lastIntValue=0;Ft(i=t.current());)t.lastIntValue=16*t.lastIntValue+Bt(i),t.advance();return t.pos!==e},It.regexp_eatLegacyOctalEscapeSequence=function(t){if(this.regexp_eatOctalDigit(t)){var e=t.lastIntValue;if(this.regexp_eatOctalDigit(t)){var i=t.lastIntValue;e<=3&&this.regexp_eatOctalDigit(t)?t.lastIntValue=64*e+8*i+t.lastIntValue:t.lastIntValue=8*e+i}else t.lastIntValue=e;return!0}return!1},It.regexp_eatOctalDigit=function(t){var e=t.current();return Vt(e)?(t.lastIntValue=e-48,t.advance(),!0):(t.lastIntValue=0,!1)},It.regexp_eatFixedHexDigits=function(t,e){var i=t.pos;t.lastIntValue=0;for(var n=0;n<e;++n){var s=t.current();if(!Ft(s))return t.pos=i,!1;t.lastIntValue=16*t.lastIntValue+Bt(s),t.advance()}return!0};var jt=function(t){this.type=t.type,this.value=t.value,this.start=t.start,this.end=t.end,t.options.locations&&(this.loc=new O(t,t.startLoc,t.endLoc)),t.options.ranges&&(this.range=[t.start,t.end])},zt=U.prototype;function Ut(t){return"function"!=typeof BigInt?null:BigInt(t.replace(/_/g,""))}function qt(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}zt.next=function(t){!t&&this.type.keyword&&this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword "+this.type.keyword),this.options.onToken&&this.options.onToken(new jt(this)),this.lastTokEnd=this.end,this.lastTokStart=this.start,this.lastTokEndLoc=this.endLoc,this.lastTokStartLoc=this.startLoc,this.nextToken()},zt.getToken=function(){return this.next(),new jt(this)},"undefined"!=typeof Symbol&&(zt[Symbol.iterator]=function(){var t=this;return{next:function(){var e=t.getToken();return{done:e.type===y.eof,value:e}}}}),zt.nextToken=function(){var t=this.curContext();return t&&t.preserveSpace||this.skipSpace(),this.start=this.pos,this.options.locations&&(this.startLoc=this.curPosition()),this.pos>=this.input.length?this.finishToken(y.eof):t.override?t.override(this):void this.readToken(this.fullCharCodeAtPos())},zt.readToken=function(t){return d(t,this.options.ecmaVersion>=6)||92===t?this.readWord():this.getTokenFromCode(t)},zt.fullCharCodeAtPos=function(){var t=this.input.charCodeAt(this.pos);if(t<=55295||t>=56320)return t;var e=this.input.charCodeAt(this.pos+1);return e<=56319||e>=57344?t:(t<<10)+e-56613888},zt.skipBlockComment=function(){var t=this.options.onComment&&this.curPosition(),e=this.pos,i=this.input.indexOf("*/",this.pos+=2);if(-1===i&&this.raise(this.pos-2,"Unterminated comment"),this.pos=i+2,this.options.locations)for(var n=void 0,s=e;(n=S(this.input,s,this.pos))>-1;)++this.curLine,s=this.lineStart=n;this.options.onComment&&this.options.onComment(!0,this.input.slice(e+2,i),e,this.pos,t,this.curPosition())},zt.skipLineComment=function(t){for(var e=this.pos,i=this.options.onComment&&this.curPosition(),n=this.input.charCodeAt(this.pos+=t);this.pos<this.input.length&&!C(n);)n=this.input.charCodeAt(++this.pos);this.options.onComment&&this.options.onComment(!1,this.input.slice(e+t,this.pos),e,this.pos,i,this.curPosition())},zt.skipSpace=function(){t:for(;this.pos<this.input.length;){var t=this.input.charCodeAt(this.pos);switch(t){case 32:case 160:++this.pos;break;case 13:10===this.input.charCodeAt(this.pos+1)&&++this.pos;case 10:case 8232:case 8233:++this.pos,this.options.locations&&(++this.curLine,this.lineStart=this.pos);break;case 47:switch(this.input.charCodeAt(this.pos+1)){case 42:this.skipBlockComment();break;case 47:this.skipLineComment(2);break;default:break t}break;default:if(!(t>8&&t<14||t>=5760&&P.test(String.fromCharCode(t))))break t;++this.pos}}},zt.finishToken=function(t,e){this.end=this.pos,this.options.locations&&(this.endLoc=this.curPosition());var i=this.type;this.type=t,this.value=e,this.updateContext(i)},zt.readToken_dot=function(){var t=this.input.charCodeAt(this.pos+1);if(t>=48&&t<=57)return this.readNumber(!0);var e=this.input.charCodeAt(this.pos+2);return this.options.ecmaVersion>=6&&46===t&&46===e?(this.pos+=3,this.finishToken(y.ellipsis)):(++this.pos,this.finishToken(y.dot))},zt.readToken_slash=function(){var t=this.input.charCodeAt(this.pos+1);return this.exprAllowed?(++this.pos,this.readRegexp()):61===t?this.finishOp(y.assign,2):this.finishOp(y.slash,1)},zt.readToken_mult_modulo_exp=function(t){var e=this.input.charCodeAt(this.pos+1),i=1,n=42===t?y.star:y.modulo;return this.options.ecmaVersion>=7&&42===t&&42===e&&(++i,n=y.starstar,e=this.input.charCodeAt(this.pos+2)),61===e?this.finishOp(y.assign,i+1):this.finishOp(n,i)},zt.readToken_pipe_amp=function(t){var e=this.input.charCodeAt(this.pos+1);return e===t?this.options.ecmaVersion>=12&&61===this.input.charCodeAt(this.pos+2)?this.finishOp(y.assign,3):this.finishOp(124===t?y.logicalOR:y.logicalAND,2):61===e?this.finishOp(y.assign,2):this.finishOp(124===t?y.bitwiseOR:y.bitwiseAND,1)},zt.readToken_caret=function(){return 61===this.input.charCodeAt(this.pos+1)?this.finishOp(y.assign,2):this.finishOp(y.bitwiseXOR,1)},zt.readToken_plus_min=function(t){var e=this.input.charCodeAt(this.pos+1);return e===t?45!==e||this.inModule||62!==this.input.charCodeAt(this.pos+2)||0!==this.lastTokEnd&&!w.test(this.input.slice(this.lastTokEnd,this.pos))?this.finishOp(y.incDec,2):(this.skipLineComment(3),this.skipSpace(),this.nextToken()):61===e?this.finishOp(y.assign,2):this.finishOp(y.plusMin,1)},zt.readToken_lt_gt=function(t){var e=this.input.charCodeAt(this.pos+1),i=1;return e===t?(i=62===t&&62===this.input.charCodeAt(this.pos+2)?3:2,61===this.input.charCodeAt(this.pos+i)?this.finishOp(y.assign,i+1):this.finishOp(y.bitShift,i)):33!==e||60!==t||this.inModule||45!==this.input.charCodeAt(this.pos+2)||45!==this.input.charCodeAt(this.pos+3)?(61===e&&(i=2),this.finishOp(y.relational,i)):(this.skipLineComment(4),this.skipSpace(),this.nextToken())},zt.readToken_eq_excl=function(t){var e=this.input.charCodeAt(this.pos+1);return 61===e?this.finishOp(y.equality,61===this.input.charCodeAt(this.pos+2)?3:2):61===t&&62===e&&this.options.ecmaVersion>=6?(this.pos+=2,this.finishToken(y.arrow)):this.finishOp(61===t?y.eq:y.prefix,1)},zt.readToken_question=function(){var t=this.options.ecmaVersion;if(t>=11){var e=this.input.charCodeAt(this.pos+1);if(46===e){var i=this.input.charCodeAt(this.pos+2);if(i<48||i>57)return this.finishOp(y.questionDot,2)}if(63===e)return t>=12&&61===this.input.charCodeAt(this.pos+2)?this.finishOp(y.assign,3):this.finishOp(y.coalesce,2)}return this.finishOp(y.question,1)},zt.readToken_numberSign=function(){var t=35;if(this.options.ecmaVersion>=13&&(++this.pos,d(t=this.fullCharCodeAtPos(),!0)||92===t))return this.finishToken(y.privateId,this.readWord1());this.raise(this.pos,"Unexpected character '"+qt(t)+"'")},zt.getTokenFromCode=function(t){switch(t){case 46:return this.readToken_dot();case 40:return++this.pos,this.finishToken(y.parenL);case 41:return++this.pos,this.finishToken(y.parenR);case 59:return++this.pos,this.finishToken(y.semi);case 44:return++this.pos,this.finishToken(y.comma);case 91:return++this.pos,this.finishToken(y.bracketL);case 93:return++this.pos,this.finishToken(y.bracketR);case 123:return++this.pos,this.finishToken(y.braceL);case 125:return++this.pos,this.finishToken(y.braceR);case 58:return++this.pos,this.finishToken(y.colon);case 96:if(this.options.ecmaVersion<6)break;return++this.pos,this.finishToken(y.backQuote);case 48:var e=this.input.charCodeAt(this.pos+1);if(120===e||88===e)return this.readRadixNumber(16);if(this.options.ecmaVersion>=6){if(111===e||79===e)return this.readRadixNumber(8);if(98===e||66===e)return this.readRadixNumber(2)}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return this.readNumber(!1);case 34:case 39:return this.readString(t);case 47:return this.readToken_slash();case 37:case 42:return this.readToken_mult_modulo_exp(t);case 124:case 38:return this.readToken_pipe_amp(t);case 94:return this.readToken_caret();case 43:case 45:return this.readToken_plus_min(t);case 60:case 62:return this.readToken_lt_gt(t);case 61:case 33:return this.readToken_eq_excl(t);case 63:return this.readToken_question();case 126:return this.finishOp(y.prefix,1);case 35:return this.readToken_numberSign()}this.raise(this.pos,"Unexpected character '"+qt(t)+"'")},zt.finishOp=function(t,e){var i=this.input.slice(this.pos,this.pos+e);return this.pos+=e,this.finishToken(t,i)},zt.readRegexp=function(){for(var t,e,i=this.pos;;){this.pos>=this.input.length&&this.raise(i,"Unterminated regular expression");var n=this.input.charAt(this.pos);if(w.test(n)&&this.raise(i,"Unterminated regular expression"),t)t=!1;else{if("["===n)e=!0;else if("]"===n&&e)e=!1;else if("/"===n&&!e)break;t="\\"===n}++this.pos}var s=this.input.slice(i,this.pos);++this.pos;var r=this.pos,o=this.readWord1();this.containsEsc&&this.unexpected(r);var a=this.regexpState||(this.regexpState=new Et(this));a.reset(i,s,o),this.validateRegExpFlags(a),this.validateRegExpPattern(a);var l=null;try{l=new RegExp(s,o)}catch(t){}return this.finishToken(y.regexp,{pattern:s,flags:o,value:l})},zt.readInt=function(t,e,i){for(var n=this.options.ecmaVersion>=12&&void 0===e,s=i&&48===this.input.charCodeAt(this.pos),r=this.pos,o=0,a=0,l=0,h=null==e?1/0:e;l<h;++l,++this.pos){var u=this.input.charCodeAt(this.pos),c=void 0;if(n&&95===u)s&&this.raiseRecoverable(this.pos,"Numeric separator is not allowed in legacy octal numeric literals"),95===a&&this.raiseRecoverable(this.pos,"Numeric separator must be exactly one underscore"),0===l&&this.raiseRecoverable(this.pos,"Numeric separator is not allowed at the first of digits"),a=u;else{if((c=u>=97?u-97+10:u>=65?u-65+10:u>=48&&u<=57?u-48:1/0)>=t)break;a=u,o=o*t+c}}return n&&95===a&&this.raiseRecoverable(this.pos-1,"Numeric separator is not allowed at the last of digits"),this.pos===r||null!=e&&this.pos-r!==e?null:o},zt.readRadixNumber=function(t){var e=this.pos;this.pos+=2;var i=this.readInt(t);return null==i&&this.raise(this.start+2,"Expected number in radix "+t),this.options.ecmaVersion>=11&&110===this.input.charCodeAt(this.pos)?(i=Ut(this.input.slice(e,this.pos)),++this.pos):d(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(y.num,i)},zt.readNumber=function(t){var e=this.pos;t||null!==this.readInt(10,void 0,!0)||this.raise(e,"Invalid number");var i=this.pos-e>=2&&48===this.input.charCodeAt(e);i&&this.strict&&this.raise(e,"Invalid number");var n=this.input.charCodeAt(this.pos);if(!i&&!t&&this.options.ecmaVersion>=11&&110===n){var s=Ut(this.input.slice(e,this.pos));return++this.pos,d(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(y.num,s)}i&&/[89]/.test(this.input.slice(e,this.pos))&&(i=!1),46!==n||i||(++this.pos,this.readInt(10),n=this.input.charCodeAt(this.pos)),69!==n&&101!==n||i||(43!==(n=this.input.charCodeAt(++this.pos))&&45!==n||++this.pos,null===this.readInt(10)&&this.raise(e,"Invalid number")),d(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number");var r,o=(r=this.input.slice(e,this.pos),i?parseInt(r,8):parseFloat(r.replace(/_/g,"")));return this.finishToken(y.num,o)},zt.readCodePoint=function(){var t;if(123===this.input.charCodeAt(this.pos)){this.options.ecmaVersion<6&&this.unexpected();var e=++this.pos;t=this.readHexChar(this.input.indexOf("}",this.pos)-this.pos),++this.pos,t>1114111&&this.invalidStringToken(e,"Code point out of bounds")}else t=this.readHexChar(4);return t},zt.readString=function(t){for(var e="",i=++this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated string constant");var n=this.input.charCodeAt(this.pos);if(n===t)break;92===n?(e+=this.input.slice(i,this.pos),e+=this.readEscapedChar(!1),i=this.pos):8232===n||8233===n?(this.options.ecmaVersion<10&&this.raise(this.start,"Unterminated string constant"),++this.pos,this.options.locations&&(this.curLine++,this.lineStart=this.pos)):(C(n)&&this.raise(this.start,"Unterminated string constant"),++this.pos)}return e+=this.input.slice(i,this.pos++),this.finishToken(y.string,e)};var Ht={};zt.tryReadTemplateToken=function(){this.inTemplateElement=!0;try{this.readTmplToken()}catch(t){if(t!==Ht)throw t;this.readInvalidTemplateToken()}this.inTemplateElement=!1},zt.invalidStringToken=function(t,e){if(this.inTemplateElement&&this.options.ecmaVersion>=9)throw Ht;this.raise(t,e)},zt.readTmplToken=function(){for(var t="",e=this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated template");var i=this.input.charCodeAt(this.pos);if(96===i||36===i&&123===this.input.charCodeAt(this.pos+1))return this.pos!==this.start||this.type!==y.template&&this.type!==y.invalidTemplate?(t+=this.input.slice(e,this.pos),this.finishToken(y.template,t)):36===i?(this.pos+=2,this.finishToken(y.dollarBraceL)):(++this.pos,this.finishToken(y.backQuote));if(92===i)t+=this.input.slice(e,this.pos),t+=this.readEscapedChar(!0),e=this.pos;else if(C(i)){switch(t+=this.input.slice(e,this.pos),++this.pos,i){case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:t+="\n";break;default:t+=String.fromCharCode(i)}this.options.locations&&(++this.curLine,this.lineStart=this.pos),e=this.pos}else++this.pos}},zt.readInvalidTemplateToken=function(){for(;this.pos<this.input.length;this.pos++)switch(this.input[this.pos]){case"\\":++this.pos;break;case"$":if("{"!==this.input[this.pos+1])break;case"`":return this.finishToken(y.invalidTemplate,this.input.slice(this.start,this.pos))}this.raise(this.start,"Unterminated template")},zt.readEscapedChar=function(t){var e=this.input.charCodeAt(++this.pos);switch(++this.pos,e){case 110:return"\n";case 114:return"\r";case 120:return String.fromCharCode(this.readHexChar(2));case 117:return qt(this.readCodePoint());case 116:return"\t";case 98:return"\b";case 118:return"\v";case 102:return"\f";case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:return this.options.locations&&(this.lineStart=this.pos,++this.curLine),"";case 56:case 57:if(this.strict&&this.invalidStringToken(this.pos-1,"Invalid escape sequence"),t){var i=this.pos-1;return this.invalidStringToken(i,"Invalid escape sequence in template string"),null}default:if(e>=48&&e<=55){var n=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0],s=parseInt(n,8);return s>255&&(n=n.slice(0,-1),s=parseInt(n,8)),this.pos+=n.length-1,e=this.input.charCodeAt(this.pos),"0"===n&&56!==e&&57!==e||!this.strict&&!t||this.invalidStringToken(this.pos-1-n.length,t?"Octal literal in template string":"Octal literal in strict mode"),String.fromCharCode(s)}return C(e)?"":String.fromCharCode(e)}},zt.readHexChar=function(t){var e=this.pos,i=this.readInt(16,t);return null===i&&this.invalidStringToken(e,"Bad character escape sequence"),i},zt.readWord1=function(){this.containsEsc=!1;for(var t="",e=!0,i=this.pos,n=this.options.ecmaVersion>=6;this.pos<this.input.length;){var s=this.fullCharCodeAtPos();if(p(s,n))this.pos+=s<=65535?1:2;else{if(92!==s)break;this.containsEsc=!0,t+=this.input.slice(i,this.pos);var r=this.pos;117!==this.input.charCodeAt(++this.pos)&&this.invalidStringToken(this.pos,"Expecting Unicode escape sequence \\uXXXX"),++this.pos;var o=this.readCodePoint();(e?d:p)(o,n)||this.invalidStringToken(r,"Invalid Unicode escape"),t+=qt(o),i=this.pos}e=!1}return t+this.input.slice(i,this.pos)},zt.readWord=function(){var t=this.readWord1(),e=y.name;return this.keywords.test(t)&&(e=b[t]),this.finishToken(e,t)};var Gt="8.7.0";U.acorn={Parser:U,version:Gt,defaultOptions:F,Position:N,SourceLocation:O,getLineInfo:R,Node:ct,TokenType:f,tokTypes:y,keywordTypes:b,TokContext:it,tokContexts:nt,isIdentifierChar:p,isIdentifierStart:d,Token:jt,isNewLine:C,lineBreak:w,lineBreakG:x,nonASCIIwhitespace:P},t.Node=ct,t.Parser=U,t.Position=N,t.SourceLocation=O,t.TokContext=it,t.Token=jt,t.TokenType=f,t.defaultOptions=F,t.getLineInfo=R,t.isIdentifierChar=p,t.isIdentifierStart=d,t.isNewLine=C,t.keywordTypes=b,t.lineBreak=w,t.lineBreakG=x,t.nonASCIIwhitespace=P,t.parse=function(t,e){return U.parse(t,e)},t.parseExpressionAt=function(t,e,i){return U.parseExpressionAt(t,e,i)},t.tokContexts=nt,t.tokTypes=y,t.tokenizer=function(t,e){return U.tokenizer(t,e)},t.version=Gt,Object.defineProperty(t,"__esModule",{value:!0})}(e)},634:(t,e,i)=>{"use strict";i.d(e,{Z:()=>a});var n=i(15),s=i.n(n),r=i(645),o=i.n(r)()(s());o.push([t.id,'/*!\n * \n *   simple-keyboard v2.32.68\n *   https://github.com/hodgef/simple-keyboard\n * \n *   Copyright (c) Francisco Hodge (https://github.com/hodgef)\n * \n *   This source code is licensed under the MIT license found in the\n *   LICENSE file in the root directory of this source tree.\n *   \n */.hg-theme-default{width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;box-sizing:border-box;overflow:hidden;touch-action:manipulation}.hg-theme-default .hg-button span{pointer-events:none}.hg-theme-default button.hg-button{border-width:0;outline:0;font-size:inherit}.hg-theme-default{font-family:"HelveticaNeue-Light","Helvetica Neue Light","Helvetica Neue",Helvetica,Arial,"Lucida Grande",sans-serif;background-color:#ececec;padding:5px;border-radius:5px}.hg-theme-default .hg-button{display:inline-block;flex-grow:1}.hg-theme-default .hg-row{display:flex}.hg-theme-default .hg-row:not(:last-child){margin-bottom:5px}.hg-theme-default .hg-row .hg-button-container,.hg-theme-default .hg-row .hg-button:not(:last-child){margin-right:5px}.hg-theme-default .hg-row>div:last-child{margin-right:0}.hg-theme-default .hg-row .hg-button-container{display:flex}.hg-theme-default .hg-button{box-shadow:0 0 3px -1px rgba(0,0,0,.3);height:40px;border-radius:5px;box-sizing:border-box;padding:5px;background:#fff;border-bottom:1px solid #b5b5b5;cursor:pointer;display:flex;align-items:center;justify-content:center;-webkit-tap-highlight-color:rgba(0,0,0,0)}.hg-theme-default .hg-button.hg-activeButton{background:#efefef}.hg-theme-default.hg-layout-numeric .hg-button{width:33.3%;height:60px;align-items:center;display:flex;justify-content:center}.hg-theme-default .hg-button.hg-button-numpadadd,.hg-theme-default .hg-button.hg-button-numpadenter{height:85px}.hg-theme-default .hg-button.hg-button-numpad0{width:105px}.hg-theme-default .hg-button.hg-button-com{max-width:85px}.hg-theme-default .hg-button.hg-standardBtn.hg-button-at{max-width:45px}.hg-theme-default .hg-button.hg-selectedButton{background:rgba(5,25,70,.53);color:#fff}.hg-theme-default .hg-button.hg-standardBtn[data-skbtn=".com"]{max-width:82px}.hg-theme-default .hg-button.hg-standardBtn[data-skbtn="@"]{max-width:60px}\n/*# sourceMappingURL=index.css.map */',"",{version:3,sources:["webpack://./node_modules/simple-keyboard/build/css/index.css","webpack://./src/lib/components/Keyboard.css"],names:[],mappings:"AAAA;;;;;;;;;;EAUE,CCNF,kBACE,UAAW,CACX,wBAAiB,CAAjB,qBAAiB,CAAjB,oBAAiB,CAAjB,gBAAiB,CACjB,qBAAsB,CACtB,eAAgB,CAChB,yBACF,CAEA,kCACE,mBACF,CAGA,mCACE,cAAe,CACf,SAAU,CACV,iBACF,CAEA,kBACE,oHAC+C,CAC/C,wBAAyB,CACzB,WAAY,CACZ,iBACF,CAEA,6BACE,oBAAqB,CACrB,WAEF,CAEA,0BACE,YACF,CAEA,2CACE,iBACF,CAMA,qGACE,gBACF,CAEA,yCACE,cACF,CAEA,+CACE,YACF,CAEA,6BACE,sCAA+C,CAC/C,WAAY,CACZ,iBAAkB,CAClB,qBAAsB,CACtB,WAAY,CACZ,eAAiB,CACjB,+BAAgC,CAChC,cAAe,CACf,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,yCACF,CAEA,6CACE,kBACF,CAEA,+CACE,WAAY,CACZ,WAAY,CACZ,kBAAmB,CACnB,YAAa,CACb,sBACF,CAMA,oGACE,WACF,CAEA,+CACE,WACF,CAEA,2CACE,cACF,CAEA,yDACE,cACF,CAEA,+CACE,4BAAiC,CACjC,UACF,CAEA,+DACE,cACF,CAEA,4DACE,cACF;AD5GA,oCAAoC",sourcesContent:['/*!\n * \n *   simple-keyboard v2.32.68\n *   https://github.com/hodgef/simple-keyboard\n * \n *   Copyright (c) Francisco Hodge (https://github.com/hodgef)\n * \n *   This source code is licensed under the MIT license found in the\n *   LICENSE file in the root directory of this source tree.\n *   \n */\n/**\n * simple-keyboard\n * Theme: hg-theme-default\n */\n.hg-theme-default {\n  width: 100%;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  box-sizing: border-box;\n  overflow: hidden;\n  touch-action: manipulation;\n}\n\n.hg-theme-default .hg-button span {\n  pointer-events: none;\n}\n\n/* When using option "useButtonTag" */\n.hg-theme-default button.hg-button {\n  border-width: 0;\n  outline: 0;\n  font-size: inherit;\n}\n\n.hg-theme-default {\n  font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue",\n    Helvetica, Arial, "Lucida Grande", sans-serif;\n  background-color: #ececec;\n  padding: 5px;\n  border-radius: 5px;\n}\n\n.hg-theme-default .hg-button {\n  display: inline-block;\n  flex-grow: 1;\n  cursor: pointer;\n}\n\n.hg-theme-default .hg-row {\n  display: flex;\n}\n\n.hg-theme-default .hg-row:not(:last-child) {\n  margin-bottom: 5px;\n}\n\n.hg-theme-default .hg-row .hg-button:not(:last-child) {\n  margin-right: 5px;\n}\n\n.hg-theme-default .hg-row .hg-button-container {\n  margin-right: 5px;\n}\n\n.hg-theme-default .hg-row > div:last-child {\n  margin-right: 0;\n}\n\n.hg-theme-default .hg-row .hg-button-container {\n  display: flex;\n}\n\n.hg-theme-default .hg-button {\n  box-shadow: 0px 0px 3px -1px rgba(0, 0, 0, 0.3);\n  height: 40px;\n  border-radius: 5px;\n  box-sizing: border-box;\n  padding: 5px;\n  background: white;\n  border-bottom: 1px solid #b5b5b5;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n.hg-theme-default .hg-button.hg-activeButton {\n  background: #efefef;\n}\n\n.hg-theme-default.hg-layout-numeric .hg-button {\n  width: 33.3%;\n  height: 60px;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.hg-theme-default .hg-button.hg-button-numpadadd {\n  height: 85px;\n}\n\n.hg-theme-default .hg-button.hg-button-numpadenter {\n  height: 85px;\n}\n\n.hg-theme-default .hg-button.hg-button-numpad0 {\n  width: 105px;\n}\n\n.hg-theme-default .hg-button.hg-button-com {\n  max-width: 85px;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn.hg-button-at {\n  max-width: 45px;\n}\n\n.hg-theme-default .hg-button.hg-selectedButton {\n  background: rgba(5, 25, 70, 0.53);\n  color: white;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn[data-skbtn=".com"] {\n  max-width: 82px;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn[data-skbtn="@"] {\n  max-width: 60px;\n}\n\n','/**\n * simple-keyboard\n * Theme: hg-theme-default\n */\n.hg-theme-default {\n  width: 100%;\n  user-select: none;\n  box-sizing: border-box;\n  overflow: hidden;\n  touch-action: manipulation;\n}\n\n.hg-theme-default .hg-button span {\n  pointer-events: none;\n}\n\n/* When using option "useButtonTag" */\n.hg-theme-default button.hg-button {\n  border-width: 0;\n  outline: 0;\n  font-size: inherit;\n}\n\n.hg-theme-default {\n  font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue",\n    Helvetica, Arial, "Lucida Grande", sans-serif;\n  background-color: #ececec;\n  padding: 5px;\n  border-radius: 5px;\n}\n\n.hg-theme-default .hg-button {\n  display: inline-block;\n  flex-grow: 1;\n  cursor: pointer;\n}\n\n.hg-theme-default .hg-row {\n  display: flex;\n}\n\n.hg-theme-default .hg-row:not(:last-child) {\n  margin-bottom: 5px;\n}\n\n.hg-theme-default .hg-row .hg-button:not(:last-child) {\n  margin-right: 5px;\n}\n\n.hg-theme-default .hg-row .hg-button-container {\n  margin-right: 5px;\n}\n\n.hg-theme-default .hg-row > div:last-child {\n  margin-right: 0;\n}\n\n.hg-theme-default .hg-row .hg-button-container {\n  display: flex;\n}\n\n.hg-theme-default .hg-button {\n  box-shadow: 0px 0px 3px -1px rgba(0, 0, 0, 0.3);\n  height: 40px;\n  border-radius: 5px;\n  box-sizing: border-box;\n  padding: 5px;\n  background: white;\n  border-bottom: 1px solid #b5b5b5;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n.hg-theme-default .hg-button.hg-activeButton {\n  background: #efefef;\n}\n\n.hg-theme-default.hg-layout-numeric .hg-button {\n  width: 33.3%;\n  height: 60px;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.hg-theme-default .hg-button.hg-button-numpadadd {\n  height: 85px;\n}\n\n.hg-theme-default .hg-button.hg-button-numpadenter {\n  height: 85px;\n}\n\n.hg-theme-default .hg-button.hg-button-numpad0 {\n  width: 105px;\n}\n\n.hg-theme-default .hg-button.hg-button-com {\n  max-width: 85px;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn.hg-button-at {\n  max-width: 45px;\n}\n\n.hg-theme-default .hg-button.hg-selectedButton {\n  background: rgba(5, 25, 70, 0.53);\n  color: white;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn[data-skbtn=".com"] {\n  max-width: 82px;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn[data-skbtn="@"] {\n  max-width: 60px;\n}\n'],sourceRoot:""}]);const a=o},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=t(e);return e[2]?"@media ".concat(e[2]," {").concat(i,"}"):i})).join("")},e.i=function(t,i,n){"string"==typeof t&&(t=[[null,t,""]]);var s={};if(n)for(var r=0;r<this.length;r++){var o=this[r][0];null!=o&&(s[o]=!0)}for(var a=0;a<t.length;a++){var l=[].concat(t[a]);n&&s[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),e.push(l))}},e}},15:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}t.exports=function(t){var i,n,s=(n=4,function(t){if(Array.isArray(t))return t}(i=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var i=[],n=!0,s=!1,r=void 0;try{for(var o,a=t[Symbol.iterator]();!(n=(o=a.next()).done)&&(i.push(o.value),!e||i.length!==e);n=!0);}catch(t){s=!0,r=t}finally{try{n||null==a.return||a.return()}finally{if(s)throw r}}return i}}(i,n)||function(t,i){if(t){if("string"==typeof t)return e(t,i);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,i):void 0}}(i,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=s[1],o=s[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(l," */"),u=o.sources.map((function(t){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(t," */")}));return[r].concat(u).concat([h]).join("\n")}return[r].join("\n")}},755:function(t,e){var i;!function(e,i){"use strict";"object"==typeof t.exports?t.exports=e.document?i(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return i(t)}:i(e)}("undefined"!=typeof window?window:this,(function(n,s){"use strict";var r=[],o=Object.getPrototypeOf,a=r.slice,l=r.flat?function(t){return r.flat.call(t)}:function(t){return r.concat.apply([],t)},h=r.push,u=r.indexOf,c={},d=c.toString,p=c.hasOwnProperty,f=p.toString,g=f.call(Object),m={},v=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},b=function(t){return null!=t&&t===t.window},_=n.document,y={type:!0,src:!0,nonce:!0,noModule:!0};function w(t,e,i){var n,s,r=(i=i||_).createElement("script");if(r.text=t,e)for(n in y)(s=e[n]||e.getAttribute&&e.getAttribute(n))&&r.setAttribute(n,s);i.head.appendChild(r).parentNode.removeChild(r)}function x(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?c[d.call(t)]||"object":typeof t}var C="3.5.1",S=function(t,e){return new S.fn.init(t,e)};function P(t){var e=!!t&&"length"in t&&t.length,i=x(t);return!v(t)&&!b(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}S.fn=S.prototype={jquery:C,constructor:S,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=S.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return S.each(this,t)},map:function(t){return this.pushStack(S.map(this,(function(e,i){return t.call(e,i,e)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(S.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:h,sort:r.sort,splice:r.splice},S.extend=S.fn.extend=function(){var t,e,i,n,s,r,o=arguments[0]||{},a=1,l=arguments.length,h=!1;for("boolean"==typeof o&&(h=o,o=arguments[a]||{},a++),"object"==typeof o||v(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=t[e],"__proto__"!==e&&o!==n&&(h&&n&&(S.isPlainObject(n)||(s=Array.isArray(n)))?(i=o[e],r=s&&!Array.isArray(i)?[]:s||S.isPlainObject(i)?i:{},s=!1,o[e]=S.extend(h,r,n)):void 0!==n&&(o[e]=n));return o},S.extend({expando:"jQuery"+(C+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==d.call(t)||(e=o(t))&&("function"!=typeof(i=p.call(e,"constructor")&&e.constructor)||f.call(i)!==g))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,i){w(t,{nonce:e&&e.nonce},i)},each:function(t,e){var i,n=0;if(P(t))for(i=t.length;n<i&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},makeArray:function(t,e){var i=e||[];return null!=t&&(P(Object(t))?S.merge(i,"string"==typeof t?[t]:t):h.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:u.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,s=t.length;n<i;n++)t[s++]=e[n];return t.length=s,t},grep:function(t,e,i){for(var n=[],s=0,r=t.length,o=!i;s<r;s++)!e(t[s],s)!==o&&n.push(t[s]);return n},map:function(t,e,i){var n,s,r=0,o=[];if(P(t))for(n=t.length;r<n;r++)null!=(s=e(t[r],r,i))&&o.push(s);else for(r in t)null!=(s=e(t[r],r,i))&&o.push(s);return l(o)},guid:1,support:m}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=r[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){c["[object "+e+"]"]=e.toLowerCase()}));var k=function(t){var e,i,n,s,r,o,a,l,h,u,c,d,p,f,g,m,v,b,_,y="sizzle"+1*new Date,w=t.document,x=0,C=0,S=lt(),P=lt(),k=lt(),T=lt(),A=function(t,e){return t===e&&(c=!0),0},I={}.hasOwnProperty,E=[],M=E.pop,D=E.push,L=E.push,N=E.slice,O=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",B="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",V="\\[[\\x20\\t\\r\\n\\f]*("+B+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+F+"*\\]",j=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+V+")*)|.*)\\)|)",z=new RegExp(F+"+","g"),U=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),q=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),H=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),G=new RegExp(F+"|>"),W=new RegExp(j),K=new RegExp("^"+B+"$"),Q={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+V),PSEUDO:new RegExp("^"+j),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},X=/HTML$/i,Y=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,$=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),it=function(t,e){var i="0x"+t.slice(1)-65536;return e||(i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320))},nt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,st=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=function(){d()},ot=yt((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{L.apply(E=N.call(w.childNodes),w.childNodes),E[w.childNodes.length].nodeType}catch(t){L={apply:E.length?function(t,e){D.apply(t,N.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}function at(t,e,n,s){var r,a,h,u,c,f,v,b=e&&e.ownerDocument,w=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==w&&9!==w&&11!==w)return n;if(!s&&(d(e),e=e||p,g)){if(11!==w&&(c=$.exec(t)))if(r=c[1]){if(9===w){if(!(h=e.getElementById(r)))return n;if(h.id===r)return n.push(h),n}else if(b&&(h=b.getElementById(r))&&_(e,h)&&h.id===r)return n.push(h),n}else{if(c[2])return L.apply(n,e.getElementsByTagName(t)),n;if((r=c[3])&&i.getElementsByClassName&&e.getElementsByClassName)return L.apply(n,e.getElementsByClassName(r)),n}if(i.qsa&&!T[t+" "]&&(!m||!m.test(t))&&(1!==w||"object"!==e.nodeName.toLowerCase())){if(v=t,b=e,1===w&&(G.test(t)||H.test(t))){for((b=tt.test(t)&&vt(e.parentNode)||e)===e&&i.scope||((u=e.getAttribute("id"))?u=u.replace(nt,st):e.setAttribute("id",u=y)),a=(f=o(t)).length;a--;)f[a]=(u?"#"+u:":scope")+" "+_t(f[a]);v=f.join(",")}try{return L.apply(n,b.querySelectorAll(v)),n}catch(e){T(t,!0)}finally{u===y&&e.removeAttribute("id")}}}return l(t.replace(U,"$1"),e,n,s)}function lt(){var t=[];return function e(i,s){return t.push(i+" ")>n.cacheLength&&delete e[t.shift()],e[i+" "]=s}}function ht(t){return t[y]=!0,t}function ut(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ct(t,e){for(var i=t.split("|"),s=i.length;s--;)n.attrHandle[i[s]]=e}function dt(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function pt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ft(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function gt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ot(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function mt(t){return ht((function(e){return e=+e,ht((function(i,n){for(var s,r=t([],i.length,e),o=r.length;o--;)i[s=r[o]]&&(i[s]=!(n[s]=i[s]))}))}))}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in i=at.support={},r=at.isXML=function(t){var e=t.namespaceURI,i=(t.ownerDocument||t).documentElement;return!X.test(e||i&&i.nodeName||"HTML")},d=at.setDocument=function(t){var e,s,o=t?t.ownerDocument||t:w;return o!=p&&9===o.nodeType&&o.documentElement?(f=(p=o).documentElement,g=!r(p),w!=p&&(s=p.defaultView)&&s.top!==s&&(s.addEventListener?s.addEventListener("unload",rt,!1):s.attachEvent&&s.attachEvent("onunload",rt)),i.scope=ut((function(t){return f.appendChild(t).appendChild(p.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length})),i.attributes=ut((function(t){return t.className="i",!t.getAttribute("className")})),i.getElementsByTagName=ut((function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length})),i.getElementsByClassName=Z.test(p.getElementsByClassName),i.getById=ut((function(t){return f.appendChild(t).id=y,!p.getElementsByName||!p.getElementsByName(y).length})),i.getById?(n.filter.ID=function(t){var e=t.replace(et,it);return function(t){return t.getAttribute("id")===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var i=e.getElementById(t);return i?[i]:[]}}):(n.filter.ID=function(t){var e=t.replace(et,it);return function(t){var i=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var i,n,s,r=e.getElementById(t);if(r){if((i=r.getAttributeNode("id"))&&i.value===t)return[r];for(s=e.getElementsByName(t),n=0;r=s[n++];)if((i=r.getAttributeNode("id"))&&i.value===t)return[r]}return[]}}),n.find.TAG=i.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):i.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],s=0,r=e.getElementsByTagName(t);if("*"===t){for(;i=r[s++];)1===i.nodeType&&n.push(i);return n}return r},n.find.CLASS=i.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},v=[],m=[],(i.qsa=Z.test(p.querySelectorAll))&&(ut((function(t){var e;f.appendChild(t).innerHTML="<a id='"+y+"'></a><select id='"+y+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+R+")"),t.querySelectorAll("[id~="+y+"-]").length||m.push("~="),(e=p.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||m.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+y+"+*").length||m.push(".#.+[+~]"),t.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),ut((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")}))),(i.matchesSelector=Z.test(b=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ut((function(t){i.disconnectedMatch=b.call(t,"*"),b.call(t,"[s!='']:x"),v.push("!=",j)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),e=Z.test(f.compareDocumentPosition),_=e||Z.test(f.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},A=e?function(t,e){if(t===e)return c=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!i.sortDetached&&e.compareDocumentPosition(t)===n?t==p||t.ownerDocument==w&&_(w,t)?-1:e==p||e.ownerDocument==w&&_(w,e)?1:u?O(u,t)-O(u,e):0:4&n?-1:1)}:function(t,e){if(t===e)return c=!0,0;var i,n=0,s=t.parentNode,r=e.parentNode,o=[t],a=[e];if(!s||!r)return t==p?-1:e==p?1:s?-1:r?1:u?O(u,t)-O(u,e):0;if(s===r)return dt(t,e);for(i=t;i=i.parentNode;)o.unshift(i);for(i=e;i=i.parentNode;)a.unshift(i);for(;o[n]===a[n];)n++;return n?dt(o[n],a[n]):o[n]==w?-1:a[n]==w?1:0},p):p},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if(d(t),i.matchesSelector&&g&&!T[e+" "]&&(!v||!v.test(e))&&(!m||!m.test(e)))try{var n=b.call(t,e);if(n||i.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){T(e,!0)}return at(e,p,null,[t]).length>0},at.contains=function(t,e){return(t.ownerDocument||t)!=p&&d(t),_(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!=p&&d(t);var s=n.attrHandle[e.toLowerCase()],r=s&&I.call(n.attrHandle,e.toLowerCase())?s(t,e,!g):void 0;return void 0!==r?r:i.attributes||!g?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},at.escape=function(t){return(t+"").replace(nt,st)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,n=[],s=0,r=0;if(c=!i.detectDuplicates,u=!i.sortStable&&t.slice(0),t.sort(A),c){for(;e=t[r++];)e===t[r]&&(s=n.push(r));for(;s--;)t.splice(n[s],1)}return u=null,t},s=at.getText=function(t){var e,i="",n=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=s(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[n++];)i+=s(e);return i},n=at.selectors={cacheLength:50,createPseudo:ht,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,it),t[3]=(t[3]||t[4]||t[5]||"").replace(et,it),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return Q.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&W.test(i)&&(e=o(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,it).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=S[t+" "];return e||(e=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+t+"("+F+"|$)"))&&S(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,i){return function(n){var s=at.attr(n,t);return null==s?"!="===e:!e||(s+="","="===e?s===i:"!="===e?s!==i:"^="===e?i&&0===s.indexOf(i):"*="===e?i&&s.indexOf(i)>-1:"$="===e?i&&s.slice(-i.length)===i:"~="===e?(" "+s.replace(z," ")+" ").indexOf(i)>-1:"|="===e&&(s===i||s.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,i,n,s){var r="nth"!==t.slice(0,3),o="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===s?function(t){return!!t.parentNode}:function(e,i,l){var h,u,c,d,p,f,g=r!==o?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),b=!l&&!a,_=!1;if(m){if(r){for(;g;){for(d=e;d=d[g];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;f=g="only"===t&&!f&&"nextSibling"}return!0}if(f=[o?m.firstChild:m.lastChild],o&&b){for(_=(p=(h=(u=(c=(d=m)[y]||(d[y]={}))[d.uniqueID]||(c[d.uniqueID]={}))[t]||[])[0]===x&&h[1])&&h[2],d=p&&m.childNodes[p];d=++p&&d&&d[g]||(_=p=0)||f.pop();)if(1===d.nodeType&&++_&&d===e){u[t]=[x,p,_];break}}else if(b&&(_=p=(h=(u=(c=(d=e)[y]||(d[y]={}))[d.uniqueID]||(c[d.uniqueID]={}))[t]||[])[0]===x&&h[1]),!1===_)for(;(d=++p&&d&&d[g]||(_=p=0)||f.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++_||(b&&((u=(c=d[y]||(d[y]={}))[d.uniqueID]||(c[d.uniqueID]={}))[t]=[x,_]),d!==e)););return(_-=s)===n||_%n==0&&_/n>=0}}},PSEUDO:function(t,e){var i,s=n.pseudos[t]||n.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return s[y]?s(e):s.length>1?(i=[t,t,"",e],n.setFilters.hasOwnProperty(t.toLowerCase())?ht((function(t,i){for(var n,r=s(t,e),o=r.length;o--;)t[n=O(t,r[o])]=!(i[n]=r[o])})):function(t){return s(t,0,i)}):s}},pseudos:{not:ht((function(t){var e=[],i=[],n=a(t.replace(U,"$1"));return n[y]?ht((function(t,e,i,s){for(var r,o=n(t,null,s,[]),a=t.length;a--;)(r=o[a])&&(t[a]=!(e[a]=r))})):function(t,s,r){return e[0]=t,n(e,null,r,i),e[0]=null,!i.pop()}})),has:ht((function(t){return function(e){return at(t,e).length>0}})),contains:ht((function(t){return t=t.replace(et,it),function(e){return(e.textContent||s(e)).indexOf(t)>-1}})),lang:ht((function(t){return K.test(t||"")||at.error("unsupported lang: "+t),t=t.replace(et,it).toLowerCase(),function(e){var i;do{if(i=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(i=i.toLowerCase())===t||0===i.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!n.pseudos.empty(t)},header:function(t){return J.test(t.nodeName)},input:function(t){return Y.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt((function(){return[0]})),last:mt((function(t,e){return[e-1]})),eq:mt((function(t,e,i){return[i<0?i+e:i]})),even:mt((function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t})),odd:mt((function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t})),lt:mt((function(t,e,i){for(var n=i<0?i+e:i>e?e:i;--n>=0;)t.push(n);return t})),gt:mt((function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t}))}},n.pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[e]=pt(e);for(e in{submit:!0,reset:!0})n.pseudos[e]=ft(e);function bt(){}function _t(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function yt(t,e,i){var n=e.dir,s=e.next,r=s||n,o=i&&"parentNode"===r,a=C++;return e.first?function(e,i,s){for(;e=e[n];)if(1===e.nodeType||o)return t(e,i,s);return!1}:function(e,i,l){var h,u,c,d=[x,a];if(l){for(;e=e[n];)if((1===e.nodeType||o)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||o)if(u=(c=e[y]||(e[y]={}))[e.uniqueID]||(c[e.uniqueID]={}),s&&s===e.nodeName.toLowerCase())e=e[n]||e;else{if((h=u[r])&&h[0]===x&&h[1]===a)return d[2]=h[2];if(u[r]=d,d[2]=t(e,i,l))return!0}return!1}}function wt(t){return t.length>1?function(e,i,n){for(var s=t.length;s--;)if(!t[s](e,i,n))return!1;return!0}:t[0]}function xt(t,e,i,n,s){for(var r,o=[],a=0,l=t.length,h=null!=e;a<l;a++)(r=t[a])&&(i&&!i(r,n,s)||(o.push(r),h&&e.push(a)));return o}function Ct(t,e,i,n,s,r){return n&&!n[y]&&(n=Ct(n)),s&&!s[y]&&(s=Ct(s,r)),ht((function(r,o,a,l){var h,u,c,d=[],p=[],f=o.length,g=r||function(t,e,i){for(var n=0,s=e.length;n<s;n++)at(t,e[n],i);return i}(e||"*",a.nodeType?[a]:a,[]),m=!t||!r&&e?g:xt(g,d,t,a,l),v=i?s||(r?t:f||n)?[]:o:m;if(i&&i(m,v,a,l),n)for(h=xt(v,p),n(h,[],a,l),u=h.length;u--;)(c=h[u])&&(v[p[u]]=!(m[p[u]]=c));if(r){if(s||t){if(s){for(h=[],u=v.length;u--;)(c=v[u])&&h.push(m[u]=c);s(null,v=[],h,l)}for(u=v.length;u--;)(c=v[u])&&(h=s?O(r,c):d[u])>-1&&(r[h]=!(o[h]=c))}}else v=xt(v===o?v.splice(f,v.length):v),s?s(null,o,v,l):L.apply(o,v)}))}function St(t){for(var e,i,s,r=t.length,o=n.relative[t[0].type],a=o||n.relative[" "],l=o?1:0,u=yt((function(t){return t===e}),a,!0),c=yt((function(t){return O(e,t)>-1}),a,!0),d=[function(t,i,n){var s=!o&&(n||i!==h)||((e=i).nodeType?u(t,i,n):c(t,i,n));return e=null,s}];l<r;l++)if(i=n.relative[t[l].type])d=[yt(wt(d),i)];else{if((i=n.filter[t[l].type].apply(null,t[l].matches))[y]){for(s=++l;s<r&&!n.relative[t[s].type];s++);return Ct(l>1&&wt(d),l>1&&_t(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(U,"$1"),i,l<s&&St(t.slice(l,s)),s<r&&St(t=t.slice(s)),s<r&&_t(t))}d.push(i)}return wt(d)}return bt.prototype=n.filters=n.pseudos,n.setFilters=new bt,o=at.tokenize=function(t,e){var i,s,r,o,a,l,h,u=P[t+" "];if(u)return e?0:u.slice(0);for(a=t,l=[],h=n.preFilter;a;){for(o in i&&!(s=q.exec(a))||(s&&(a=a.slice(s[0].length)||a),l.push(r=[])),i=!1,(s=H.exec(a))&&(i=s.shift(),r.push({value:i,type:s[0].replace(U," ")}),a=a.slice(i.length)),n.filter)!(s=Q[o].exec(a))||h[o]&&!(s=h[o](s))||(i=s.shift(),r.push({value:i,type:o,matches:s}),a=a.slice(i.length));if(!i)break}return e?a.length:a?at.error(t):P(t,l).slice(0)},a=at.compile=function(t,e){var i,s=[],r=[],a=k[t+" "];if(!a){for(e||(e=o(t)),i=e.length;i--;)(a=St(e[i]))[y]?s.push(a):r.push(a);a=k(t,function(t,e){var i=e.length>0,s=t.length>0,r=function(r,o,a,l,u){var c,f,m,v=0,b="0",_=r&&[],y=[],w=h,C=r||s&&n.find.TAG("*",u),S=x+=null==w?1:Math.random()||.1,P=C.length;for(u&&(h=o==p||o||u);b!==P&&null!=(c=C[b]);b++){if(s&&c){for(f=0,o||c.ownerDocument==p||(d(c),a=!g);m=t[f++];)if(m(c,o||p,a)){l.push(c);break}u&&(x=S)}i&&((c=!m&&c)&&v--,r&&_.push(c))}if(v+=b,i&&b!==v){for(f=0;m=e[f++];)m(_,y,o,a);if(r){if(v>0)for(;b--;)_[b]||y[b]||(y[b]=M.call(l));y=xt(y)}L.apply(l,y),u&&!r&&y.length>0&&v+e.length>1&&at.uniqueSort(l)}return u&&(x=S,h=w),_};return i?ht(r):r}(r,s)),a.selector=t}return a},l=at.select=function(t,e,i,s){var r,l,h,u,c,d="function"==typeof t&&t,p=!s&&o(t=d.selector||t);if(i=i||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(h=l[0]).type&&9===e.nodeType&&g&&n.relative[l[1].type]){if(!(e=(n.find.ID(h.matches[0].replace(et,it),e)||[])[0]))return i;d&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(r=Q.needsContext.test(t)?0:l.length;r--&&(h=l[r],!n.relative[u=h.type]);)if((c=n.find[u])&&(s=c(h.matches[0].replace(et,it),tt.test(l[0].type)&&vt(e.parentNode)||e))){if(l.splice(r,1),!(t=s.length&&_t(l)))return L.apply(i,s),i;break}}return(d||a(t,p))(s,e,!g,i,!e||tt.test(t)&&vt(e.parentNode)||e),i},i.sortStable=y.split("").sort(A).join("")===y,i.detectDuplicates=!!c,d(),i.sortDetached=ut((function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))})),ut((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||ct("type|href|height|width",(function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),i.attributes&&ut((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||ct("value",(function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ut((function(t){return null==t.getAttribute("disabled")}))||ct(R,(function(t,e,i){var n;if(!i)return!0===t[e]?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null})),at}(n);S.find=k,S.expr=k.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=k.uniqueSort,S.text=k.getText,S.isXMLDoc=k.isXML,S.contains=k.contains,S.escapeSelector=k.escape;var T=function(t,e,i){for(var n=[],s=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(s&&S(t).is(i))break;n.push(t)}return n},A=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},I=S.expr.match.needsContext;function E(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(t,e,i){return v(e)?S.grep(t,(function(t,n){return!!e.call(t,n,t)!==i})):e.nodeType?S.grep(t,(function(t){return t===e!==i})):"string"!=typeof e?S.grep(t,(function(t){return u.call(e,t)>-1!==i})):S.filter(e,t,i)}S.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?S.find.matchesSelector(n,t)?[n]:[]:S.find.matches(t,S.grep(e,(function(t){return 1===t.nodeType})))},S.fn.extend({find:function(t){var e,i,n=this.length,s=this;if("string"!=typeof t)return this.pushStack(S(t).filter((function(){for(e=0;e<n;e++)if(S.contains(s[e],this))return!0})));for(i=this.pushStack([]),e=0;e<n;e++)S.find(t,s[e],i);return n>1?S.uniqueSort(i):i},filter:function(t){return this.pushStack(D(this,t||[],!1))},not:function(t){return this.pushStack(D(this,t||[],!0))},is:function(t){return!!D(this,"string"==typeof t&&I.test(t)?S(t):t||[],!1).length}});var L,N=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(t,e,i){var n,s;if(!t)return this;if(i=i||L,"string"==typeof t){if(!(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:N.exec(t))||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof S?e[0]:e,S.merge(this,S.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:_,!0)),M.test(n[1])&&S.isPlainObject(e))for(n in e)v(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return(s=_.getElementById(n[2]))&&(this[0]=s,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==i.ready?i.ready(t):t(S):S.makeArray(t,this)}).prototype=S.fn,L=S(_);var O=/^(?:parents|prev(?:Until|All))/,R={children:!0,contents:!0,next:!0,prev:!0};function F(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}S.fn.extend({has:function(t){var e=S(t,this),i=e.length;return this.filter((function(){for(var t=0;t<i;t++)if(S.contains(this,e[t]))return!0}))},closest:function(t,e){var i,n=0,s=this.length,r=[],o="string"!=typeof t&&S(t);if(!I.test(t))for(;n<s;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(o?o.index(i)>-1:1===i.nodeType&&S.find.matchesSelector(i,t))){r.push(i);break}return this.pushStack(r.length>1?S.uniqueSort(r):r)},index:function(t){return t?"string"==typeof t?u.call(S(t),this[0]):u.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),S.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return T(t,"parentNode")},parentsUntil:function(t,e,i){return T(t,"parentNode",i)},next:function(t){return F(t,"nextSibling")},prev:function(t){return F(t,"previousSibling")},nextAll:function(t){return T(t,"nextSibling")},prevAll:function(t){return T(t,"previousSibling")},nextUntil:function(t,e,i){return T(t,"nextSibling",i)},prevUntil:function(t,e,i){return T(t,"previousSibling",i)},siblings:function(t){return A((t.parentNode||{}).firstChild,t)},children:function(t){return A(t.firstChild)},contents:function(t){return null!=t.contentDocument&&o(t.contentDocument)?t.contentDocument:(E(t,"template")&&(t=t.content||t),S.merge([],t.childNodes))}},(function(t,e){S.fn[t]=function(i,n){var s=S.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(s=S.filter(n,s)),this.length>1&&(R[t]||S.uniqueSort(s),O.test(t)&&s.reverse()),this.pushStack(s)}}));var B=/[^\x20\t\r\n\f]+/g;function V(t){return t}function j(t){throw t}function z(t,e,i,n){var s;try{t&&v(s=t.promise)?s.call(t).done(e).fail(i):t&&v(s=t.then)?s.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}S.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return S.each(t.match(B)||[],(function(t,i){e[i]=!0})),e}(t):S.extend({},t);var e,i,n,s,r=[],o=[],a=-1,l=function(){for(s=s||t.once,n=e=!0;o.length;a=-1)for(i=o.shift();++a<r.length;)!1===r[a].apply(i[0],i[1])&&t.stopOnFalse&&(a=r.length,i=!1);t.memory||(i=!1),e=!1,s&&(r=i?[]:"")},h={add:function(){return r&&(i&&!e&&(a=r.length-1,o.push(i)),function e(i){S.each(i,(function(i,n){v(n)?t.unique&&h.has(n)||r.push(n):n&&n.length&&"string"!==x(n)&&e(n)}))}(arguments),i&&!e&&l()),this},remove:function(){return S.each(arguments,(function(t,e){for(var i;(i=S.inArray(e,r,i))>-1;)r.splice(i,1),i<=a&&a--})),this},has:function(t){return t?S.inArray(t,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return s=o=[],r=i="",this},disabled:function(){return!r},lock:function(){return s=o=[],i||e||(r=i=""),this},locked:function(){return!!s},fireWith:function(t,i){return s||(i=[t,(i=i||[]).slice?i.slice():i],o.push(i),e||l()),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!n}};return h},S.extend({Deferred:function(t){var e=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],i="pending",s={state:function(){return i},always:function(){return r.done(arguments).fail(arguments),this},catch:function(t){return s.then(null,t)},pipe:function(){var t=arguments;return S.Deferred((function(i){S.each(e,(function(e,n){var s=v(t[n[4]])&&t[n[4]];r[n[1]]((function(){var t=s&&s.apply(this,arguments);t&&v(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[n[0]+"With"](this,s?[t]:arguments)}))})),t=null})).promise()},then:function(t,i,s){var r=0;function o(t,e,i,s){return function(){var a=this,l=arguments,h=function(){var n,h;if(!(t<r)){if((n=i.apply(a,l))===e.promise())throw new TypeError("Thenable self-resolution");h=n&&("object"==typeof n||"function"==typeof n)&&n.then,v(h)?s?h.call(n,o(r,e,V,s),o(r,e,j,s)):(r++,h.call(n,o(r,e,V,s),o(r,e,j,s),o(r,e,V,e.notifyWith))):(i!==V&&(a=void 0,l=[n]),(s||e.resolveWith)(a,l))}},u=s?h:function(){try{h()}catch(n){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(n,u.stackTrace),t+1>=r&&(i!==j&&(a=void 0,l=[n]),e.rejectWith(a,l))}};t?u():(S.Deferred.getStackHook&&(u.stackTrace=S.Deferred.getStackHook()),n.setTimeout(u))}}return S.Deferred((function(n){e[0][3].add(o(0,n,v(s)?s:V,n.notifyWith)),e[1][3].add(o(0,n,v(t)?t:V)),e[2][3].add(o(0,n,v(i)?i:j))})).promise()},promise:function(t){return null!=t?S.extend(t,s):s}},r={};return S.each(e,(function(t,n){var o=n[2],a=n[5];s[n[1]]=o.add,a&&o.add((function(){i=a}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),o.add(n[3].fire),r[n[0]]=function(){return r[n[0]+"With"](this===r?void 0:this,arguments),this},r[n[0]+"With"]=o.fireWith})),s.promise(r),t&&t.call(r,r),r},when:function(t){var e=arguments.length,i=e,n=Array(i),s=a.call(arguments),r=S.Deferred(),o=function(t){return function(i){n[t]=this,s[t]=arguments.length>1?a.call(arguments):i,--e||r.resolveWith(n,s)}};if(e<=1&&(z(t,r.done(o(i)).resolve,r.reject,!e),"pending"===r.state()||v(s[i]&&s[i].then)))return r.then();for(;i--;)z(s[i],o(i),r.reject);return r.promise()}});var U=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&U.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},S.readyException=function(t){n.setTimeout((function(){throw t}))};var q=S.Deferred();function H(){_.removeEventListener("DOMContentLoaded",H),n.removeEventListener("load",H),S.ready()}S.fn.ready=function(t){return q.then(t).catch((function(t){S.readyException(t)})),this},S.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--S.readyWait:S.isReady)||(S.isReady=!0,!0!==t&&--S.readyWait>0||q.resolveWith(_,[S]))}}),S.ready.then=q.then,"complete"===_.readyState||"loading"!==_.readyState&&!_.documentElement.doScroll?n.setTimeout(S.ready):(_.addEventListener("DOMContentLoaded",H),n.addEventListener("load",H));var G=function(t,e,i,n,s,r,o){var a=0,l=t.length,h=null==i;if("object"===x(i))for(a in s=!0,i)G(t,e,a,i[a],!0,r,o);else if(void 0!==n&&(s=!0,v(n)||(o=!0),h&&(o?(e.call(t,n),e=null):(h=e,e=function(t,e,i){return h.call(S(t),i)})),e))for(;a<l;a++)e(t[a],i,o?n:n.call(t[a],a,e(t[a],i)));return s?t:h?e.call(t):l?e(t[0],i):r},W=/^-ms-/,K=/-([a-z])/g;function Q(t,e){return e.toUpperCase()}function X(t){return t.replace(W,"ms-").replace(K,Q)}var Y=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function J(){this.expando=S.expando+J.uid++}J.uid=1,J.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Y(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,s=this.cache(t);if("string"==typeof e)s[X(e)]=i;else for(n in e)s[X(n)]=e[n];return s},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){i=(e=Array.isArray(e)?e.map(X):(e=X(e))in n?[e]:e.match(B)||[]).length;for(;i--;)delete n[e[i]]}(void 0===e||S.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!S.isEmptyObject(e)}};var Z=new J,$=new J,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function it(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(n))){try{i=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(i)}catch(t){}$.set(t,e,i)}else i=void 0;return i}S.extend({hasData:function(t){return $.hasData(t)||Z.hasData(t)},data:function(t,e,i){return $.access(t,e,i)},removeData:function(t,e){$.remove(t,e)},_data:function(t,e,i){return Z.access(t,e,i)},_removeData:function(t,e){Z.remove(t,e)}}),S.fn.extend({data:function(t,e){var i,n,s,r=this[0],o=r&&r.attributes;if(void 0===t){if(this.length&&(s=$.get(r),1===r.nodeType&&!Z.get(r,"hasDataAttrs"))){for(i=o.length;i--;)o[i]&&0===(n=o[i].name).indexOf("data-")&&(n=X(n.slice(5)),it(r,n,s[n]));Z.set(r,"hasDataAttrs",!0)}return s}return"object"==typeof t?this.each((function(){$.set(this,t)})):G(this,(function(e){var i;if(r&&void 0===e)return void 0!==(i=$.get(r,t))||void 0!==(i=it(r,t))?i:void 0;this.each((function(){$.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){$.remove(this,t)}))}}),S.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=Z.get(t,e),i&&(!n||Array.isArray(i)?n=Z.access(t,e,S.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=S.queue(t,e),n=i.length,s=i.shift(),r=S._queueHooks(t,e);"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===e&&i.unshift("inprogress"),delete r.stop,s.call(t,(function(){S.dequeue(t,e)}),r)),!n&&r&&r.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return Z.get(t,i)||Z.access(t,i,{empty:S.Callbacks("once memory").add((function(){Z.remove(t,[e+"queue",i])}))})}}),S.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?S.queue(this[0],t):void 0===e?this:this.each((function(){var i=S.queue(this,t,e);S._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&S.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){S.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,s=S.Deferred(),r=this,o=this.length,a=function(){--n||s.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";o--;)(i=Z.get(r[o],t+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),s.promise(e)}});var nt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,st=new RegExp("^(?:([+-])=|)("+nt+")([a-z%]*)$","i"),rt=["Top","Right","Bottom","Left"],ot=_.documentElement,at=function(t){return S.contains(t.ownerDocument,t)},lt={composed:!0};ot.getRootNode&&(at=function(t){return S.contains(t.ownerDocument,t)||t.getRootNode(lt)===t.ownerDocument});var ht=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&at(t)&&"none"===S.css(t,"display")};function ut(t,e,i,n){var s,r,o=20,a=n?function(){return n.cur()}:function(){return S.css(t,e,"")},l=a(),h=i&&i[3]||(S.cssNumber[e]?"":"px"),u=t.nodeType&&(S.cssNumber[e]||"px"!==h&&+l)&&st.exec(S.css(t,e));if(u&&u[3]!==h){for(l/=2,h=h||u[3],u=+l||1;o--;)S.style(t,e,u+h),(1-r)*(1-(r=a()/l||.5))<=0&&(o=0),u/=r;u*=2,S.style(t,e,u+h),i=i||[]}return i&&(u=+u||+l||0,s=i[1]?u+(i[1]+1)*i[2]:+i[2],n&&(n.unit=h,n.start=u,n.end=s)),s}var ct={};function dt(t){var e,i=t.ownerDocument,n=t.nodeName,s=ct[n];return s||(e=i.body.appendChild(i.createElement(n)),s=S.css(e,"display"),e.parentNode.removeChild(e),"none"===s&&(s="block"),ct[n]=s,s)}function pt(t,e){for(var i,n,s=[],r=0,o=t.length;r<o;r++)(n=t[r]).style&&(i=n.style.display,e?("none"===i&&(s[r]=Z.get(n,"display")||null,s[r]||(n.style.display="")),""===n.style.display&&ht(n)&&(s[r]=dt(n))):"none"!==i&&(s[r]="none",Z.set(n,"display",i)));for(r=0;r<o;r++)null!=s[r]&&(t[r].style.display=s[r]);return t}S.fn.extend({show:function(){return pt(this,!0)},hide:function(){return pt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){ht(this)?S(this).show():S(this).hide()}))}});var ft,gt,mt=/^(?:checkbox|radio)$/i,vt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,bt=/^$|^module$|\/(?:java|ecma)script/i;ft=_.createDocumentFragment().appendChild(_.createElement("div")),(gt=_.createElement("input")).setAttribute("type","radio"),gt.setAttribute("checked","checked"),gt.setAttribute("name","t"),ft.appendChild(gt),m.checkClone=ft.cloneNode(!0).cloneNode(!0).lastChild.checked,ft.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!ft.cloneNode(!0).lastChild.defaultValue,ft.innerHTML="<option></option>",m.option=!!ft.lastChild;var _t={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function yt(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&E(t,e)?S.merge([t],i):i}function wt(t,e){for(var i=0,n=t.length;i<n;i++)Z.set(t[i],"globalEval",!e||Z.get(e[i],"globalEval"))}_t.tbody=_t.tfoot=_t.colgroup=_t.caption=_t.thead,_t.th=_t.td,m.option||(_t.optgroup=_t.option=[1,"<select multiple='multiple'>","</select>"]);var xt=/<|&#?\w+;/;function Ct(t,e,i,n,s){for(var r,o,a,l,h,u,c=e.createDocumentFragment(),d=[],p=0,f=t.length;p<f;p++)if((r=t[p])||0===r)if("object"===x(r))S.merge(d,r.nodeType?[r]:r);else if(xt.test(r)){for(o=o||c.appendChild(e.createElement("div")),a=(vt.exec(r)||["",""])[1].toLowerCase(),l=_t[a]||_t._default,o.innerHTML=l[1]+S.htmlPrefilter(r)+l[2],u=l[0];u--;)o=o.lastChild;S.merge(d,o.childNodes),(o=c.firstChild).textContent=""}else d.push(e.createTextNode(r));for(c.textContent="",p=0;r=d[p++];)if(n&&S.inArray(r,n)>-1)s&&s.push(r);else if(h=at(r),o=yt(c.appendChild(r),"script"),h&&wt(o),i)for(u=0;r=o[u++];)bt.test(r.type||"")&&i.push(r);return c}var St=/^key/,Pt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,kt=/^([^.]*)(?:\.(.+)|)/;function Tt(){return!0}function At(){return!1}function It(t,e){return t===function(){try{return _.activeElement}catch(t){}}()==("focus"===e)}function Et(t,e,i,n,s,r){var o,a;if("object"==typeof e){for(a in"string"!=typeof i&&(n=n||i,i=void 0),e)Et(t,a,i,n,e[a],r);return t}if(null==n&&null==s?(s=i,n=i=void 0):null==s&&("string"==typeof i?(s=n,n=void 0):(s=n,n=i,i=void 0)),!1===s)s=At;else if(!s)return t;return 1===r&&(o=s,s=function(t){return S().off(t),o.apply(this,arguments)},s.guid=o.guid||(o.guid=S.guid++)),t.each((function(){S.event.add(this,e,s,n,i)}))}function Mt(t,e,i){i?(Z.set(t,e,!1),S.event.add(t,e,{namespace:!1,handler:function(t){var n,s,r=Z.get(this,e);if(1&t.isTrigger&&this[e]){if(r.length)(S.event.special[e]||{}).delegateType&&t.stopPropagation();else if(r=a.call(arguments),Z.set(this,e,r),n=i(this,e),this[e](),r!==(s=Z.get(this,e))||n?Z.set(this,e,!1):s={},r!==s)return t.stopImmediatePropagation(),t.preventDefault(),s.value}else r.length&&(Z.set(this,e,{value:S.event.trigger(S.extend(r[0],S.Event.prototype),r.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===Z.get(t,e)&&S.event.add(t,e,Tt)}S.event={global:{},add:function(t,e,i,n,s){var r,o,a,l,h,u,c,d,p,f,g,m=Z.get(t);if(Y(t))for(i.handler&&(i=(r=i).handler,s=r.selector),s&&S.find.matchesSelector(ot,s),i.guid||(i.guid=S.guid++),(l=m.events)||(l=m.events=Object.create(null)),(o=m.handle)||(o=m.handle=function(e){return void 0!==S&&S.event.triggered!==e.type?S.event.dispatch.apply(t,arguments):void 0}),h=(e=(e||"").match(B)||[""]).length;h--;)p=g=(a=kt.exec(e[h])||[])[1],f=(a[2]||"").split(".").sort(),p&&(c=S.event.special[p]||{},p=(s?c.delegateType:c.bindType)||p,c=S.event.special[p]||{},u=S.extend({type:p,origType:g,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&S.expr.match.needsContext.test(s),namespace:f.join(".")},r),(d=l[p])||((d=l[p]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(t,n,f,o)||t.addEventListener&&t.addEventListener(p,o)),c.add&&(c.add.call(t,u),u.handler.guid||(u.handler.guid=i.guid)),s?d.splice(d.delegateCount++,0,u):d.push(u),S.event.global[p]=!0)},remove:function(t,e,i,n,s){var r,o,a,l,h,u,c,d,p,f,g,m=Z.hasData(t)&&Z.get(t);if(m&&(l=m.events)){for(h=(e=(e||"").match(B)||[""]).length;h--;)if(p=g=(a=kt.exec(e[h])||[])[1],f=(a[2]||"").split(".").sort(),p){for(c=S.event.special[p]||{},d=l[p=(n?c.delegateType:c.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=r=d.length;r--;)u=d[r],!s&&g!==u.origType||i&&i.guid!==u.guid||a&&!a.test(u.namespace)||n&&n!==u.selector&&("**"!==n||!u.selector)||(d.splice(r,1),u.selector&&d.delegateCount--,c.remove&&c.remove.call(t,u));o&&!d.length&&(c.teardown&&!1!==c.teardown.call(t,f,m.handle)||S.removeEvent(t,p,m.handle),delete l[p])}else for(p in l)S.event.remove(t,p+e[h],i,n,!0);S.isEmptyObject(l)&&Z.remove(t,"handle events")}},dispatch:function(t){var e,i,n,s,r,o,a=new Array(arguments.length),l=S.event.fix(t),h=(Z.get(this,"events")||Object.create(null))[l.type]||[],u=S.event.special[l.type]||{};for(a[0]=l,e=1;e<arguments.length;e++)a[e]=arguments[e];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(o=S.event.handlers.call(this,l,h),e=0;(s=o[e++])&&!l.isPropagationStopped();)for(l.currentTarget=s.elem,i=0;(r=s.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(n=((S.event.special[r.origType]||{}).handle||r.handler).apply(s.elem,a))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(t,e){var i,n,s,r,o,a=[],l=e.delegateCount,h=t.target;if(l&&h.nodeType&&!("click"===t.type&&t.button>=1))for(;h!==this;h=h.parentNode||this)if(1===h.nodeType&&("click"!==t.type||!0!==h.disabled)){for(r=[],o={},i=0;i<l;i++)void 0===o[s=(n=e[i]).selector+" "]&&(o[s]=n.needsContext?S(s,this).index(h)>-1:S.find(s,this,null,[h]).length),o[s]&&r.push(n);r.length&&a.push({elem:h,handlers:r})}return h=this,l<e.length&&a.push({elem:h,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(S.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[S.expando]?t:new S.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return mt.test(e.type)&&e.click&&E(e,"input")&&Mt(e,"click",Tt),!1},trigger:function(t){var e=this||t;return mt.test(e.type)&&e.click&&E(e,"input")&&Mt(e,"click"),!0},_default:function(t){var e=t.target;return mt.test(e.type)&&e.click&&E(e,"input")&&Z.get(e,"click")||E(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},S.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},S.Event=function(t,e){if(!(this instanceof S.Event))return new S.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Tt:At,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&S.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:At,isPropagationStopped:At,isImmediatePropagationStopped:At,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Tt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Tt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Tt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&St.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Pt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},(function(t,e){S.event.special[t]={setup:function(){return Mt(this,t,It),!1},trigger:function(){return Mt(this,t),!0},delegateType:e}})),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){S.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=this,s=t.relatedTarget,r=t.handleObj;return s&&(s===n||S.contains(n,s))||(t.type=r.origType,i=r.handler.apply(this,arguments),t.type=e),i}}})),S.fn.extend({on:function(t,e,i,n){return Et(this,t,e,i,n)},one:function(t,e,i,n){return Et(this,t,e,i,n,1)},off:function(t,e,i){var n,s;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,S(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(s in t)this.off(s,e,t[s]);return this}return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=At),this.each((function(){S.event.remove(this,t,i,e)}))}});var Dt=/<script|<style|<link/i,Lt=/checked\s*(?:[^=]|=\s*.checked.)/i,Nt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ot(t,e){return E(t,"table")&&E(11!==e.nodeType?e:e.firstChild,"tr")&&S(t).children("tbody")[0]||t}function Rt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Ft(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Bt(t,e){var i,n,s,r,o,a;if(1===e.nodeType){if(Z.hasData(t)&&(a=Z.get(t).events))for(s in Z.remove(e,"handle events"),a)for(i=0,n=a[s].length;i<n;i++)S.event.add(e,s,a[s][i]);$.hasData(t)&&(r=$.access(t),o=S.extend({},r),$.set(e,o))}}function Vt(t,e){var i=e.nodeName.toLowerCase();"input"===i&&mt.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function jt(t,e,i,n){e=l(e);var s,r,o,a,h,u,c=0,d=t.length,p=d-1,f=e[0],g=v(f);if(g||d>1&&"string"==typeof f&&!m.checkClone&&Lt.test(f))return t.each((function(s){var r=t.eq(s);g&&(e[0]=f.call(this,s,r.html())),jt(r,e,i,n)}));if(d&&(r=(s=Ct(e,t[0].ownerDocument,!1,t,n)).firstChild,1===s.childNodes.length&&(s=r),r||n)){for(a=(o=S.map(yt(s,"script"),Rt)).length;c<d;c++)h=s,c!==p&&(h=S.clone(h,!0,!0),a&&S.merge(o,yt(h,"script"))),i.call(t[c],h,c);if(a)for(u=o[o.length-1].ownerDocument,S.map(o,Ft),c=0;c<a;c++)h=o[c],bt.test(h.type||"")&&!Z.access(h,"globalEval")&&S.contains(u,h)&&(h.src&&"module"!==(h.type||"").toLowerCase()?S._evalUrl&&!h.noModule&&S._evalUrl(h.src,{nonce:h.nonce||h.getAttribute("nonce")},u):w(h.textContent.replace(Nt,""),h,u))}return t}function zt(t,e,i){for(var n,s=e?S.filter(e,t):t,r=0;null!=(n=s[r]);r++)i||1!==n.nodeType||S.cleanData(yt(n)),n.parentNode&&(i&&at(n)&&wt(yt(n,"script")),n.parentNode.removeChild(n));return t}S.extend({htmlPrefilter:function(t){return t},clone:function(t,e,i){var n,s,r,o,a=t.cloneNode(!0),l=at(t);if(!(m.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||S.isXMLDoc(t)))for(o=yt(a),n=0,s=(r=yt(t)).length;n<s;n++)Vt(r[n],o[n]);if(e)if(i)for(r=r||yt(t),o=o||yt(a),n=0,s=r.length;n<s;n++)Bt(r[n],o[n]);else Bt(t,a);return(o=yt(a,"script")).length>0&&wt(o,!l&&yt(t,"script")),a},cleanData:function(t){for(var e,i,n,s=S.event.special,r=0;void 0!==(i=t[r]);r++)if(Y(i)){if(e=i[Z.expando]){if(e.events)for(n in e.events)s[n]?S.event.remove(i,n):S.removeEvent(i,n,e.handle);i[Z.expando]=void 0}i[$.expando]&&(i[$.expando]=void 0)}}}),S.fn.extend({detach:function(t){return zt(this,t,!0)},remove:function(t){return zt(this,t)},text:function(t){return G(this,(function(t){return void 0===t?S.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return jt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ot(this,t).appendChild(t)}))},prepend:function(){return jt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Ot(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return jt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return jt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(S.cleanData(yt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return S.clone(this,t,e)}))},html:function(t){return G(this,(function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Dt.test(t)&&!_t[(vt.exec(t)||["",""])[1].toLowerCase()]){t=S.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(S.cleanData(yt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return jt(this,arguments,(function(e){var i=this.parentNode;S.inArray(this,t)<0&&(S.cleanData(yt(this)),i&&i.replaceChild(e,this))}),t)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){S.fn[t]=function(t){for(var i,n=[],s=S(t),r=s.length-1,o=0;o<=r;o++)i=o===r?this:this.clone(!0),S(s[o])[e](i),h.apply(n,i.get());return this.pushStack(n)}}));var Ut=new RegExp("^("+nt+")(?!px)[a-z%]+$","i"),qt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},Ht=function(t,e,i){var n,s,r={};for(s in e)r[s]=t.style[s],t.style[s]=e[s];for(s in n=i.call(t),e)t.style[s]=r[s];return n},Gt=new RegExp(rt.join("|"),"i");function Wt(t,e,i){var n,s,r,o,a=t.style;return(i=i||qt(t))&&(""!==(o=i.getPropertyValue(e)||i[e])||at(t)||(o=S.style(t,e)),!m.pixelBoxStyles()&&Ut.test(o)&&Gt.test(e)&&(n=a.width,s=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=i.width,a.width=n,a.minWidth=s,a.maxWidth=r)),void 0!==o?o+"":o}function Kt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(u){h.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ot.appendChild(h).appendChild(u);var t=n.getComputedStyle(u);i="1%"!==t.top,l=12===e(t.marginLeft),u.style.right="60%",o=36===e(t.right),s=36===e(t.width),u.style.position="absolute",r=12===e(u.offsetWidth/3),ot.removeChild(h),u=null}}function e(t){return Math.round(parseFloat(t))}var i,s,r,o,a,l,h=_.createElement("div"),u=_.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===u.style.backgroundClip,S.extend(m,{boxSizingReliable:function(){return t(),s},pixelBoxStyles:function(){return t(),o},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),r},reliableTrDimensions:function(){var t,e,i,s;return null==a&&(t=_.createElement("table"),e=_.createElement("tr"),i=_.createElement("div"),t.style.cssText="position:absolute;left:-11111px",e.style.height="1px",i.style.height="9px",ot.appendChild(t).appendChild(e).appendChild(i),s=n.getComputedStyle(e),a=parseInt(s.height)>3,ot.removeChild(t)),a}}))}();var Qt=["Webkit","Moz","ms"],Xt=_.createElement("div").style,Yt={};function Jt(t){return S.cssProps[t]||Yt[t]||(t in Xt?t:Yt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=Qt.length;i--;)if((t=Qt[i]+e)in Xt)return t}(t)||t)}var Zt=/^(none|table(?!-c[ea]).+)/,$t=/^--/,te={position:"absolute",visibility:"hidden",display:"block"},ee={letterSpacing:"0",fontWeight:"400"};function ie(t,e,i){var n=st.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function ne(t,e,i,n,s,r){var o="width"===e?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;o<4;o+=2)"margin"===i&&(l+=S.css(t,i+rt[o],!0,s)),n?("content"===i&&(l-=S.css(t,"padding"+rt[o],!0,s)),"margin"!==i&&(l-=S.css(t,"border"+rt[o]+"Width",!0,s))):(l+=S.css(t,"padding"+rt[o],!0,s),"padding"!==i?l+=S.css(t,"border"+rt[o]+"Width",!0,s):a+=S.css(t,"border"+rt[o]+"Width",!0,s));return!n&&r>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-r-l-a-.5))||0),l}function se(t,e,i){var n=qt(t),s=(!m.boxSizingReliable()||i)&&"border-box"===S.css(t,"boxSizing",!1,n),r=s,o=Wt(t,e,n),a="offset"+e[0].toUpperCase()+e.slice(1);if(Ut.test(o)){if(!i)return o;o="auto"}return(!m.boxSizingReliable()&&s||!m.reliableTrDimensions()&&E(t,"tr")||"auto"===o||!parseFloat(o)&&"inline"===S.css(t,"display",!1,n))&&t.getClientRects().length&&(s="border-box"===S.css(t,"boxSizing",!1,n),(r=a in t)&&(o=t[a])),(o=parseFloat(o)||0)+ne(t,e,i||(s?"border":"content"),r,n,o)+"px"}function re(t,e,i,n,s){return new re.prototype.init(t,e,i,n,s)}S.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Wt(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var s,r,o,a=X(e),l=$t.test(e),h=t.style;if(l||(e=Jt(a)),o=S.cssHooks[e]||S.cssHooks[a],void 0===i)return o&&"get"in o&&void 0!==(s=o.get(t,!1,n))?s:h[e];"string"==(r=typeof i)&&(s=st.exec(i))&&s[1]&&(i=ut(t,e,s),r="number"),null!=i&&i==i&&("number"!==r||l||(i+=s&&s[3]||(S.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==i||0!==e.indexOf("background")||(h[e]="inherit"),o&&"set"in o&&void 0===(i=o.set(t,i,n))||(l?h.setProperty(e,i):h[e]=i))}},css:function(t,e,i,n){var s,r,o,a=X(e);return $t.test(e)||(e=Jt(a)),(o=S.cssHooks[e]||S.cssHooks[a])&&"get"in o&&(s=o.get(t,!0,i)),void 0===s&&(s=Wt(t,e,n)),"normal"===s&&e in ee&&(s=ee[e]),""===i||i?(r=parseFloat(s),!0===i||isFinite(r)?r||0:s):s}}),S.each(["height","width"],(function(t,e){S.cssHooks[e]={get:function(t,i,n){if(i)return!Zt.test(S.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?se(t,e,n):Ht(t,te,(function(){return se(t,e,n)}))},set:function(t,i,n){var s,r=qt(t),o=!m.scrollboxSize()&&"absolute"===r.position,a=(o||n)&&"border-box"===S.css(t,"boxSizing",!1,r),l=n?ne(t,e,n,a,r):0;return a&&o&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(r[e])-ne(t,e,"border",!1,r)-.5)),l&&(s=st.exec(i))&&"px"!==(s[3]||"px")&&(t.style[e]=i,i=S.css(t,e)),ie(0,i,l)}}})),S.cssHooks.marginLeft=Kt(m.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Wt(t,"marginLeft"))||t.getBoundingClientRect().left-Ht(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),S.each({margin:"",padding:"",border:"Width"},(function(t,e){S.cssHooks[t+e]={expand:function(i){for(var n=0,s={},r="string"==typeof i?i.split(" "):[i];n<4;n++)s[t+rt[n]+e]=r[n]||r[n-2]||r[0];return s}},"margin"!==t&&(S.cssHooks[t+e].set=ie)})),S.fn.extend({css:function(t,e){return G(this,(function(t,e,i){var n,s,r={},o=0;if(Array.isArray(e)){for(n=qt(t),s=e.length;o<s;o++)r[e[o]]=S.css(t,e[o],!1,n);return r}return void 0!==i?S.style(t,e,i):S.css(t,e)}),t,e,arguments.length>1)}}),S.Tween=re,re.prototype={constructor:re,init:function(t,e,i,n,s,r){this.elem=t,this.prop=i,this.easing=s||S.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=r||(S.cssNumber[i]?"":"px")},cur:function(){var t=re.propHooks[this.prop];return t&&t.get?t.get(this):re.propHooks._default.get(this)},run:function(t){var e,i=re.propHooks[this.prop];return this.options.duration?this.pos=e=S.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):re.propHooks._default.set(this),this}},re.prototype.init.prototype=re.prototype,re.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=S.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){S.fx.step[t.prop]?S.fx.step[t.prop](t):1!==t.elem.nodeType||!S.cssHooks[t.prop]&&null==t.elem.style[Jt(t.prop)]?t.elem[t.prop]=t.now:S.style(t.elem,t.prop,t.now+t.unit)}}},re.propHooks.scrollTop=re.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},S.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},S.fx=re.prototype.init,S.fx.step={};var oe,ae,le=/^(?:toggle|show|hide)$/,he=/queueHooks$/;function ue(){ae&&(!1===_.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ue):n.setTimeout(ue,S.fx.interval),S.fx.tick())}function ce(){return n.setTimeout((function(){oe=void 0})),oe=Date.now()}function de(t,e){var i,n=0,s={height:t};for(e=e?1:0;n<4;n+=2-e)s["margin"+(i=rt[n])]=s["padding"+i]=t;return e&&(s.opacity=s.width=t),s}function pe(t,e,i){for(var n,s=(fe.tweeners[e]||[]).concat(fe.tweeners["*"]),r=0,o=s.length;r<o;r++)if(n=s[r].call(i,e,t))return n}function fe(t,e,i){var n,s,r=0,o=fe.prefilters.length,a=S.Deferred().always((function(){delete l.elem})),l=function(){if(s)return!1;for(var e=oe||ce(),i=Math.max(0,h.startTime+h.duration-e),n=1-(i/h.duration||0),r=0,o=h.tweens.length;r<o;r++)h.tweens[r].run(n);return a.notifyWith(t,[h,n,i]),n<1&&o?i:(o||a.notifyWith(t,[h,1,0]),a.resolveWith(t,[h]),!1)},h=a.promise({elem:t,props:S.extend({},e),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},i),originalProperties:e,originalOptions:i,startTime:oe||ce(),duration:i.duration,tweens:[],createTween:function(e,i){var n=S.Tween(t,h.opts,e,i,h.opts.specialEasing[e]||h.opts.easing);return h.tweens.push(n),n},stop:function(e){var i=0,n=e?h.tweens.length:0;if(s)return this;for(s=!0;i<n;i++)h.tweens[i].run(1);return e?(a.notifyWith(t,[h,1,0]),a.resolveWith(t,[h,e])):a.rejectWith(t,[h,e]),this}}),u=h.props;for(function(t,e){var i,n,s,r,o;for(i in t)if(s=e[n=X(i)],r=t[i],Array.isArray(r)&&(s=r[1],r=t[i]=r[0]),i!==n&&(t[n]=r,delete t[i]),(o=S.cssHooks[n])&&"expand"in o)for(i in r=o.expand(r),delete t[n],r)i in t||(t[i]=r[i],e[i]=s);else e[n]=s}(u,h.opts.specialEasing);r<o;r++)if(n=fe.prefilters[r].call(h,t,u,h.opts))return v(n.stop)&&(S._queueHooks(h.elem,h.opts.queue).stop=n.stop.bind(n)),n;return S.map(u,pe,h),v(h.opts.start)&&h.opts.start.call(t,h),h.progress(h.opts.progress).done(h.opts.done,h.opts.complete).fail(h.opts.fail).always(h.opts.always),S.fx.timer(S.extend(l,{elem:t,anim:h,queue:h.opts.queue})),h}S.Animation=S.extend(fe,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return ut(i.elem,t,st.exec(e),i),i}]},tweener:function(t,e){v(t)?(e=t,t=["*"]):t=t.match(B);for(var i,n=0,s=t.length;n<s;n++)i=t[n],fe.tweeners[i]=fe.tweeners[i]||[],fe.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,s,r,o,a,l,h,u,c="width"in e||"height"in e,d=this,p={},f=t.style,g=t.nodeType&&ht(t),m=Z.get(t,"fxshow");for(n in i.queue||(null==(o=S._queueHooks(t,"fx")).unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,d.always((function(){d.always((function(){o.unqueued--,S.queue(t,"fx").length||o.empty.fire()}))}))),e)if(s=e[n],le.test(s)){if(delete e[n],r=r||"toggle"===s,s===(g?"hide":"show")){if("show"!==s||!m||void 0===m[n])continue;g=!0}p[n]=m&&m[n]||S.style(t,n)}if((l=!S.isEmptyObject(e))||!S.isEmptyObject(p))for(n in c&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(h=m&&m.display)&&(h=Z.get(t,"display")),"none"===(u=S.css(t,"display"))&&(h?u=h:(pt([t],!0),h=t.style.display||h,u=S.css(t,"display"),pt([t]))),("inline"===u||"inline-block"===u&&null!=h)&&"none"===S.css(t,"float")&&(l||(d.done((function(){f.display=h})),null==h&&(u=f.display,h="none"===u?"":u)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",d.always((function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}))),l=!1,p)l||(m?"hidden"in m&&(g=m.hidden):m=Z.access(t,"fxshow",{display:h}),r&&(m.hidden=!g),g&&pt([t],!0),d.done((function(){for(n in g||pt([t]),Z.remove(t,"fxshow"),p)S.style(t,n,p[n])}))),l=pe(g?m[n]:0,n,d),n in m||(m[n]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?fe.prefilters.unshift(t):fe.prefilters.push(t)}}),S.speed=function(t,e,i){var n=t&&"object"==typeof t?S.extend({},t):{complete:i||!i&&e||v(t)&&t,duration:t,easing:i&&e||e&&!v(e)&&e};return S.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in S.fx.speeds?n.duration=S.fx.speeds[n.duration]:n.duration=S.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){v(n.old)&&n.old.call(this),n.queue&&S.dequeue(this,n.queue)},n},S.fn.extend({fadeTo:function(t,e,i,n){return this.filter(ht).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var s=S.isEmptyObject(t),r=S.speed(e,i,n),o=function(){var e=fe(this,S.extend({},t),r);(s||Z.get(this,"finish"))&&e.stop(!0)};return o.finish=o,s||!1===r.queue?this.each(o):this.queue(r.queue,o)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,s=null!=t&&t+"queueHooks",r=S.timers,o=Z.get(this);if(s)o[s]&&o[s].stop&&n(o[s]);else for(s in o)o[s]&&o[s].stop&&he.test(s)&&n(o[s]);for(s=r.length;s--;)r[s].elem!==this||null!=t&&r[s].queue!==t||(r[s].anim.stop(i),e=!1,r.splice(s,1));!e&&i||S.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,i=Z.get(this),n=i[t+"queue"],s=i[t+"queueHooks"],r=S.timers,o=n?n.length:0;for(i.finish=!0,S.queue(this,t,[]),s&&s.stop&&s.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===t&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish}))}}),S.each(["toggle","show","hide"],(function(t,e){var i=S.fn[e];S.fn[e]=function(t,n,s){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(de(e,!0),t,n,s)}})),S.each({slideDown:de("show"),slideUp:de("hide"),slideToggle:de("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){S.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}})),S.timers=[],S.fx.tick=function(){var t,e=0,i=S.timers;for(oe=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||S.fx.stop(),oe=void 0},S.fx.timer=function(t){S.timers.push(t),S.fx.start()},S.fx.interval=13,S.fx.start=function(){ae||(ae=!0,ue())},S.fx.stop=function(){ae=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(t,e){return t=S.fx&&S.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,i){var s=n.setTimeout(e,t);i.stop=function(){n.clearTimeout(s)}}))},function(){var t=_.createElement("input"),e=_.createElement("select").appendChild(_.createElement("option"));t.type="checkbox",m.checkOn=""!==t.value,m.optSelected=e.selected,(t=_.createElement("input")).value="t",t.type="radio",m.radioValue="t"===t.value}();var ge,me=S.expr.attrHandle;S.fn.extend({attr:function(t,e){return G(this,S.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){S.removeAttr(this,t)}))}}),S.extend({attr:function(t,e,i){var n,s,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===t.getAttribute?S.prop(t,e,i):(1===r&&S.isXMLDoc(t)||(s=S.attrHooks[e.toLowerCase()]||(S.expr.match.bool.test(e)?ge:void 0)),void 0!==i?null===i?void S.removeAttr(t,e):s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:(t.setAttribute(e,i+""),i):s&&"get"in s&&null!==(n=s.get(t,e))?n:null==(n=S.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!m.radioValue&&"radio"===e&&E(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,s=e&&e.match(B);if(s&&1===t.nodeType)for(;i=s[n++];)t.removeAttribute(i)}}),ge={set:function(t,e,i){return!1===e?S.removeAttr(t,i):t.setAttribute(i,i),i}},S.each(S.expr.match.bool.source.match(/\w+/g),(function(t,e){var i=me[e]||S.find.attr;me[e]=function(t,e,n){var s,r,o=e.toLowerCase();return n||(r=me[o],me[o]=s,s=null!=i(t,e,n)?o:null,me[o]=r),s}}));var ve=/^(?:input|select|textarea|button)$/i,be=/^(?:a|area)$/i;function _e(t){return(t.match(B)||[]).join(" ")}function ye(t){return t.getAttribute&&t.getAttribute("class")||""}function we(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(B)||[]}S.fn.extend({prop:function(t,e){return G(this,S.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[S.propFix[t]||t]}))}}),S.extend({prop:function(t,e,i){var n,s,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&S.isXMLDoc(t)||(e=S.propFix[e]||e,s=S.propHooks[e]),void 0!==i?s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:t[e]=i:s&&"get"in s&&null!==(n=s.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=S.find.attr(t,"tabindex");return e?parseInt(e,10):ve.test(t.nodeName)||be.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(S.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){S.propFix[this.toLowerCase()]=this})),S.fn.extend({addClass:function(t){var e,i,n,s,r,o,a,l=0;if(v(t))return this.each((function(e){S(this).addClass(t.call(this,e,ye(this)))}));if((e=we(t)).length)for(;i=this[l++];)if(s=ye(i),n=1===i.nodeType&&" "+_e(s)+" "){for(o=0;r=e[o++];)n.indexOf(" "+r+" ")<0&&(n+=r+" ");s!==(a=_e(n))&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,s,r,o,a,l=0;if(v(t))return this.each((function(e){S(this).removeClass(t.call(this,e,ye(this)))}));if(!arguments.length)return this.attr("class","");if((e=we(t)).length)for(;i=this[l++];)if(s=ye(i),n=1===i.nodeType&&" "+_e(s)+" "){for(o=0;r=e[o++];)for(;n.indexOf(" "+r+" ")>-1;)n=n.replace(" "+r+" "," ");s!==(a=_e(n))&&i.setAttribute("class",a)}return this},toggleClass:function(t,e){var i=typeof t,n="string"===i||Array.isArray(t);return"boolean"==typeof e&&n?e?this.addClass(t):this.removeClass(t):v(t)?this.each((function(i){S(this).toggleClass(t.call(this,i,ye(this),e),e)})):this.each((function(){var e,s,r,o;if(n)for(s=0,r=S(this),o=we(t);e=o[s++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==i||((e=ye(this))&&Z.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Z.get(this,"__className__")||""))}))},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+_e(ye(i))+" ").indexOf(e)>-1)return!0;return!1}});var xe=/\r/g;S.fn.extend({val:function(t){var e,i,n,s=this[0];return arguments.length?(n=v(t),this.each((function(i){var s;1===this.nodeType&&(null==(s=n?t.call(this,i,S(this).val()):t)?s="":"number"==typeof s?s+="":Array.isArray(s)&&(s=S.map(s,(function(t){return null==t?"":t+""}))),(e=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,s,"value")||(this.value=s))}))):s?(e=S.valHooks[s.type]||S.valHooks[s.nodeName.toLowerCase()])&&"get"in e&&void 0!==(i=e.get(s,"value"))?i:"string"==typeof(i=s.value)?i.replace(xe,""):null==i?"":i:void 0}}),S.extend({valHooks:{option:{get:function(t){var e=S.find.attr(t,"value");return null!=e?e:_e(S.text(t))}},select:{get:function(t){var e,i,n,s=t.options,r=t.selectedIndex,o="select-one"===t.type,a=o?null:[],l=o?r+1:s.length;for(n=r<0?l:o?r:0;n<l;n++)if(((i=s[n]).selected||n===r)&&!i.disabled&&(!i.parentNode.disabled||!E(i.parentNode,"optgroup"))){if(e=S(i).val(),o)return e;a.push(e)}return a},set:function(t,e){for(var i,n,s=t.options,r=S.makeArray(e),o=s.length;o--;)((n=s[o]).selected=S.inArray(S.valHooks.option.get(n),r)>-1)&&(i=!0);return i||(t.selectedIndex=-1),r}}}}),S.each(["radio","checkbox"],(function(){S.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=S.inArray(S(t).val(),e)>-1}},m.checkOn||(S.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),m.focusin="onfocusin"in n;var Ce=/^(?:focusinfocus|focusoutblur)$/,Se=function(t){t.stopPropagation()};S.extend(S.event,{trigger:function(t,e,i,s){var r,o,a,l,h,u,c,d,f=[i||_],g=p.call(t,"type")?t.type:t,m=p.call(t,"namespace")?t.namespace.split("."):[];if(o=d=a=i=i||_,3!==i.nodeType&&8!==i.nodeType&&!Ce.test(g+S.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),h=g.indexOf(":")<0&&"on"+g,(t=t[S.expando]?t:new S.Event(g,"object"==typeof t&&t)).isTrigger=s?2:3,t.namespace=m.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:S.makeArray(e,[t]),c=S.event.special[g]||{},s||!c.trigger||!1!==c.trigger.apply(i,e))){if(!s&&!c.noBubble&&!b(i)){for(l=c.delegateType||g,Ce.test(l+g)||(o=o.parentNode);o;o=o.parentNode)f.push(o),a=o;a===(i.ownerDocument||_)&&f.push(a.defaultView||a.parentWindow||n)}for(r=0;(o=f[r++])&&!t.isPropagationStopped();)d=o,t.type=r>1?l:c.bindType||g,(u=(Z.get(o,"events")||Object.create(null))[t.type]&&Z.get(o,"handle"))&&u.apply(o,e),(u=h&&o[h])&&u.apply&&Y(o)&&(t.result=u.apply(o,e),!1===t.result&&t.preventDefault());return t.type=g,s||t.isDefaultPrevented()||c._default&&!1!==c._default.apply(f.pop(),e)||!Y(i)||h&&v(i[g])&&!b(i)&&((a=i[h])&&(i[h]=null),S.event.triggered=g,t.isPropagationStopped()&&d.addEventListener(g,Se),i[g](),t.isPropagationStopped()&&d.removeEventListener(g,Se),S.event.triggered=void 0,a&&(i[h]=a)),t.result}},simulate:function(t,e,i){var n=S.extend(new S.Event,i,{type:t,isSimulated:!0});S.event.trigger(n,null,e)}}),S.fn.extend({trigger:function(t,e){return this.each((function(){S.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var i=this[0];if(i)return S.event.trigger(t,e,i,!0)}}),m.focusin||S.each({focus:"focusin",blur:"focusout"},(function(t,e){var i=function(t){S.event.simulate(e,t.target,S.event.fix(t))};S.event.special[e]={setup:function(){var n=this.ownerDocument||this.document||this,s=Z.access(n,e);s||n.addEventListener(t,i,!0),Z.access(n,e,(s||0)+1)},teardown:function(){var n=this.ownerDocument||this.document||this,s=Z.access(n,e)-1;s?Z.access(n,e,s):(n.removeEventListener(t,i,!0),Z.remove(n,e))}}}));var Pe=n.location,ke={guid:Date.now()},Te=/\?/;S.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||S.error("Invalid XML: "+t),e};var Ae=/\[\]$/,Ie=/\r?\n/g,Ee=/^(?:submit|button|image|reset|file)$/i,Me=/^(?:input|select|textarea|keygen)/i;function De(t,e,i,n){var s;if(Array.isArray(e))S.each(e,(function(e,s){i||Ae.test(t)?n(t,s):De(t+"["+("object"==typeof s&&null!=s?e:"")+"]",s,i,n)}));else if(i||"object"!==x(e))n(t,e);else for(s in e)De(t+"["+s+"]",e[s],i,n)}S.param=function(t,e){var i,n=[],s=function(t,e){var i=v(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!S.isPlainObject(t))S.each(t,(function(){s(this.name,this.value)}));else for(i in t)De(i,t[i],e,s);return n.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=S.prop(this,"elements");return t?S.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!S(this).is(":disabled")&&Me.test(this.nodeName)&&!Ee.test(t)&&(this.checked||!mt.test(t))})).map((function(t,e){var i=S(this).val();return null==i?null:Array.isArray(i)?S.map(i,(function(t){return{name:e.name,value:t.replace(Ie,"\r\n")}})):{name:e.name,value:i.replace(Ie,"\r\n")}})).get()}});var Le=/%20/g,Ne=/#.*$/,Oe=/([?&])_=[^&]*/,Re=/^(.*?):[ \t]*([^\r\n]*)$/gm,Fe=/^(?:GET|HEAD)$/,Be=/^\/\//,Ve={},je={},ze="*/".concat("*"),Ue=_.createElement("a");function qe(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,s=0,r=e.toLowerCase().match(B)||[];if(v(i))for(;n=r[s++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function He(t,e,i,n){var s={},r=t===je;function o(a){var l;return s[a]=!0,S.each(t[a]||[],(function(t,a){var h=a(e,i,n);return"string"!=typeof h||r||s[h]?r?!(l=h):void 0:(e.dataTypes.unshift(h),o(h),!1)})),l}return o(e.dataTypes[0])||!s["*"]&&o("*")}function Ge(t,e){var i,n,s=S.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((s[i]?t:n||(n={}))[i]=e[i]);return n&&S.extend(!0,t,n),t}Ue.href=Pe.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Pe.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Pe.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ze,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ge(Ge(t,S.ajaxSettings),e):Ge(S.ajaxSettings,t)},ajaxPrefilter:qe(Ve),ajaxTransport:qe(je),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,s,r,o,a,l,h,u,c,d,p=S.ajaxSetup({},e),f=p.context||p,g=p.context&&(f.nodeType||f.jquery)?S(f):S.event,m=S.Deferred(),v=S.Callbacks("once memory"),b=p.statusCode||{},y={},w={},x="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(h){if(!o)for(o={};e=Re.exec(r);)o[e[1].toLowerCase()+" "]=(o[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=o[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return h?r:null},setRequestHeader:function(t,e){return null==h&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,y[t]=e),this},overrideMimeType:function(t){return null==h&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(h)C.always(t[C.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||x;return i&&i.abort(e),P(0,e),this}};if(m.promise(C),p.url=((t||p.url||Pe.href)+"").replace(Be,Pe.protocol+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(B)||[""],null==p.crossDomain){l=_.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=Ue.protocol+"//"+Ue.host!=l.protocol+"//"+l.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=S.param(p.data,p.traditional)),He(Ve,p,e,C),h)return C;for(c in(u=S.event&&p.global)&&0==S.active++&&S.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Fe.test(p.type),s=p.url.replace(Ne,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Le,"+")):(d=p.url.slice(s.length),p.data&&(p.processData||"string"==typeof p.data)&&(s+=(Te.test(s)?"&":"?")+p.data,delete p.data),!1===p.cache&&(s=s.replace(Oe,"$1"),d=(Te.test(s)?"&":"?")+"_="+ke.guid+++d),p.url=s+d),p.ifModified&&(S.lastModified[s]&&C.setRequestHeader("If-Modified-Since",S.lastModified[s]),S.etag[s]&&C.setRequestHeader("If-None-Match",S.etag[s])),(p.data&&p.hasContent&&!1!==p.contentType||e.contentType)&&C.setRequestHeader("Content-Type",p.contentType),C.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+ze+"; q=0.01":""):p.accepts["*"]),p.headers)C.setRequestHeader(c,p.headers[c]);if(p.beforeSend&&(!1===p.beforeSend.call(f,C,p)||h))return C.abort();if(x="abort",v.add(p.complete),C.done(p.success),C.fail(p.error),i=He(je,p,e,C)){if(C.readyState=1,u&&g.trigger("ajaxSend",[C,p]),h)return C;p.async&&p.timeout>0&&(a=n.setTimeout((function(){C.abort("timeout")}),p.timeout));try{h=!1,i.send(y,P)}catch(t){if(h)throw t;P(-1,t)}}else P(-1,"No Transport");function P(t,e,o,l){var c,d,_,y,w,x=e;h||(h=!0,a&&n.clearTimeout(a),i=void 0,r=l||"",C.readyState=t>0?4:0,c=t>=200&&t<300||304===t,o&&(y=function(t,e,i){for(var n,s,r,o,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(s in a)if(a[s]&&a[s].test(n)){l.unshift(s);break}if(l[0]in i)r=l[0];else{for(s in i){if(!l[0]||t.converters[s+" "+l[0]]){r=s;break}o||(o=s)}r=r||o}if(r)return r!==l[0]&&l.unshift(r),i[r]}(p,C,o)),!c&&S.inArray("script",p.dataTypes)>-1&&(p.converters["text script"]=function(){}),y=function(t,e,i,n){var s,r,o,a,l,h={},u=t.dataTypes.slice();if(u[1])for(o in t.converters)h[o.toLowerCase()]=t.converters[o];for(r=u.shift();r;)if(t.responseFields[r]&&(i[t.responseFields[r]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(o=h[l+" "+r]||h["* "+r]))for(s in h)if((a=s.split(" "))[1]===r&&(o=h[l+" "+a[0]]||h["* "+a[0]])){!0===o?o=h[s]:!0!==h[s]&&(r=a[0],u.unshift(a[1]));break}if(!0!==o)if(o&&t.throws)e=o(e);else try{e=o(e)}catch(t){return{state:"parsererror",error:o?t:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}(p,y,C,c),c?(p.ifModified&&((w=C.getResponseHeader("Last-Modified"))&&(S.lastModified[s]=w),(w=C.getResponseHeader("etag"))&&(S.etag[s]=w)),204===t||"HEAD"===p.type?x="nocontent":304===t?x="notmodified":(x=y.state,d=y.data,c=!(_=y.error))):(_=x,!t&&x||(x="error",t<0&&(t=0))),C.status=t,C.statusText=(e||x)+"",c?m.resolveWith(f,[d,x,C]):m.rejectWith(f,[C,x,_]),C.statusCode(b),b=void 0,u&&g.trigger(c?"ajaxSuccess":"ajaxError",[C,p,c?d:_]),v.fireWith(f,[C,x]),u&&(g.trigger("ajaxComplete",[C,p]),--S.active||S.event.trigger("ajaxStop")))}return C},getJSON:function(t,e,i){return S.get(t,e,i,"json")},getScript:function(t,e){return S.get(t,void 0,e,"script")}}),S.each(["get","post"],(function(t,e){S[e]=function(t,i,n,s){return v(i)&&(s=s||n,n=i,i=void 0),S.ajax(S.extend({url:t,type:e,dataType:s,data:i,success:n},S.isPlainObject(t)&&t))}})),S.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),S._evalUrl=function(t,e,i){return S.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){S.globalEval(t,e,i)}})},S.fn.extend({wrapAll:function(t){var e;return this[0]&&(v(t)&&(t=t.call(this[0])),e=S(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return v(t)?this.each((function(e){S(this).wrapInner(t.call(this,e))})):this.each((function(){var e=S(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)}))},wrap:function(t){var e=v(t);return this.each((function(i){S(this).wrapAll(e?t.call(this,i):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){S(this).replaceWith(this.childNodes)})),this}}),S.expr.pseudos.hidden=function(t){return!S.expr.pseudos.visible(t)},S.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var We={0:200,1223:204},Ke=S.ajaxSettings.xhr();m.cors=!!Ke&&"withCredentials"in Ke,m.ajax=Ke=!!Ke,S.ajaxTransport((function(t){var e,i;if(m.cors||Ke&&!t.crossDomain)return{send:function(s,r){var o,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)a[o]=t.xhrFields[o];for(o in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||s["X-Requested-With"]||(s["X-Requested-With"]="XMLHttpRequest"),s)a.setRequestHeader(o,s[o]);e=function(t){return function(){e&&(e=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r(We[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),i=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout((function(){e&&i()}))},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),S.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return S.globalEval(t),t}}}),S.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),S.ajaxTransport("script",(function(t){var e,i;if(t.crossDomain||t.scriptAttrs)return{send:function(n,s){e=S("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&s("error"===t.type?404:200,t.type)}),_.head.appendChild(e[0])},abort:function(){i&&i()}}}));var Qe,Xe=[],Ye=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Xe.pop()||S.expando+"_"+ke.guid++;return this[t]=!0,t}}),S.ajaxPrefilter("json jsonp",(function(t,e,i){var s,r,o,a=!1!==t.jsonp&&(Ye.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ye.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return s=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Ye,"$1"+s):!1!==t.jsonp&&(t.url+=(Te.test(t.url)?"&":"?")+t.jsonp+"="+s),t.converters["script json"]=function(){return o||S.error(s+" was not called"),o[0]},t.dataTypes[0]="json",r=n[s],n[s]=function(){o=arguments},i.always((function(){void 0===r?S(n).removeProp(s):n[s]=r,t[s]&&(t.jsonpCallback=e.jsonpCallback,Xe.push(s)),o&&v(r)&&r(o[0]),o=r=void 0})),"script"})),m.createHTMLDocument=((Qe=_.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Qe.childNodes.length),S.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(m.createHTMLDocument?((n=(e=_.implementation.createHTMLDocument("")).createElement("base")).href=_.location.href,e.head.appendChild(n)):e=_),r=!i&&[],(s=M.exec(t))?[e.createElement(s[1])]:(s=Ct([t],e,r),r&&r.length&&S(r).remove(),S.merge([],s.childNodes)));var n,s,r},S.fn.load=function(t,e,i){var n,s,r,o=this,a=t.indexOf(" ");return a>-1&&(n=_e(t.slice(a)),t=t.slice(0,a)),v(e)?(i=e,e=void 0):e&&"object"==typeof e&&(s="POST"),o.length>0&&S.ajax({url:t,type:s||"GET",dataType:"html",data:e}).done((function(t){r=arguments,o.html(n?S("<div>").append(S.parseHTML(t)).find(n):t)})).always(i&&function(t,e){o.each((function(){i.apply(this,r||[t.responseText,e,t])}))}),this},S.expr.pseudos.animated=function(t){return S.grep(S.timers,(function(e){return t===e.elem})).length},S.offset={setOffset:function(t,e,i){var n,s,r,o,a,l,h=S.css(t,"position"),u=S(t),c={};"static"===h&&(t.style.position="relative"),a=u.offset(),r=S.css(t,"top"),l=S.css(t,"left"),("absolute"===h||"fixed"===h)&&(r+l).indexOf("auto")>-1?(o=(n=u.position()).top,s=n.left):(o=parseFloat(r)||0,s=parseFloat(l)||0),v(e)&&(e=e.call(t,i,S.extend({},a))),null!=e.top&&(c.top=e.top-a.top+o),null!=e.left&&(c.left=e.left-a.left+s),"using"in e?e.using.call(t,c):("number"==typeof c.top&&(c.top+="px"),"number"==typeof c.left&&(c.left+="px"),u.css(c))}},S.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){S.offset.setOffset(this,t,e)}));var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,n=this[0],s={top:0,left:0};if("fixed"===S.css(n,"position"))e=n.getBoundingClientRect();else{for(e=this.offset(),i=n.ownerDocument,t=n.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===S.css(t,"position");)t=t.parentNode;t&&t!==n&&1===t.nodeType&&((s=S(t).offset()).top+=S.css(t,"borderTopWidth",!0),s.left+=S.css(t,"borderLeftWidth",!0))}return{top:e.top-s.top-S.css(n,"marginTop",!0),left:e.left-s.left-S.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===S.css(t,"position");)t=t.offsetParent;return t||ot}))}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var i="pageYOffset"===e;S.fn[t]=function(n){return G(this,(function(t,n,s){var r;if(b(t)?r=t:9===t.nodeType&&(r=t.defaultView),void 0===s)return r?r[e]:t[n];r?r.scrollTo(i?r.pageXOffset:s,i?s:r.pageYOffset):t[n]=s}),t,n,arguments.length)}})),S.each(["top","left"],(function(t,e){S.cssHooks[e]=Kt(m.pixelPosition,(function(t,i){if(i)return i=Wt(t,e),Ut.test(i)?S(t).position()[e]+"px":i}))})),S.each({Height:"height",Width:"width"},(function(t,e){S.each({padding:"inner"+t,content:e,"":"outer"+t},(function(i,n){S.fn[n]=function(s,r){var o=arguments.length&&(i||"boolean"!=typeof s),a=i||(!0===s||!0===r?"margin":"border");return G(this,(function(e,i,s){var r;return b(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===s?S.css(e,i,a):S.style(e,i,s,a)}),e,o?s:void 0,o)}}))})),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){S.fn[e]=function(t){return this.on(e,t)}})),S.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){S.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}));var Je=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;S.proxy=function(t,e){var i,n,s;if("string"==typeof e&&(i=t[e],e=t,t=i),v(t))return n=a.call(arguments,2),s=function(){return t.apply(e||this,n.concat(a.call(arguments)))},s.guid=t.guid=t.guid||S.guid++,s},S.holdReady=function(t){t?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=E,S.isFunction=v,S.isWindow=b,S.camelCase=X,S.type=x,S.now=Date.now,S.isNumeric=function(t){var e=S.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},S.trim=function(t){return null==t?"":(t+"").replace(Je,"")},void 0===(i=function(){return S}.apply(e,[]))||(t.exports=i);var Ze=n.jQuery,$e=n.$;return S.noConflict=function(t){return n.$===S&&(n.$=$e),t&&n.jQuery===S&&(n.jQuery=Ze),S},void 0===s&&(n.jQuery=n.$=S),S}))},267:function(t,e,i){var n,s,r;(function(o,a){var l=(o=o||i(158)).window,h=o.document,u=new function(){var t=/^(statics|enumerable|beans|preserve)$/,e=[],i=e.slice,n=Object.create,s=Object.getOwnPropertyDescriptor,r=Object.defineProperty,o=e.forEach||function(t,e){for(var i=0,n=this.length;i<n;i++)t.call(e,this[i],i,this)},l=function(t,e){for(var i in this)this.hasOwnProperty(i)&&t.call(e,this[i],i,this)},h=Object.assign||function(t){for(var e=1,i=arguments.length;e<i;e++){var n=arguments[e];for(var s in n)n.hasOwnProperty(s)&&(t[s]=n[s])}return t},u=function(t,e,i){if(t){var n=s(t,"length");(n&&"number"==typeof n.value?o:l).call(t,e,i=i||t)}return i};function c(e,i,n,o,a){var l={};function h(t,h){"string"==typeof(h=h||(h=s(i,t))&&(h.get?h:h.value))&&"#"===h[0]&&(h=e[h.substring(1)]||h);var u,c="function"==typeof h,p=h,f=a||c&&!h.base?h&&h.get?t in e:e[t]:null;a&&f||(c&&f&&(h.base=f),c&&!1!==o&&(u=t.match(/^([gs]et|is)(([A-Z])(.*))$/))&&(l[u[3].toLowerCase()+u[4]]=u[2]),p&&!c&&p.get&&"function"==typeof p.get&&d.isPlainObject(p)||(p={value:p,writable:!0}),(s(e,t)||{configurable:!0}).configurable&&(p.configurable=!0,p.enumerable=null!=n?n:!u),r(e,t,p))}if(i){for(var u in i)i.hasOwnProperty(u)&&!t.test(u)&&h(u);for(var u in l){var c=l[u],p=e["set"+c],f=e["get"+c]||p&&e["is"+c];!f||!0!==o&&0!==f.length||h(u,{get:f,set:p})}}return e}function d(){for(var t=0,e=arguments.length;t<e;t++){var i=arguments[t];i&&h(this,i)}return this}return c(d,{inject:function(t){if(t){var e=!0===t.statics?t:t.statics,i=t.beans,n=t.preserve;e!==t&&c(this.prototype,t,t.enumerable,i,n),c(this,e,null,i,n)}for(var s=1,r=arguments.length;s<r;s++)this.inject(arguments[s]);return this},extend:function(){for(var t,e,i,s=this,o=0,a=arguments.length;o<a&&(!t||!e);o++)i=arguments[o],t=t||i.initialize,e=e||i.prototype;return t=t||function(){s.apply(this,arguments)},e=t.prototype=e||n(this.prototype),r(e,"constructor",{value:t,writable:!0,configurable:!0}),c(t,this),arguments.length&&this.inject.apply(t,arguments),t.base=s,t}}).inject({enumerable:!1,initialize:d,set:d,inject:function(){for(var t=0,e=arguments.length;t<e;t++){var i=arguments[t];i&&c(this,i,i.enumerable,i.beans,i.preserve)}return this},extend:function(){var t=n(this);return t.inject.apply(t,arguments)},each:function(t,e){return u(this,t,e)},clone:function(){return new this.constructor(this)},statics:{set:h,each:u,create:n,define:r,describe:s,clone:function(t){return h(new t.constructor,t)},isPlainObject:function(t){var e=null!=t&&t.constructor;return e&&(e===Object||e===d||"Object"===e.name)},pick:function(t,e){return t!==a?t:e},slice:function(t,e,n){return i.call(t,e,n)}}})};t.exports=u,u.inject({enumerable:!1,toString:function(){return null!=this._id?(this._class||"Object")+(this._name?" '"+this._name+"'":" @"+this._id):"{ "+u.each(this,(function(t,e){if(!/^_/.test(e)){var i=typeof t;this.push(e+": "+("number"===i?g.instance.number(t):"string"===i?"'"+t+"'":t))}}),[]).join(", ")+" }"},getClassName:function(){return this._class||""},importJSON:function(t){return u.importJSON(t,this)},exportJSON:function(t){return u.exportJSON(this,t)},toJSON:function(){return u.serialize(this)},set:function(t,e){return t&&u.filter(this,t,e,this._prioritize),this}},{beans:!1,statics:{exports:{},extend:function t(){var e=t.base.apply(this,arguments),i=e.prototype._class;return i&&!u.exports[i]&&(u.exports[i]=e),e},equals:function(t,e){if(t===e)return!0;if(t&&t.equals)return t.equals(e);if(e&&e.equals)return e.equals(t);if(t&&e&&"object"==typeof t&&"object"==typeof e){if(Array.isArray(t)&&Array.isArray(e)){if((i=t.length)!==e.length)return!1;for(;i--;)if(!u.equals(t[i],e[i]))return!1}else{var i,n=Object.keys(t);if((i=n.length)!==Object.keys(e).length)return!1;for(;i--;){var s=n[i];if(!e.hasOwnProperty(s)||!u.equals(t[s],e[s]))return!1}}return!0}return!1},read:function(t,e,i,n){if(this===u){var s=this.peek(t,e);return t.__index++,s}var r=this.prototype,o=r._readIndex,l=e||o&&t.__index||0,h=t.length,c=t[l];if(n=n||h-l,c instanceof this||i&&i.readNull&&null==c&&n<=1)return o&&(t.__index=l+1),c&&i&&i.clone?c.clone():c;if(c=u.create(r),o&&(c.__read=!0),c=c.initialize.apply(c,l>0||l+n<h?u.slice(t,l,l+n):t)||c,o){t.__index=l+c.__read;var d=c.__filtered;d&&(t.__filtered=d,c.__filtered=a),c.__read=a}return c},peek:function(t,e){return t[t.__index=e||t.__index||0]},remain:function(t){return t.length-(t.__index||0)},readList:function(t,e,i,n){for(var s,r=[],o=e||0,a=n?o+n:t.length,l=o;l<a;l++)r.push(Array.isArray(s=t[l])?this.read(s,0,i):this.read(t,l,i,1));return r},readNamed:function(t,e,i,n,s){var r=this.getNamed(t,e),o=r!==a;if(o){var l=t.__filtered;if(!l){var h=this.getSource(t);(l=t.__filtered=u.create(h)).__unfiltered=h}l[e]=a}return this.read(o?[r]:t,i,n,s)},readSupported:function(t,e){var i=this.getSource(t),n=this,s=!1;return i&&Object.keys(i).forEach((function(i){if(i in e){var r=n.readNamed(t,i);r!==a&&(e[i]=r),s=!0}})),s},getSource:function(t){var e=t.__source;if(e===a){var i=1===t.length&&t[0];e=t.__source=i&&u.isPlainObject(i)?i:null}return e},getNamed:function(t,e){var i=this.getSource(t);if(i)return e?i[e]:t.__filtered||i},hasNamed:function(t,e){return!!this.getNamed(t,e)},filter:function(t,e,i,n){var s;function r(n){if(!(i&&n in i||s&&n in s)){var r=e[n];r!==a&&(t[n]=r)}}if(n){for(var o,l={},h=0,u=n.length;h<u;h++)(o=n[h])in e&&(r(o),l[o]=!0);s=l}return Object.keys(e.__unfiltered||e).forEach(r),t},isPlainValue:function(t,e){return u.isPlainObject(t)||Array.isArray(t)||e&&"string"==typeof t},serialize:function(t,e,i,n){e=e||{};var s,r=!n;if(r&&(e.formatter=new g(e.precision),n={length:0,definitions:{},references:{},add:function(t,e){var i="#"+t._id,n=this.references[i];if(!n){this.length++;var s=e.call(t),r=t._class;r&&s[0]!==r&&s.unshift(r),this.definitions[i]=s,n=this.references[i]=[i]}return n}}),t&&t._serialize){s=t._serialize(e,n);var o=t._class;!o||t._compactSerialize||!r&&i||s[0]===o||s.unshift(o)}else if(Array.isArray(t)){s=[];for(var a=0,l=t.length;a<l;a++)s[a]=u.serialize(t[a],e,i,n)}else if(u.isPlainObject(t)){s={};var h=Object.keys(t);for(a=0,l=h.length;a<l;a++){var c=h[a];s[c]=u.serialize(t[c],e,i,n)}}else s="number"==typeof t?e.formatter.number(t,e.precision):t;return r&&n.length>0?[["dictionary",n.definitions],s]:s},deserialize:function(t,e,i,n,s){var r=t,o=!i,a=o&&t&&t.length&&"dictionary"===t[0][0];if(i=i||{},Array.isArray(t)){var l=t[0],h="dictionary"===l;if(1==t.length&&/^#/.test(l))return i.dictionary[l];r=[];for(var c=(l=u.exports[l])?1:0,d=t.length;c<d;c++)r.push(u.deserialize(t[c],e,i,h,a));if(l){var p=r;r=e?e(l,p,o||s):new l(p)}}else if(u.isPlainObject(t))for(var f in r={},n&&(i.dictionary=r),t)r[f]=u.deserialize(t[f],e,i);return a?r[1]:r},exportJSON:function(t,e){var i=u.serialize(t,e);return e&&0==e.asString?i:JSON.stringify(i)},importJSON:function(t,e){return u.deserialize("string"==typeof t?JSON.parse(t):t,(function(t,i,n){var s=n&&e&&e.constructor===t,r=s?e:u.create(t.prototype);if(1===i.length&&r instanceof T&&(s||!(r instanceof I))){var o=i[0];u.isPlainObject(o)&&(o.insert=!1,s&&(i=i.concat([{insert:!0}])))}return(s?r.set:t).apply(r,i),s&&(e=null),r}))},push:function(t,e){var i=e.length;if(i<4096)t.push.apply(t,e);else{var n=t.length;t.length+=i;for(var s=0;s<i;s++)t[n+s]=e[s]}return t},splice:function(t,e,i,n){var s=e&&e.length,r=i===a;(i=r?t.length:i)>t.length&&(i=t.length);for(var o=0;o<s;o++)e[o]._index=i+o;if(r)return u.push(t,e),[];var l=[i,n];e&&u.push(l,e);for(var h=t.splice.apply(t,l),c=(o=0,h.length);o<c;o++)h[o]._index=a;for(o=i+s,c=t.length;o<c;o++)t[o]._index=o;return h},capitalize:function(t){return t.replace(/\b[a-z]/g,(function(t){return t.toUpperCase()}))},camelize:function(t){return t.replace(/-(.)/g,(function(t,e){return e.toUpperCase()}))},hyphenate:function(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}}});var c={on:function(t,e){if("string"!=typeof t)u.each(t,(function(t,e){this.on(e,t)}),this);else{var i=this._eventTypes,n=i&&i[t],s=this._callbacks=this._callbacks||{};-1===(s=s[t]=s[t]||[]).indexOf(e)&&(s.push(e),n&&n.install&&1===s.length&&n.install.call(this,t))}return this},off:function(t,e){if("string"==typeof t){var i,n=this._eventTypes,s=n&&n[t],r=this._callbacks&&this._callbacks[t];return r&&(!e||-1!==(i=r.indexOf(e))&&1===r.length?(s&&s.uninstall&&s.uninstall.call(this,t),delete this._callbacks[t]):-1!==i&&r.splice(i,1)),this}u.each(t,(function(t,e){this.off(e,t)}),this)},once:function(t,e){return this.on(t,(function i(){e.apply(this,arguments),this.off(t,i)}))},emit:function(t,e){var i=this._callbacks&&this._callbacks[t];if(!i)return!1;var n=u.slice(arguments,1),s=e&&e.target&&!e.currentTarget;i=i.slice(),s&&(e.currentTarget=this);for(var r=0,o=i.length;r<o;r++)if(0==i[r].apply(this,n)){e&&e.stop&&e.stop();break}return s&&delete e.currentTarget,!0},responds:function(t){return!(!this._callbacks||!this._callbacks[t])},attach:"#on",detach:"#off",fire:"#emit",_installEvents:function(t){var e=this._eventTypes,i=this._callbacks,n=t?"install":"uninstall";if(e)for(var s in i)if(i[s].length>0){var r=e[s],o=r&&r[n];o&&o.call(this,s)}},statics:{inject:function t(e){var i=e._events;if(i){var n={};u.each(i,(function(t,i){var s="string"==typeof t,r=s?t:i,o=u.capitalize(r),a=r.substring(2).toLowerCase();n[a]=s?{}:t,r="_"+r,e["get"+o]=function(){return this[r]},e["set"+o]=function(t){var e=this[r];e&&this.off(a,e),t&&this.on(a,t),this[r]=t}})),e._eventTypes=n}return t.base.apply(this,arguments)}}},d=u.extend({_class:"PaperScope",initialize:function t(){dt=this,this.settings=new u({applyMatrix:!0,insertItems:!0,handleSize:4,hitTolerance:0}),this.project=null,this.projects=[],this.tools=[],this._id=t._id++,t._scopes[this._id]=this;var e=t.prototype;if(!this.support){var i=lt.getContext(1,1)||{};e.support={nativeDash:"setLineDash"in i||"mozDash"in i,nativeBlendModes:ht.nativeModes},lt.release(i)}if(!this.agent){var n=o.navigator.userAgent.toLowerCase(),s=(/(darwin|win|mac|linux|freebsd|sunos)/.exec(n)||[])[0],r="darwin"===s?"mac":s,a=e.agent=e.browser={platform:r};r&&(a[r]=!0),n.replace(/(opera|chrome|safari|webkit|firefox|msie|trident|atom|node|jsdom)\/?\s*([.\d]+)(?:.*version\/([.\d]+))?(?:.*rv\:v?([.\d]+))?/g,(function(t,e,i,n,s){if(!a.chrome){var r="opera"===e?n:/^(node|trident)$/.test(e)?s:i;a.version=r,a.versionNumber=parseFloat(r),e={trident:"msie",jsdom:"node"}[e]||e,a.name=e,a[e]=!0}})),a.chrome&&delete a.webkit,a.atom&&delete a.chrome}},version:"0.12.15",getView:function(){var t=this.project;return t&&t._view},getPaper:function(){return this},execute:function(t,e){var i=dt.PaperScript.execute(t,this,e);return Z.updateFocus(),i},install:function(t){var e=this;for(var i in u.each(["project","view","tool"],(function(i){u.define(t,i,{configurable:!0,get:function(){return e[i]}})})),this)!/^_/.test(i)&&this[i]&&(t[i]=this[i])},setup:function(t){return dt=this,this.project=new k(t),this},createCanvas:function(t,e){return lt.getCanvas(t,e)},activate:function(){dt=this},clear:function(){for(var t=this.projects,e=this.tools,i=t.length-1;i>=0;i--)t[i].remove();for(i=e.length-1;i>=0;i--)e[i].remove()},remove:function(){this.clear(),delete d._scopes[this._id]},statics:new function(){function t(t){return t+="Attribute",function(e,i){return e[t](i)||e[t]("data-paper-"+i)}}return{_scopes:{},_id:0,get:function(t){return this._scopes[t]||null},getAttribute:t("get"),hasAttribute:t("has")}}}),p=u.extend(c,{initialize:function(t){this._scope=dt,this._index=this._scope[this._list].push(this)-1,!t&&this._scope[this._reference]||this.activate()},activate:function(){if(!this._scope)return!1;var t=this._scope[this._reference];return t&&t!==this&&t.emit("deactivate"),this._scope[this._reference]=this,this.emit("activate",t),!0},isActive:function(){return this._scope[this._reference]===this},remove:function(){return null!=this._index&&(u.splice(this._scope[this._list],null,this._index,1),this._scope[this._reference]==this&&(this._scope[this._reference]=null),this._scope=null,!0)},getView:function(){return this._scope.getView()}}),f={findItemBoundsCollisions:function(t,e,i){function n(t){for(var e=new Array(t.length),i=0;i<t.length;i++){var n=t[i].getBounds();e[i]=[n.left,n.top,n.right,n.bottom]}return e}var s=n(t),r=e&&e!==t?n(e):s;return this.findBoundsCollisions(s,r,i||0)},findCurveBoundsCollisions:function(t,e,i,n){function s(t){for(var e=Math.min,i=Math.max,n=new Array(t.length),s=0;s<t.length;s++){var r=t[s];n[s]=[e(r[0],r[2],r[4],r[6]),e(r[1],r[3],r[5],r[7]),i(r[0],r[2],r[4],r[6]),i(r[1],r[3],r[5],r[7])]}return n}var r=s(t),o=e&&e!==t?s(e):r;if(n){for(var a=this.findBoundsCollisions(r,o,i||0,!1,!0),l=this.findBoundsCollisions(r,o,i||0,!0,!0),h=[],u=0,c=a.length;u<c;u++)h[u]={hor:a[u],ver:l[u]};return h}return this.findBoundsCollisions(r,o,i||0)},findBoundsCollisions:function(t,e,i,n,s){var r=!e||t===e,o=r?t:t.concat(e),a=t.length,l=o.length;function h(t,e,i){for(var n=0,s=t.length;n<s;){var r=s+n>>>1;o[t[r]][e]<i?n=r+1:s=r}return n-1}for(var u=n?1:0,c=u+2,d=n?0:1,p=d+2,f=new Array(l),g=0;g<l;g++)f[g]=g;f.sort((function(t,e){return o[t][u]-o[e][u]}));var m=[],v=new Array(a);for(g=0;g<l;g++){var b=f[g],_=o[b],y=r?b:b-a,w=b<a,x=r||!w,C=w?[]:null;if(m.length){var S=h(m,c,_[u]-i)+1;if(m.splice(0,S),r&&s){C=C.concat(m);for(var P=0;P<m.length;P++)v[A=m[P]].push(y)}else{var k=_[p],T=_[d];for(P=0;P<m.length;P++){var A=m[P],I=o[A],E=A<a,M=r||A>=a;(s||(w&&M||x&&E)&&k>=I[d]-i&&T<=I[p]+i)&&(w&&M&&C.push(r?A:A-a),x&&E&&v[A].push(y))}}}if(w&&(t===e&&C.push(b),v[b]=C),m.length){var D=h(m,c,_[c]);m.splice(D+1,0,b)}else m.push(b)}for(g=0;g<v.length;g++){var L=v[g];L&&L.sort((function(t,e){return t-e}))}return v}},g=u.extend({initialize:function(t){this.precision=u.pick(t,5),this.multiplier=Math.pow(10,this.precision)},number:function(t){return this.precision<16?Math.round(t*this.multiplier)/this.multiplier:t},pair:function(t,e,i){return this.number(t)+(i||",")+this.number(e)},point:function(t,e){return this.number(t.x)+(e||",")+this.number(t.y)},size:function(t,e){return this.number(t.width)+(e||",")+this.number(t.height)},rectangle:function(t,e){return this.point(t,e)+(e||",")+this.size(t,e)}});g.instance=new g;var m=new function(){var t=[[.5773502691896257],[0,.7745966692414834],[.33998104358485626,.8611363115940526],[0,.5384693101056831,.906179845938664],[.2386191860831969,.6612093864662645,.932469514203152],[0,.4058451513773972,.7415311855993945,.9491079123427585],[.1834346424956498,.525532409916329,.7966664774136267,.9602898564975363],[0,.3242534234038089,.6133714327005904,.8360311073266358,.9681602395076261],[.14887433898163122,.4333953941292472,.6794095682990244,.8650633666889845,.9739065285171717],[0,.26954315595234496,.5190961292068118,.7301520055740494,.8870625997680953,.978228658146057],[.1252334085114689,.3678314989981802,.5873179542866175,.7699026741943047,.9041172563704749,.9815606342467192],[0,.2304583159551348,.44849275103644687,.6423493394403402,.8015780907333099,.9175983992229779,.9841830547185881],[.10805494870734367,.31911236892788974,.5152486363581541,.6872929048116855,.827201315069765,.9284348836635735,.9862838086968123],[0,.20119409399743451,.3941513470775634,.5709721726085388,.7244177313601701,.8482065834104272,.937273392400706,.9879925180204854],[.09501250983763744,.2816035507792589,.45801677765722737,.6178762444026438,.755404408355003,.8656312023878318,.9445750230732326,.9894009349916499]],e=[[1],[.8888888888888888,.5555555555555556],[.6521451548625461,.34785484513745385],[.5688888888888889,.47862867049936647,.23692688505618908],[.46791393457269104,.3607615730481386,.17132449237917036],[.4179591836734694,.3818300505051189,.27970539148927664,.1294849661688697],[.362683783378362,.31370664587788727,.22238103445337448,.10122853629037626],[.3302393550012598,.31234707704000286,.26061069640293544,.1806481606948574,.08127438836157441],[.29552422471475287,.26926671930999635,.21908636251598204,.1494513491505806,.06667134430868814],[.2729250867779006,.26280454451024665,.23319376459199048,.18629021092773426,.1255803694649046,.05566856711617366],[.24914704581340277,.2334925365383548,.20316742672306592,.16007832854334622,.10693932599531843,.04717533638651183],[.2325515532308739,.22628318026289723,.2078160475368885,.17814598076194574,.13887351021978725,.09212149983772845,.04048400476531588],[.2152638534631578,.2051984637212956,.18553839747793782,.15720316715819355,.12151857068790319,.08015808715976021,.03511946033175186],[.2025782419255613,.19843148532711158,.1861610000155622,.16626920581699392,.13957067792615432,.10715922046717194,.07036604748810812,.03075324199611727],[.1894506104550685,.18260341504492358,.16915651939500254,.14959598881657674,.12462897125553388,.09515851168249279,.062253523938647894,.027152459411754096]],i=Math.abs,n=Math.sqrt,s=Math.pow,r=Math.log2||function(t){return Math.log(t)*Math.LOG2E},o=1e-12,a=112e-18;function l(t,e,i){return t<e?e:t>i?i:t}function h(t,e,n){function s(t){var e=134217729*t,i=t-e+e;return[i,t-i]}var r=e*e-t*n,o=e*e+t*n;if(3*i(r)<o){var a=s(t),l=s(e),h=s(n),u=e*e,c=t*n;r=u-c+(l[0]*l[0]-u+2*l[0]*l[1]+l[1]*l[1]-(a[0]*h[0]-c+a[0]*h[1]+a[1]*h[0]+a[1]*h[1]))}return r}function u(){var t=Math.max.apply(Math,arguments);return t&&(t<1e-8||t>1e8)?s(2,-Math.round(r(t))):0}return{EPSILON:o,MACHINE_EPSILON:a,CURVETIME_EPSILON:1e-8,GEOMETRIC_EPSILON:1e-7,TRIGONOMETRIC_EPSILON:1e-8,KAPPA:4*(n(2)-1)/3,isZero:function(t){return t>=-1e-12&&t<=o},isMachineZero:function(t){return t>=-112e-18&&t<=a},clamp:l,integrate:function(i,n,s,r){for(var o=t[r-2],a=e[r-2],l=.5*(s-n),h=l+n,u=0,c=r+1>>1,d=1&r?a[u++]*i(h):0;u<c;){var p=l*o[u];d+=a[u++]*(i(h+p)+i(h-p))}return l*d},findRoot:function(t,e,n,s,r,o,a){for(var h=0;h<o;h++){var u=t(n),c=u/e(n),d=n-c;if(i(c)<a){n=d;break}u>0?(r=n,n=d<=s?.5*(s+r):d):(s=n,n=d>=r?.5*(s+r):d)}return l(n,s,r)},solveQuadratic:function(t,e,s,r,c,d){var p,f=1/0;if(i(t)<o){if(i(e)<o)return i(s)<o?-1:0;p=-s/e}else{var g=h(t,e*=-.5,s);if(g&&i(g)<a){var m=u(i(t),i(e),i(s));m&&(g=h(t*=m,e*=m,s*=m))}if(g>=-112e-18){var v=g<0?0:n(g),b=e+(e<0?-v:v);0===b?f=-(p=s/t):(p=b/t,f=s/b)}}var _=0,y=null==c,w=c-o,x=d+o;return isFinite(p)&&(y||p>w&&p<x)&&(r[_++]=y?p:l(p,c,d)),f!==p&&isFinite(f)&&(y||f>w&&f<x)&&(r[_++]=y?f:l(f,c,d)),_},solveCubic:function(t,e,r,h,c,d,p){var f,g,v,b,_,y=u(i(t),i(e),i(r),i(h));function w(i){var n=t*(f=i);b=(n+(g=n+e))*f+(v=g*f+r),_=v*f+h}if(y&&(t*=y,e*=y,r*=y,h*=y),i(t)<o)t=e,g=r,v=h,f=1/0;else if(i(h)<o)g=e,v=r,f=0;else{w(-e/t/3);var x=_/t,C=s(i(x),1/3),S=x<0?-1:1,P=-b/t,k=P>0?1.324717957244746*Math.max(C,n(P)):C,T=f-S*k;if(T!==f){do{w(T),T=0===b?f:f-_/b/(1+a)}while(S*T>S*f);i(t)*f*f>i(h/f)&&(g=((v=-h/f)-r)/f)}}var A=m.solveQuadratic(t,g,v,c,d,p),I=null==d;return isFinite(f)&&(0===A||A>0&&f!==c[0]&&f!==c[1])&&(I||f>d-o&&f<p+o)&&(c[A++]=I?f:l(f,d,p)),A}}},v={_id:1,_pools:{},get:function(t){if(t){var e=this._pools[t];return e||(e=this._pools[t]={_id:1}),e._id++}return this._id++}},b=u.extend({_class:"Point",_readIndex:!0,initialize:function(t,e){var i=typeof t,n=this.__read,s=0;if("number"===i){var r="number"==typeof e;this._set(t,r?e:t),n&&(s=r?2:1)}else if("undefined"===i||null===t)this._set(0,0),n&&(s=null===t?1:0);else{var o="string"===i?t.split(/[\s,]+/)||[]:t;s=1,Array.isArray(o)?this._set(+o[0],+(o.length>1?o[1]:o[0])):"x"in o?this._set(o.x||0,o.y||0):"width"in o?this._set(o.width||0,o.height||0):"angle"in o?(this._set(o.length||0,0),this.setAngle(o.angle||0)):(this._set(0,0),s=0)}return n&&(this.__read=s),this},set:"#initialize",_set:function(t,e){return this.x=t,this.y=e,this},equals:function(t){return this===t||t&&(this.x===t.x&&this.y===t.y||Array.isArray(t)&&this.x===t[0]&&this.y===t[1])||!1},clone:function(){return new b(this.x,this.y)},toString:function(){var t=g.instance;return"{ x: "+t.number(this.x)+", y: "+t.number(this.y)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.x),e.number(this.y)]},getLength:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},setLength:function(t){if(this.isZero()){var e=this._angle||0;this._set(Math.cos(e)*t,Math.sin(e)*t)}else{var i=t/this.getLength();m.isZero(i)&&this.getAngle(),this._set(this.x*i,this.y*i)}},getAngle:function(){return 180*this.getAngleInRadians.apply(this,arguments)/Math.PI},setAngle:function(t){this.setAngleInRadians.call(this,t*Math.PI/180)},getAngleInDegrees:"#getAngle",setAngleInDegrees:"#setAngle",getAngleInRadians:function(){if(arguments.length){var t=b.read(arguments),e=this.getLength()*t.getLength();if(m.isZero(e))return NaN;var i=this.dot(t)/e;return Math.acos(i<-1?-1:i>1?1:i)}return this.isZero()?this._angle||0:this._angle=Math.atan2(this.y,this.x)},setAngleInRadians:function(t){if(this._angle=t,!this.isZero()){var e=this.getLength();this._set(Math.cos(t)*e,Math.sin(t)*e)}},getQuadrant:function(){return this.x>=0?this.y>=0?1:4:this.y>=0?2:3}},{beans:!1,getDirectedAngle:function(){var t=b.read(arguments);return 180*Math.atan2(this.cross(t),this.dot(t))/Math.PI},getDistance:function(){var t=arguments,e=b.read(t),i=e.x-this.x,n=e.y-this.y,s=i*i+n*n,r=u.read(t);return r?s:Math.sqrt(s)},normalize:function(t){t===a&&(t=1);var e=this.getLength(),i=0!==e?t/e:0,n=new b(this.x*i,this.y*i);return i>=0&&(n._angle=this._angle),n},rotate:function(t,e){if(0===t)return this.clone();t=t*Math.PI/180;var i=e?this.subtract(e):this,n=Math.sin(t),s=Math.cos(t);return i=new b(i.x*s-i.y*n,i.x*n+i.y*s),e?i.add(e):i},transform:function(t){return t?t._transformPoint(this):this},add:function(){var t=b.read(arguments);return new b(this.x+t.x,this.y+t.y)},subtract:function(){var t=b.read(arguments);return new b(this.x-t.x,this.y-t.y)},multiply:function(){var t=b.read(arguments);return new b(this.x*t.x,this.y*t.y)},divide:function(){var t=b.read(arguments);return new b(this.x/t.x,this.y/t.y)},modulo:function(){var t=b.read(arguments);return new b(this.x%t.x,this.y%t.y)},negate:function(){return new b(-this.x,-this.y)},isInside:function(){return x.read(arguments).contains(this)},isClose:function(){var t=arguments,e=b.read(t),i=u.read(t);return this.getDistance(e)<=i},isCollinear:function(){var t=b.read(arguments);return b.isCollinear(this.x,this.y,t.x,t.y)},isColinear:"#isCollinear",isOrthogonal:function(){var t=b.read(arguments);return b.isOrthogonal(this.x,this.y,t.x,t.y)},isZero:function(){var t=m.isZero;return t(this.x)&&t(this.y)},isNaN:function(){return isNaN(this.x)||isNaN(this.y)},isInQuadrant:function(t){return this.x*(t>1&&t<4?-1:1)>=0&&this.y*(t>2?-1:1)>=0},dot:function(){var t=b.read(arguments);return this.x*t.x+this.y*t.y},cross:function(){var t=b.read(arguments);return this.x*t.y-this.y*t.x},project:function(){var t=b.read(arguments),e=t.isZero()?0:this.dot(t)/t.dot(t);return new b(t.x*e,t.y*e)},statics:{min:function(){var t=arguments,e=b.read(t),i=b.read(t);return new b(Math.min(e.x,i.x),Math.min(e.y,i.y))},max:function(){var t=arguments,e=b.read(t),i=b.read(t);return new b(Math.max(e.x,i.x),Math.max(e.y,i.y))},random:function(){return new b(Math.random(),Math.random())},isCollinear:function(t,e,i,n){return Math.abs(t*n-e*i)<=1e-8*Math.sqrt((t*t+e*e)*(i*i+n*n))},isOrthogonal:function(t,e,i,n){return Math.abs(t*i+e*n)<=1e-8*Math.sqrt((t*t+e*e)*(i*i+n*n))}}},u.each(["round","ceil","floor","abs"],(function(t){var e=Math[t];this[t]=function(){return new b(e(this.x),e(this.y))}}),{})),_=b.extend({initialize:function(t,e,i,n){this._x=t,this._y=e,this._owner=i,this._setter=n},_set:function(t,e,i){return this._x=t,this._y=e,i||this._owner[this._setter](this),this},getX:function(){return this._x},setX:function(t){this._x=t,this._owner[this._setter](this)},getY:function(){return this._y},setY:function(t){this._y=t,this._owner[this._setter](this)},isSelected:function(){return!!(this._owner._selection&this._getSelection())},setSelected:function(t){this._owner._changeSelection(this._getSelection(),t)},_getSelection:function(){return"setPosition"===this._setter?4:0}}),y=u.extend({_class:"Size",_readIndex:!0,initialize:function(t,e){var i=typeof t,n=this.__read,s=0;if("number"===i){var r="number"==typeof e;this._set(t,r?e:t),n&&(s=r?2:1)}else if("undefined"===i||null===t)this._set(0,0),n&&(s=null===t?1:0);else{var o="string"===i?t.split(/[\s,]+/)||[]:t;s=1,Array.isArray(o)?this._set(+o[0],+(o.length>1?o[1]:o[0])):"width"in o?this._set(o.width||0,o.height||0):"x"in o?this._set(o.x||0,o.y||0):(this._set(0,0),s=0)}return n&&(this.__read=s),this},set:"#initialize",_set:function(t,e){return this.width=t,this.height=e,this},equals:function(t){return t===this||t&&(this.width===t.width&&this.height===t.height||Array.isArray(t)&&this.width===t[0]&&this.height===t[1])||!1},clone:function(){return new y(this.width,this.height)},toString:function(){var t=g.instance;return"{ width: "+t.number(this.width)+", height: "+t.number(this.height)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.width),e.number(this.height)]},add:function(){var t=y.read(arguments);return new y(this.width+t.width,this.height+t.height)},subtract:function(){var t=y.read(arguments);return new y(this.width-t.width,this.height-t.height)},multiply:function(){var t=y.read(arguments);return new y(this.width*t.width,this.height*t.height)},divide:function(){var t=y.read(arguments);return new y(this.width/t.width,this.height/t.height)},modulo:function(){var t=y.read(arguments);return new y(this.width%t.width,this.height%t.height)},negate:function(){return new y(-this.width,-this.height)},isZero:function(){var t=m.isZero;return t(this.width)&&t(this.height)},isNaN:function(){return isNaN(this.width)||isNaN(this.height)},statics:{min:function(t,e){return new y(Math.min(t.width,e.width),Math.min(t.height,e.height))},max:function(t,e){return new y(Math.max(t.width,e.width),Math.max(t.height,e.height))},random:function(){return new y(Math.random(),Math.random())}}},u.each(["round","ceil","floor","abs"],(function(t){var e=Math[t];this[t]=function(){return new y(e(this.width),e(this.height))}}),{})),w=y.extend({initialize:function(t,e,i,n){this._width=t,this._height=e,this._owner=i,this._setter=n},_set:function(t,e,i){return this._width=t,this._height=e,i||this._owner[this._setter](this),this},getWidth:function(){return this._width},setWidth:function(t){this._width=t,this._owner[this._setter](this)},getHeight:function(){return this._height},setHeight:function(t){this._height=t,this._owner[this._setter](this)}}),x=u.extend({_class:"Rectangle",_readIndex:!0,beans:!0,initialize:function(t,e,i,n){var s,r=arguments,o=typeof t;if("number"===o?(this._set(t,e,i,n),s=4):"undefined"===o||null===t?(this._set(0,0,0,0),s=null===t?1:0):1===r.length&&(Array.isArray(t)?(this._set.apply(this,t),s=1):t.x!==a||t.width!==a?(this._set(t.x||0,t.y||0,t.width||0,t.height||0),s=1):t.from===a&&t.to===a&&(this._set(0,0,0,0),u.readSupported(r,this)&&(s=1))),s===a){var l,h,c=b.readNamed(r,"from"),d=u.peek(r),p=c.x,f=c.y;if(d&&d.x!==a||u.hasNamed(r,"to")){var g=b.readNamed(r,"to");l=g.x-p,h=g.y-f,l<0&&(p=g.x,l=-l),h<0&&(f=g.y,h=-h)}else{var m=y.read(r);l=m.width,h=m.height}this._set(p,f,l,h),s=r.__index}var v=r.__filtered;return v&&(this.__filtered=v),this.__read&&(this.__read=s),this},set:"#initialize",_set:function(t,e,i,n){return this.x=t,this.y=e,this.width=i,this.height=n,this},clone:function(){return new x(this.x,this.y,this.width,this.height)},equals:function(t){var e=u.isPlainValue(t)?x.read(arguments):t;return e===this||e&&this.x===e.x&&this.y===e.y&&this.width===e.width&&this.height===e.height||!1},toString:function(){var t=g.instance;return"{ x: "+t.number(this.x)+", y: "+t.number(this.y)+", width: "+t.number(this.width)+", height: "+t.number(this.height)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.x),e.number(this.y),e.number(this.width),e.number(this.height)]},getPoint:function(t){return new(t?b:_)(this.x,this.y,this,"setPoint")},setPoint:function(){var t=b.read(arguments);this.x=t.x,this.y=t.y},getSize:function(t){return new(t?y:w)(this.width,this.height,this,"setSize")},_fw:1,_fh:1,setSize:function(){var t=y.read(arguments),e=this._sx,i=this._sy,n=t.width,s=t.height;e&&(this.x+=(this.width-n)*e),i&&(this.y+=(this.height-s)*i),this.width=n,this.height=s,this._fw=this._fh=1},getLeft:function(){return this.x},setLeft:function(t){if(!this._fw){var e=t-this.x;this.width-=.5===this._sx?2*e:e}this.x=t,this._sx=this._fw=0},getTop:function(){return this.y},setTop:function(t){if(!this._fh){var e=t-this.y;this.height-=.5===this._sy?2*e:e}this.y=t,this._sy=this._fh=0},getRight:function(){return this.x+this.width},setRight:function(t){if(!this._fw){var e=t-this.x;this.width=.5===this._sx?2*e:e}this.x=t-this.width,this._sx=1,this._fw=0},getBottom:function(){return this.y+this.height},setBottom:function(t){if(!this._fh){var e=t-this.y;this.height=.5===this._sy?2*e:e}this.y=t-this.height,this._sy=1,this._fh=0},getCenterX:function(){return this.x+this.width/2},setCenterX:function(t){this._fw||.5===this._sx?this.x=t-this.width/2:(this._sx&&(this.x+=2*(t-this.x)*this._sx),this.width=2*(t-this.x)),this._sx=.5,this._fw=0},getCenterY:function(){return this.y+this.height/2},setCenterY:function(t){this._fh||.5===this._sy?this.y=t-this.height/2:(this._sy&&(this.y+=2*(t-this.y)*this._sy),this.height=2*(t-this.y)),this._sy=.5,this._fh=0},getCenter:function(t){return new(t?b:_)(this.getCenterX(),this.getCenterY(),this,"setCenter")},setCenter:function(){var t=b.read(arguments);return this.setCenterX(t.x),this.setCenterY(t.y),this},getArea:function(){return this.width*this.height},isEmpty:function(){return 0===this.width||0===this.height},contains:function(t){return t&&t.width!==a||4===(Array.isArray(t)?t:arguments).length?this._containsRectangle(x.read(arguments)):this._containsPoint(b.read(arguments))},_containsPoint:function(t){var e=t.x,i=t.y;return e>=this.x&&i>=this.y&&e<=this.x+this.width&&i<=this.y+this.height},_containsRectangle:function(t){var e=t.x,i=t.y;return e>=this.x&&i>=this.y&&e+t.width<=this.x+this.width&&i+t.height<=this.y+this.height},intersects:function(){var t=x.read(arguments),e=u.read(arguments)||0;return t.x+t.width>this.x-e&&t.y+t.height>this.y-e&&t.x<this.x+this.width+e&&t.y<this.y+this.height+e},intersect:function(){var t=x.read(arguments),e=Math.max(this.x,t.x),i=Math.max(this.y,t.y),n=Math.min(this.x+this.width,t.x+t.width),s=Math.min(this.y+this.height,t.y+t.height);return new x(e,i,n-e,s-i)},unite:function(){var t=x.read(arguments),e=Math.min(this.x,t.x),i=Math.min(this.y,t.y),n=Math.max(this.x+this.width,t.x+t.width),s=Math.max(this.y+this.height,t.y+t.height);return new x(e,i,n-e,s-i)},include:function(){var t=b.read(arguments),e=Math.min(this.x,t.x),i=Math.min(this.y,t.y),n=Math.max(this.x+this.width,t.x),s=Math.max(this.y+this.height,t.y);return new x(e,i,n-e,s-i)},expand:function(){var t=y.read(arguments),e=t.width,i=t.height;return new x(this.x-e/2,this.y-i/2,this.width+e,this.height+i)},scale:function(t,e){return this.expand(this.width*t-this.width,this.height*(e===a?t:e)-this.height)}},u.each([["Top","Left"],["Top","Right"],["Bottom","Left"],["Bottom","Right"],["Left","Center"],["Top","Center"],["Right","Center"],["Bottom","Center"]],(function(t,e){var i=t.join(""),n=/^[RL]/.test(i);e>=4&&(t[1]+=n?"Y":"X");var s=t[n?0:1],r=t[n?1:0],o="get"+s,a="get"+r,l="set"+s,h="set"+r,u="set"+i;this["get"+i]=function(t){return new(t?b:_)(this[o](),this[a](),this,u)},this[u]=function(){var t=b.read(arguments);this[l](t.x),this[h](t.y)}}),{beans:!0})),C=x.extend({initialize:function(t,e,i,n,s,r){this._set(t,e,i,n,!0),this._owner=s,this._setter=r},_set:function(t,e,i,n,s){return this._x=t,this._y=e,this._width=i,this._height=n,s||this._owner[this._setter](this),this}},new function(){var t=x.prototype;return u.each(["x","y","width","height"],(function(t){var e=u.capitalize(t),i="_"+t;this["get"+e]=function(){return this[i]},this["set"+e]=function(t){this[i]=t,this._dontNotify||this._owner[this._setter](this)}}),u.each(["Point","Size","Center","Left","Top","Right","Bottom","CenterX","CenterY","TopLeft","TopRight","BottomLeft","BottomRight","LeftCenter","TopCenter","RightCenter","BottomCenter"],(function(e){var i="set"+e;this[i]=function(){this._dontNotify=!0,t[i].apply(this,arguments),this._dontNotify=!1,this._owner[this._setter](this)}}),{isSelected:function(){return!!(2&this._owner._selection)},setSelected:function(t){var e=this._owner;e._changeSelection&&e._changeSelection(2,t)}}))}),S=u.extend({_class:"Matrix",initialize:function t(e,i){var n=arguments,s=n.length,r=!0;if(s>=6?this._set.apply(this,n):1===s||2===s?e instanceof t?this._set(e._a,e._b,e._c,e._d,e._tx,e._ty,i):Array.isArray(e)?this._set.apply(this,i?e.concat([i]):e):r=!1:s?r=!1:this.reset(),!r)throw new Error("Unsupported matrix parameters");return this},set:"#initialize",_set:function(t,e,i,n,s,r,o){return this._a=t,this._b=e,this._c=i,this._d=n,this._tx=s,this._ty=r,o||this._changed(),this},_serialize:function(t,e){return u.serialize(this.getValues(),t,!0,e)},_changed:function(){var t=this._owner;t&&(t._applyMatrix?t.transform(null,!0):t._changed(25))},clone:function(){return new S(this._a,this._b,this._c,this._d,this._tx,this._ty)},equals:function(t){return t===this||t&&this._a===t._a&&this._b===t._b&&this._c===t._c&&this._d===t._d&&this._tx===t._tx&&this._ty===t._ty},toString:function(){var t=g.instance;return"[["+[t.number(this._a),t.number(this._c),t.number(this._tx)].join(", ")+"], ["+[t.number(this._b),t.number(this._d),t.number(this._ty)].join(", ")+"]]"},reset:function(t){return this._a=this._d=1,this._b=this._c=this._tx=this._ty=0,t||this._changed(),this},apply:function(t,e){var i=this._owner;return!!i&&(i.transform(null,u.pick(t,!0),e),this.isIdentity())},translate:function(){var t=b.read(arguments),e=t.x,i=t.y;return this._tx+=e*this._a+i*this._c,this._ty+=e*this._b+i*this._d,this._changed(),this},scale:function(){var t=arguments,e=b.read(t),i=b.read(t,0,{readNull:!0});return i&&this.translate(i),this._a*=e.x,this._b*=e.x,this._c*=e.y,this._d*=e.y,i&&this.translate(i.negate()),this._changed(),this},rotate:function(t){t*=Math.PI/180;var e=b.read(arguments,1),i=e.x,n=e.y,s=Math.cos(t),r=Math.sin(t),o=i-i*s+n*r,a=n-i*r-n*s,l=this._a,h=this._b,u=this._c,c=this._d;return this._a=s*l+r*u,this._b=s*h+r*c,this._c=-r*l+s*u,this._d=-r*h+s*c,this._tx+=o*l+a*u,this._ty+=o*h+a*c,this._changed(),this},shear:function(){var t=arguments,e=b.read(t),i=b.read(t,0,{readNull:!0});i&&this.translate(i);var n=this._a,s=this._b;return this._a+=e.y*this._c,this._b+=e.y*this._d,this._c+=e.x*n,this._d+=e.x*s,i&&this.translate(i.negate()),this._changed(),this},skew:function(){var t=arguments,e=b.read(t),i=b.read(t,0,{readNull:!0}),n=Math.PI/180,s=new b(Math.tan(e.x*n),Math.tan(e.y*n));return this.shear(s,i)},append:function(t,e){if(t){var i=this._a,n=this._b,s=this._c,r=this._d,o=t._a,a=t._c,l=t._b,h=t._d,u=t._tx,c=t._ty;this._a=o*i+l*s,this._c=a*i+h*s,this._b=o*n+l*r,this._d=a*n+h*r,this._tx+=u*i+c*s,this._ty+=u*n+c*r,e||this._changed()}return this},prepend:function(t,e){if(t){var i=this._a,n=this._b,s=this._c,r=this._d,o=this._tx,a=this._ty,l=t._a,h=t._c,u=t._b,c=t._d,d=t._tx,p=t._ty;this._a=l*i+h*n,this._c=l*s+h*r,this._b=u*i+c*n,this._d=u*s+c*r,this._tx=l*o+h*a+d,this._ty=u*o+c*a+p,e||this._changed()}return this},appended:function(t){return this.clone().append(t)},prepended:function(t){return this.clone().prepend(t)},invert:function(){var t=this._a,e=this._b,i=this._c,n=this._d,s=this._tx,r=this._ty,o=t*n-e*i,a=null;return o&&!isNaN(o)&&isFinite(s)&&isFinite(r)&&(this._a=n/o,this._b=-e/o,this._c=-i/o,this._d=t/o,this._tx=(i*r-n*s)/o,this._ty=(e*s-t*r)/o,a=this),a},inverted:function(){return this.clone().invert()},concatenate:"#append",preConcatenate:"#prepend",chain:"#appended",_shiftless:function(){return new S(this._a,this._b,this._c,this._d,0,0)},_orNullIfIdentity:function(){return this.isIdentity()?null:this},isIdentity:function(){return 1===this._a&&0===this._b&&0===this._c&&1===this._d&&0===this._tx&&0===this._ty},isInvertible:function(){var t=this._a*this._d-this._c*this._b;return t&&!isNaN(t)&&isFinite(this._tx)&&isFinite(this._ty)},isSingular:function(){return!this.isInvertible()},transform:function(t,e,i){return arguments.length<3?this._transformPoint(b.read(arguments)):this._transformCoordinates(t,e,i)},_transformPoint:function(t,e,i){var n=t.x,s=t.y;return e||(e=new b),e._set(n*this._a+s*this._c+this._tx,n*this._b+s*this._d+this._ty,i)},_transformCoordinates:function(t,e,i){for(var n=0,s=2*i;n<s;n+=2){var r=t[n],o=t[n+1];e[n]=r*this._a+o*this._c+this._tx,e[n+1]=r*this._b+o*this._d+this._ty}return e},_transformCorners:function(t){var e=t.x,i=t.y,n=e+t.width,s=i+t.height,r=[e,i,n,i,n,s,e,s];return this._transformCoordinates(r,r,4)},_transformBounds:function(t,e,i){for(var n=this._transformCorners(t),s=n.slice(0,2),r=s.slice(),o=2;o<8;o++){var a=n[o],l=1&o;a<s[l]?s[l]=a:a>r[l]&&(r[l]=a)}return e||(e=new x),e._set(s[0],s[1],r[0]-s[0],r[1]-s[1],i)},inverseTransform:function(){return this._inverseTransform(b.read(arguments))},_inverseTransform:function(t,e,i){var n=this._a,s=this._b,r=this._c,o=this._d,a=this._tx,l=this._ty,h=n*o-s*r,u=null;if(h&&!isNaN(h)&&isFinite(a)&&isFinite(l)){var c=t.x-this._tx,d=t.y-this._ty;e||(e=new b),u=e._set((c*o-d*r)/h,(d*n-c*s)/h,i)}return u},decompose:function(){var t,e,i,n=this._a,s=this._b,r=this._c,o=this._d,a=n*o-s*r,l=Math.sqrt,h=Math.atan2,u=180/Math.PI;if(0!==n||0!==s){var c=l(n*n+s*s);t=Math.acos(n/c)*(s>0?1:-1),e=[c,a/c],i=[h(n*r+s*o,c*c),0]}else if(0!==r||0!==o){var d=l(r*r+o*o);t=Math.asin(r/d)*(o>0?1:-1),e=[a/d,d],i=[0,h(n*r+s*o,d*d)]}else t=0,i=e=[0,0];return{translation:this.getTranslation(),rotation:t*u,scaling:new b(e),skewing:new b(i[0]*u,i[1]*u)}},getValues:function(){return[this._a,this._b,this._c,this._d,this._tx,this._ty]},getTranslation:function(){return new b(this._tx,this._ty)},getScaling:function(){return this.decompose().scaling},getRotation:function(){return this.decompose().rotation},applyToContext:function(t){this.isIdentity()||t.transform(this._a,this._b,this._c,this._d,this._tx,this._ty)}},u.each(["a","b","c","d","tx","ty"],(function(t){var e=u.capitalize(t),i="_"+t;this["get"+e]=function(){return this[i]},this["set"+e]=function(t){this[i]=t,this._changed()}}),{})),P=u.extend({_class:"Line",initialize:function(t,e,i,n,s){var r=!1;arguments.length>=4?(this._px=t,this._py=e,this._vx=i,this._vy=n,r=s):(this._px=t.x,this._py=t.y,this._vx=e.x,this._vy=e.y,r=i),r||(this._vx-=this._px,this._vy-=this._py)},getPoint:function(){return new b(this._px,this._py)},getVector:function(){return new b(this._vx,this._vy)},getLength:function(){return this.getVector().getLength()},intersect:function(t,e){return P.intersect(this._px,this._py,this._vx,this._vy,t._px,t._py,t._vx,t._vy,!0,e)},getSide:function(t,e){return P.getSide(this._px,this._py,this._vx,this._vy,t.x,t.y,!0,e)},getDistance:function(t){return Math.abs(this.getSignedDistance(t))},getSignedDistance:function(t){return P.getSignedDistance(this._px,this._py,this._vx,this._vy,t.x,t.y,!0)},isCollinear:function(t){return b.isCollinear(this._vx,this._vy,t._vx,t._vy)},isOrthogonal:function(t){return b.isOrthogonal(this._vx,this._vy,t._vx,t._vy)},statics:{intersect:function(t,e,i,n,s,r,o,a,l,h){l||(i-=t,n-=e,o-=s,a-=r);var u=i*a-n*o;if(!m.isMachineZero(u)){var c=t-s,d=e-r,p=(o*d-a*c)/u,f=(i*d-n*c)/u,g=-1e-12,v=1+1e-12;if(h||g<p&&p<v&&g<f&&f<v)return h||(p=p<=0?0:p>=1?1:p),new b(t+p*i,e+p*n)}},getSide:function(t,e,i,n,s,r,o,a){o||(i-=t,n-=e);var l=s-t,h=l*n-(r-e)*i;return!a&&m.isMachineZero(h)&&(h=(l*i+l*i)/(i*i+n*n))>=0&&h<=1&&(h=0),h<0?-1:h>0?1:0},getSignedDistance:function(t,e,i,n,s,r,o){return o||(i-=t,n-=e),0===i?n>0?s-t:t-s:0===n?i<0?r-e:e-r:((s-t)*n-(r-e)*i)/(n>i?n*Math.sqrt(1+i*i/(n*n)):i*Math.sqrt(1+n*n/(i*i)))},getDistance:function(t,e,i,n,s,r,o){return Math.abs(P.getSignedDistance(t,e,i,n,s,r,o))}}}),k=p.extend({_class:"Project",_list:"projects",_reference:"project",_compactSerialize:!0,initialize:function(t){p.call(this,!0),this._children=[],this._namedChildren={},this._activeLayer=null,this._currentStyle=new X(null,null,this),this._view=Z.create(this,t||lt.getCanvas(1,1)),this._selectionItems={},this._selectionCount=0,this._updateVersion=0},_serialize:function(t,e){return u.serialize(this._children,t,!0,e)},_changed:function(t,e){if(1&t){var i=this._view;i&&(i._needsUpdate=!0,!i._requested&&i._autoUpdate&&i.requestUpdate())}var n=this._changes;if(n&&e){var s=this._changesById,r=e._id,o=s[r];o?o.flags|=t:n.push(s[r]={item:e,flags:t})}},clear:function(){for(var t=this._children,e=t.length-1;e>=0;e--)t[e].remove()},isEmpty:function(){return!this._children.length},remove:function t(){return!!t.base.call(this)&&(this._view&&this._view.remove(),!0)},getView:function(){return this._view},getCurrentStyle:function(){return this._currentStyle},setCurrentStyle:function(t){this._currentStyle.set(t)},getIndex:function(){return this._index},getOptions:function(){return this._scope.settings},getLayers:function(){return this._children},getActiveLayer:function(){return this._activeLayer||new I({project:this,insert:!0})},getSymbolDefinitions:function(){var t=[],e={};return this.getItems({class:D,match:function(i){var n=i._definition,s=n._id;return e[s]||(e[s]=!0,t.push(n)),!1}}),t},getSymbols:"getSymbolDefinitions",getSelectedItems:function(){var t=this._selectionItems,e=[];for(var i in t){var n=t[i],s=n._selection;1&s&&n.isInserted()?e.push(n):s||this._updateSelection(n)}return e},_updateSelection:function(t){var e=t._id,i=this._selectionItems;t._selection?i[e]!==t&&(this._selectionCount++,i[e]=t):i[e]===t&&(this._selectionCount--,delete i[e])},selectAll:function(){for(var t=this._children,e=0,i=t.length;e<i;e++)t[e].setFullySelected(!0)},deselectAll:function(){var t=this._selectionItems;for(var e in t)t[e].setFullySelected(!1)},addLayer:function(t){return this.insertLayer(a,t)},insertLayer:function(t,e){if(e instanceof I){e._remove(!1,!0),u.splice(this._children,[e],t,0),e._setProject(this,!0);var i=e._name;i&&e.setName(i),this._changes&&e._changed(5),this._activeLayer||(this._activeLayer=e)}else e=null;return e},_insertItem:function(t,e,i){return e=this.insertLayer(t,e)||(this._activeLayer||this._insertItem(a,new I(T.NO_INSERT),!0)).insertChild(t,e),i&&e.activate&&e.activate(),e},getItems:function(t){return T._getItems(this,t)},getItem:function(t){return T._getItems(this,t,null,null,!0)[0]||null},importJSON:function(t){this.activate();var e=this._activeLayer;return u.importJSON(t,e&&e.isEmpty()&&e)},removeOn:function(t){var e=this._removeSets;if(e){"mouseup"===t&&(e.mousedrag=null);var i=e[t];if(i){for(var n in i){var s=i[n];for(var r in e){var o=e[r];o&&o!=i&&delete o[s._id]}s.remove()}e[t]=null}}},draw:function(t,e,i){this._updateVersion++,t.save(),e.applyToContext(t);for(var n=this._children,s=new u({offset:new b(0,0),pixelRatio:i,viewMatrix:e.isIdentity()?null:e,matrices:[new S],updateMatrix:!0}),r=0,o=n.length;r<o;r++)n[r].draw(t,s);if(t.restore(),this._selectionCount>0){t.save(),t.strokeWidth=1;var a=this._selectionItems,l=this._scope.settings.handleSize,h=this._updateVersion;for(var c in a)a[c]._drawSelection(t,e,l,a,h);t.restore()}}}),T=u.extend(c,{statics:{extend:function t(e){return e._serializeFields&&(e._serializeFields=u.set({},this.prototype._serializeFields,e._serializeFields)),t.base.apply(this,arguments)},NO_INSERT:{insert:!1}},_class:"Item",_name:null,_applyMatrix:!0,_canApplyMatrix:!0,_canScaleStroke:!1,_pivot:null,_visible:!0,_blendMode:"normal",_opacity:1,_locked:!1,_guide:!1,_clipMask:!1,_selection:0,_selectBounds:!0,_selectChildren:!1,_serializeFields:{name:null,applyMatrix:null,matrix:new S,pivot:null,visible:!0,blendMode:"normal",opacity:1,locked:!1,guide:!1,clipMask:!1,selected:!1,data:{}},_prioritize:["applyMatrix"]},new function(){var t=["onMouseDown","onMouseUp","onMouseDrag","onClick","onDoubleClick","onMouseMove","onMouseEnter","onMouseLeave"];return u.each(t,(function(t){this._events[t]={install:function(t){this.getView()._countItemEvent(t,1)},uninstall:function(t){this.getView()._countItemEvent(t,-1)}}}),{_events:{onFrame:{install:function(){this.getView()._animateItem(this,!0)},uninstall:function(){this.getView()._animateItem(this,!1)}},onLoad:{},onError:{}},statics:{_itemHandlers:t}})},{initialize:function(){},_initialize:function(t,e){var i=t&&u.isPlainObject(t),n=i&&!0===t.internal,s=this._matrix=new S,r=i&&t.project||dt.project,o=dt.settings;return this._id=n?null:v.get(),this._parent=this._index=null,this._applyMatrix=this._canApplyMatrix&&o.applyMatrix,e&&s.translate(e),s._owner=this,this._style=new X(r._currentStyle,this,r),n||i&&0==t.insert||!o.insertItems&&(!i||!0!==t.insert)?this._setProject(r):(i&&t.parent||r)._insertItem(a,this,!0),i&&t!==T.NO_INSERT&&this.set(t,{internal:!0,insert:!0,project:!0,parent:!0}),i},_serialize:function(t,e){var i={},n=this;function s(s){for(var r in s){var o=n[r];u.equals(o,"leading"===r?1.2*s.fontSize:s[r])||(i[r]=u.serialize(o,t,"data"!==r,e))}}return s(this._serializeFields),this instanceof A||s(this._style._defaults),[this._class,i]},_changed:function(t){var e=this._symbol,i=this._parent||e,n=this._project;8&t&&(this._bounds=this._position=this._decomposed=a),16&t&&(this._globalMatrix=a),i&&72&t&&T._clearBoundsCache(i),2&t&&T._clearBoundsCache(this),n&&n._changed(t,this),e&&e._changed(t)},getId:function(){return this._id},getName:function(){return this._name},setName:function(t){if(this._name&&this._removeNamed(),t===+t+"")throw new Error("Names consisting only of numbers are not supported.");var e=this._getOwner();if(t&&e){var i=e._children,n=e._namedChildren;(n[t]=n[t]||[]).push(this),t in i||(i[t]=this)}this._name=t||a,this._changed(256)},getStyle:function(){return this._style},setStyle:function(t){this.getStyle().set(t)}},u.each(["locked","visible","blendMode","opacity","guide"],(function(t){var e=u.capitalize(t),i="_"+t,n={locked:256,visible:265};this["get"+e]=function(){return this[i]},this["set"+e]=function(e){e!=this[i]&&(this[i]=e,this._changed(n[t]||257))}}),{}),{beans:!0,getSelection:function(){return this._selection},setSelection:function(t){if(t!==this._selection){this._selection=t;var e=this._project;e&&(e._updateSelection(this),this._changed(257))}},_changeSelection:function(t,e){var i=this._selection;this.setSelection(e?i|t:i&~t)},isSelected:function(){if(this._selectChildren)for(var t=this._children,e=0,i=t.length;e<i;e++)if(t[e].isSelected())return!0;return!!(1&this._selection)},setSelected:function(t){if(this._selectChildren)for(var e=this._children,i=0,n=e.length;i<n;i++)e[i].setSelected(t);this._changeSelection(1,t)},isFullySelected:function(){var t=this._children,e=!!(1&this._selection);if(t&&e){for(var i=0,n=t.length;i<n;i++)if(!t[i].isFullySelected())return!1;return!0}return e},setFullySelected:function(t){var e=this._children;if(e)for(var i=0,n=e.length;i<n;i++)e[i].setFullySelected(t);this._changeSelection(1,t)},isClipMask:function(){return this._clipMask},setClipMask:function(t){this._clipMask!=(t=!!t)&&(this._clipMask=t,t&&(this.setFillColor(null),this.setStrokeColor(null)),this._changed(257),this._parent&&this._parent._changed(2048))},getData:function(){return this._data||(this._data={}),this._data},setData:function(t){this._data=t},getPosition:function(t){var e=t?b:_,i=this._position||(this._position=this._getPositionFromBounds());return new e(i.x,i.y,this,"setPosition")},setPosition:function(){this.translate(b.read(arguments).subtract(this.getPosition(!0)))},_getPositionFromBounds:function(t){return this._pivot?this._matrix._transformPoint(this._pivot):(t||this.getBounds()).getCenter(!0)},getPivot:function(){var t=this._pivot;return t?new _(t.x,t.y,this,"setPivot"):null},setPivot:function(){this._pivot=b.read(arguments,0,{clone:!0,readNull:!0}),this._position=a}},u.each({getStrokeBounds:{stroke:!0},getHandleBounds:{handle:!0},getInternalBounds:{internal:!0}},(function(t,e){this[e]=function(e){return this.getBounds(e,t)}}),{beans:!0,getBounds:function(t,e){var i=e||t instanceof S,n=u.set({},i?e:t,this._boundsOptions);n.stroke&&!this.getStrokeScaling()||(n.cacheItem=this);var s=this._getCachedBounds(i&&t,n).rect;return arguments.length?s:new C(s.x,s.y,s.width,s.height,this,"setBounds")},setBounds:function(){var t=x.read(arguments),e=this.getBounds(),i=this._matrix,n=new S,s=t.getCenter();n.translate(s),t.width==e.width&&t.height==e.height||(i.isInvertible()||(i.set(i._backup||(new S).translate(i.getTranslation())),e=this.getBounds()),n.scale(0!==e.width?t.width/e.width:0,0!==e.height?t.height/e.height:0)),s=e.getCenter(),n.translate(-s.x,-s.y),this.transform(n)},_getBounds:function(t,e){var i=this._children;return i&&i.length?(T._updateBoundsCache(this,e.cacheItem),T._getBounds(i,t,e)):new x},_getBoundsCacheKey:function(t,e){return[t.stroke?1:0,t.handle?1:0,e?1:0].join("")},_getCachedBounds:function(t,e,i){t=t&&t._orNullIfIdentity();var n=e.internal&&!i,s=e.cacheItem,r=n?null:this._matrix._orNullIfIdentity(),o=s&&(!t||t.equals(r))&&this._getBoundsCacheKey(e,n),a=this._bounds;if(T._updateBoundsCache(this._parent||this._symbol,s),o&&a&&o in a)return{rect:(d=a[o]).rect.clone(),nonscaling:d.nonscaling};var l=this._getBounds(t||r,e),h=l.rect||l,u=this._style,c=l.nonscaling||u.hasStroke()&&!u.getStrokeScaling();if(o){a||(this._bounds=a={});var d=a[o]={rect:h.clone(),nonscaling:c,internal:n}}return{rect:h,nonscaling:c}},_getStrokeMatrix:function(t,e){var i=this.getStrokeScaling()?null:e&&e.internal?this:this._parent||this._symbol&&this._symbol._item,n=i?i.getViewMatrix().invert():t;return n&&n._shiftless()},statics:{_updateBoundsCache:function(t,e){if(t&&e){var i=e._id,n=t._boundsCache=t._boundsCache||{ids:{},list:[]};n.ids[i]||(n.list.push(e),n.ids[i]=e)}},_clearBoundsCache:function(t){var e=t._boundsCache;if(e){t._bounds=t._position=t._boundsCache=a;for(var i=0,n=e.list,s=n.length;i<s;i++){var r=n[i];r!==t&&(r._bounds=r._position=a,r._boundsCache&&T._clearBoundsCache(r))}}},_getBounds:function(t,e,i){var n=1/0,s=-n,r=n,o=s,a=!1;i=i||{};for(var l=0,h=t.length;l<h;l++){var u=t[l];if(u._visible&&!u.isEmpty(!0)){var c=u._getCachedBounds(e&&e.appended(u._matrix),i,!0),d=c.rect;n=Math.min(d.x,n),r=Math.min(d.y,r),s=Math.max(d.x+d.width,s),o=Math.max(d.y+d.height,o),c.nonscaling&&(a=!0)}}return{rect:isFinite(n)?new x(n,r,s-n,o-r):new x,nonscaling:a}}}}),{beans:!0,_decompose:function(){return this._applyMatrix?null:this._decomposed||(this._decomposed=this._matrix.decompose())},getRotation:function(){var t=this._decompose();return t?t.rotation:0},setRotation:function(t){var e=this.getRotation();if(null!=e&&null!=t){var i=this._decomposed;this.rotate(t-e),i&&(i.rotation=t,this._decomposed=i)}},getScaling:function(){var t=this._decompose(),e=t&&t.scaling;return new _(e?e.x:1,e?e.y:1,this,"setScaling")},setScaling:function(){var t=this.getScaling(),e=b.read(arguments,0,{clone:!0,readNull:!0});if(t&&e&&!t.equals(e)){var i=this.getRotation(),n=this._decomposed,s=new S,r=m.isZero;if(r(t.x)||r(t.y))s.translate(n.translation),i&&s.rotate(i),s.scale(e.x,e.y),this._matrix.set(s);else{var o=this.getPosition(!0);s.translate(o),i&&s.rotate(i),s.scale(e.x/t.x,e.y/t.y),i&&s.rotate(-i),s.translate(o.negate()),this.transform(s)}n&&(n.scaling=e,this._decomposed=n)}},getMatrix:function(){return this._matrix},setMatrix:function(){var t=this._matrix;t.set.apply(t,arguments)},getGlobalMatrix:function(t){var e=this._globalMatrix;if(e)for(var i=this._parent,n=[];i;){if(!i._globalMatrix){e=null;for(var s=0,r=n.length;s<r;s++)n[s]._globalMatrix=null;break}n.push(i),i=i._parent}return e||(e=this._globalMatrix=this._matrix.clone(),(i=this._parent)&&e.prepend(i.getGlobalMatrix(!0))),t?e:e.clone()},getViewMatrix:function(){return this.getGlobalMatrix().prepend(this.getView()._matrix)},getApplyMatrix:function(){return this._applyMatrix},setApplyMatrix:function(t){(this._applyMatrix=this._canApplyMatrix&&!!t)&&this.transform(null,!0)},getTransformContent:"#getApplyMatrix",setTransformContent:"#setApplyMatrix"},{getProject:function(){return this._project},_setProject:function(t,e){if(this._project!==t){this._project&&this._installEvents(!1),this._project=t;for(var i=this._children,n=0,s=i&&i.length;n<s;n++)i[n]._setProject(t);e=!0}e&&this._installEvents(!0)},getView:function(){return this._project._view},_installEvents:function t(e){t.base.call(this,e);for(var i=this._children,n=0,s=i&&i.length;n<s;n++)i[n]._installEvents(e)},getLayer:function(){for(var t=this;t=t._parent;)if(t instanceof I)return t;return null},getParent:function(){return this._parent},setParent:function(t){return t.addChild(this)},_getOwner:"#getParent",getChildren:function(){return this._children},setChildren:function(t){this.removeChildren(),this.addChildren(t)},getFirstChild:function(){return this._children&&this._children[0]||null},getLastChild:function(){return this._children&&this._children[this._children.length-1]||null},getNextSibling:function(){var t=this._getOwner();return t&&t._children[this._index+1]||null},getPreviousSibling:function(){var t=this._getOwner();return t&&t._children[this._index-1]||null},getIndex:function(){return this._index},equals:function(t){return t===this||t&&this._class===t._class&&this._style.equals(t._style)&&this._matrix.equals(t._matrix)&&this._locked===t._locked&&this._visible===t._visible&&this._blendMode===t._blendMode&&this._opacity===t._opacity&&this._clipMask===t._clipMask&&this._guide===t._guide&&this._equals(t)||!1},_equals:function(t){return u.equals(this._children,t._children)},clone:function(t){var e=new this.constructor(T.NO_INSERT),i=this._children,n=u.pick(t?t.insert:a,t===a||!0===t),s=u.pick(t?t.deep:a,!0);i&&e.copyAttributes(this),i&&!s||e.copyContent(this),i||e.copyAttributes(this),n&&e.insertAbove(this);var r=this._name,o=this._parent;if(r&&o){i=o._children;for(var l=r,h=1;i[r];)r=l+" "+h++;r!==l&&e.setName(r)}return e},copyContent:function(t){for(var e=t._children,i=0,n=e&&e.length;i<n;i++)this.addChild(e[i].clone(!1),!0)},copyAttributes:function(t,e){this.setStyle(t._style);for(var i=["_locked","_visible","_blendMode","_opacity","_clipMask","_guide"],n=0,s=i.length;n<s;n++){var r=i[n];t.hasOwnProperty(r)&&(this[r]=t[r])}e||this._matrix.set(t._matrix,!0),this.setApplyMatrix(t._applyMatrix),this.setPivot(t._pivot),this.setSelection(t._selection);var o=t._data,a=t._name;this._data=o?u.clone(o):null,a&&this.setName(a)},rasterize:function(t,e){var i,n,s;u.isPlainObject(t)?(i=t.resolution,n=t.insert,s=t.raster):(i=t,n=e),s?s.matrix.reset(!0):s=new M(T.NO_INSERT);var r=this.getStrokeBounds(),o=(i||this.getView().getResolution())/72,l=r.getTopLeft().floor(),h=r.getBottomRight().ceil(),c=new y(h.subtract(l)),d=c.multiply(o);if(s.setSize(d,!0),!d.isZero()){var p=s.getContext(!0),f=(new S).scale(o).translate(l.negate());p.save(),f.applyToContext(p),this.draw(p,new u({matrices:[f]})),p.restore()}return s.transform((new S).translate(l.add(c.divide(2))).scale(1/o)),(n===a||n)&&s.insertAbove(this),s},contains:function(){var t=this._matrix;return t.isInvertible()&&!!this._contains(t._inverseTransform(b.read(arguments)))},_contains:function(t){var e=this._children;if(e){for(var i=e.length-1;i>=0;i--)if(e[i].contains(t))return!0;return!1}return t.isInside(this.getInternalBounds())},isInside:function(){return x.read(arguments).contains(this.getBounds())},_asPathItem:function(){return new j.Rectangle({rectangle:this.getInternalBounds(),matrix:this._matrix,insert:!1})},intersects:function(t,e){return t instanceof T&&this._asPathItem().getIntersections(t._asPathItem(),null,e,!0).length>0}},new function(){function t(){var t=arguments;return this._hitTest(b.read(t),N.getOptions(t))}function e(){var t=arguments,e=b.read(t),i=N.getOptions(t),n=[];return this._hitTest(e,new u({all:n},i)),n}function i(t,e,i,n){var s=this._children;if(s)for(var r=s.length-1;r>=0;r--){var o=s[r],a=o!==n&&o._hitTest(t,e,i);if(a&&!e.all)return a}return null}return k.inject({hitTest:t,hitTestAll:e,_hitTest:i}),{hitTest:t,hitTestAll:e,_hitTestChildren:i}},{_hitTest:function(t,e,i){if(this._locked||!this._visible||this._guide&&!e.guides||this.isEmpty())return null;var n=this._matrix,s=i?i.appended(n):this.getGlobalMatrix().prepend(this.getView()._matrix),r=Math.max(e.tolerance,1e-12),o=e._tolerancePadding=new y(j._getStrokePadding(r,n._shiftless().invert()));if(!(t=n._inverseTransform(t))||!this._children&&!this.getBounds({internal:!0,stroke:!0,handle:!0}).expand(o.multiply(2))._containsPoint(t))return null;var a,l,h=!(e.guides&&!this._guide||e.selected&&!this.isSelected()||e.type&&e.type!==u.hyphenate(this._class)||e.class&&!(this instanceof e.class)),c=e.match,d=this;function p(t){return t&&c&&!c(t)&&(t=null),t&&e.all&&e.all.push(t),t}function f(e,i){var n=i?a["get"+i]():d.getPosition();if(t.subtract(n).divide(o).length<=1)return new N(e,d,{name:i?u.hyphenate(i):e,point:n})}var g=e.position,m=e.center,v=e.bounds;if(h&&this._parent&&(g||m||v)){if((m||v)&&(a=this.getInternalBounds()),!(l=g&&f("position")||m&&f("center","Center"))&&v)for(var b=["TopLeft","TopRight","BottomLeft","BottomRight","LeftCenter","TopCenter","RightCenter","BottomCenter"],_=0;_<8&&!l;_++)l=f("bounds",b[_]);l=p(l)}return l||(l=this._hitTestChildren(t,e,s)||h&&p(this._hitTestSelf(t,e,s,this.getStrokeScaling()?null:s._shiftless().invert()))||null),l&&l.point&&(l.point=n.transform(l.point)),l},_hitTestSelf:function(t,e){if(e.fill&&this.hasFill()&&this._contains(t))return new N("fill",this)},matches:function(t,e){var i=typeof t;if("object"===i){for(var n in t)if(t.hasOwnProperty(n)&&!this.matches(n,t[n]))return!1;return!0}if("function"===i)return t(this);if("match"===t)return e(this);var s=/^(empty|editable)$/.test(t)?this["is"+u.capitalize(t)]():"type"===t?u.hyphenate(this._class):this[t];if("class"===t){if("function"==typeof e)return this instanceof e;s=this._class}if("function"==typeof e)return!!e(s);if(e){if(e.test)return e.test(s);if(u.isPlainObject(e))return function t(e,i){for(var n in e)if(e.hasOwnProperty(n)){var s=e[n],r=i[n];if(u.isPlainObject(s)&&u.isPlainObject(r)){if(!t(s,r))return!1}else if(!u.equals(s,r))return!1}return!0}(e,s)}return u.equals(s,e)},getItems:function(t){return T._getItems(this,t,this._matrix)},getItem:function(t){return T._getItems(this,t,this._matrix,null,!0)[0]||null},statics:{_getItems:function t(e,i,n,s,r){if(!s){var o="object"==typeof i&&i,a=o&&o.overlapping,l=o&&o.inside,h=(b=a||l)&&x.read([b]);s={items:[],recursive:o&&!1!==o.recursive,inside:!!l,overlapping:!!a,rect:h,path:a&&new j.Rectangle({rectangle:h,insert:!1})},o&&(i=u.filter({},i,{recursive:!0,inside:!0,overlapping:!0}))}var c=e._children,d=s.items;n=(h=s.rect)&&(n||new S);for(var p=0,f=c&&c.length;p<f;p++){var g=c[p],m=n&&n.appended(g._matrix),v=!0;if(h){var b=g.getBounds(m);if(!h.intersects(b))continue;h.contains(b)||s.overlapping&&(b.contains(h)||s.path.intersects(g,m))||(v=!1)}if(v&&g.matches(i)&&(d.push(g),r))break;if(!1!==s.recursive&&t(g,i,m,s,r),r&&d.length>0)break}return d}}},{importJSON:function(t){var e=u.importJSON(t,this);return e!==this?this.addChild(e):e},addChild:function(t){return this.insertChild(a,t)},insertChild:function(t,e){var i=e?this.insertChildren(t,[e]):null;return i&&i[0]},addChildren:function(t){return this.insertChildren(this._children.length,t)},insertChildren:function(t,e){var i=this._children;if(i&&e&&e.length>0){for(var n={},s=(e=u.slice(e)).length-1;s>=0;s--){var r=(h=e[s])&&h._id;!h||n[r]?e.splice(s,1):(h._remove(!1,!0),n[r]=!0)}u.splice(i,e,t,0);for(var o=this._project,a=o._changes,l=(s=0,e.length);s<l;s++){var h,c=(h=e[s])._name;h._parent=this,h._setProject(o,!0),c&&h.setName(c),a&&h._changed(5)}this._changed(11)}else e=null;return e},_insertItem:"#insertChild",_insertAt:function(t,e){var i=t&&t._getOwner(),n=t!==this&&i?this:null;return n&&(n._remove(!1,!0),i._insertItem(t._index+e,n)),n},insertAbove:function(t){return this._insertAt(t,1)},insertBelow:function(t){return this._insertAt(t,0)},sendToBack:function(){var t=this._getOwner();return t?t._insertItem(0,this):null},bringToFront:function(){var t=this._getOwner();return t?t._insertItem(a,this):null},appendTop:"#addChild",appendBottom:function(t){return this.insertChild(0,t)},moveAbove:"#insertAbove",moveBelow:"#insertBelow",addTo:function(t){return t._insertItem(a,this)},copyTo:function(t){return this.clone(!1).addTo(t)},reduce:function(t){var e=this._children;if(e&&1===e.length){var i=e[0].reduce(t);return this._parent?(i.insertAbove(this),this.remove()):i.remove(),i}return this},_removeNamed:function(){var t=this._getOwner();if(t){var e=t._children,i=t._namedChildren,n=this._name,s=i[n],r=s?s.indexOf(this):-1;-1!==r&&(e[n]==this&&delete e[n],s.splice(r,1),s.length?e[n]=s[0]:delete i[n])}},_remove:function(t,e){var i=this._getOwner(),n=this._project,s=this._index;return this._style&&this._style._dispose(),!!i&&(this._name&&this._removeNamed(),null!=s&&(n._activeLayer===this&&(n._activeLayer=this.getNextSibling()||this.getPreviousSibling()),u.splice(i._children,null,s,1)),this._installEvents(!1),t&&n._changes&&this._changed(5),e&&i._changed(11,this),this._parent=null,!0)},remove:function(){return this._remove(!0,!0)},replaceWith:function(t){var e=t&&t.insertBelow(this);return e&&this.remove(),e},removeChildren:function(t,e){if(!this._children)return null;t=t||0,e=u.pick(e,this._children.length);for(var i=u.splice(this._children,null,t,e-t),n=i.length-1;n>=0;n--)i[n]._remove(!0,!1);return i.length>0&&this._changed(11),i},clear:"#removeChildren",reverseChildren:function(){if(this._children){this._children.reverse();for(var t=0,e=this._children.length;t<e;t++)this._children[t]._index=t;this._changed(11)}},isEmpty:function(t){var e=this._children,i=e?e.length:0;if(t){for(var n=0;n<i;n++)if(!e[n].isEmpty(t))return!1;return!0}return!i},isEditable:function(){for(var t=this;t;){if(!t._visible||t._locked)return!1;t=t._parent}return!0},hasFill:function(){return this.getStyle().hasFill()},hasStroke:function(){return this.getStyle().hasStroke()},hasShadow:function(){return this.getStyle().hasShadow()},_getOrder:function(t){function e(t){var e=[];do{e.unshift(t)}while(t=t._parent);return e}for(var i=e(this),n=e(t),s=0,r=Math.min(i.length,n.length);s<r;s++)if(i[s]!=n[s])return i[s]._index<n[s]._index?1:-1;return 0},hasChildren:function(){return this._children&&this._children.length>0},isInserted:function(){return!!this._parent&&this._parent.isInserted()},isAbove:function(t){return-1===this._getOrder(t)},isBelow:function(t){return 1===this._getOrder(t)},isParent:function(t){return this._parent===t},isChild:function(t){return t&&t._parent===this},isDescendant:function(t){for(var e=this;e=e._parent;)if(e===t)return!0;return!1},isAncestor:function(t){return!!t&&t.isDescendant(this)},isSibling:function(t){return this._parent===t._parent},isGroupedWith:function(t){for(var e=this._parent;e;){if(e._parent&&/^(Group|Layer|CompoundPath)$/.test(e._class)&&t.isDescendant(e))return!0;e=e._parent}return!1}},u.each(["rotate","scale","shear","skew"],(function(t){var e="rotate"===t;this[t]=function(){var i=arguments,n=(e?u:b).read(i),s=b.read(i,0,{readNull:!0});return this.transform((new S)[t](n,s||this.getPosition(!0)))}}),{translate:function(){var t=new S;return this.transform(t.translate.apply(t,arguments))},transform:function(t,e,i){var n=this._matrix,s=t&&!t.isIdentity(),r=i&&this._canApplyMatrix||this._applyMatrix&&(s||!n.isIdentity()||e&&this._children);if(!s&&!r)return this;if(s){!t.isInvertible()&&n.isInvertible()&&(n._backup=n.getValues()),n.prepend(t,!0);var o=this._style,a=o.getFillColor(!0),l=o.getStrokeColor(!0);a&&a.transform(t),l&&l.transform(t)}if(r&&(r=this._transformContent(n,e,i))){var h=this._pivot;h&&n._transformPoint(h,h,!0),n.reset(!0),i&&this._canApplyMatrix&&(this._applyMatrix=!0)}var u=this._bounds,c=this._position;(s||r)&&this._changed(25);var d=s&&u&&t.decompose();if(d&&d.skewing.isZero()&&d.rotation%90==0){for(var p in u){var f=u[p];if(f.nonscaling)delete u[p];else if(r||!f.internal){var g=f.rect;t._transformBounds(g,g)}}this._bounds=u;var m=u[this._getBoundsCacheKey(this._boundsOptions||{})];m&&(this._position=this._getPositionFromBounds(m.rect))}else s&&c&&this._pivot&&(this._position=t._transformPoint(c,c));return this},_transformContent:function(t,e,i){var n=this._children;if(n){for(var s=0,r=n.length;s<r;s++)n[s].transform(t,e,i);return!0}},globalToLocal:function(){return this.getGlobalMatrix(!0)._inverseTransform(b.read(arguments))},localToGlobal:function(){return this.getGlobalMatrix(!0)._transformPoint(b.read(arguments))},parentToLocal:function(){return this._matrix._inverseTransform(b.read(arguments))},localToParent:function(){return this._matrix._transformPoint(b.read(arguments))},fitBounds:function(t,e){t=x.read(arguments);var i=this.getBounds(),n=i.height/i.width,s=t.height/t.width,r=(e?n>s:n<s)?t.width/i.width:t.height/i.height,o=new x(new b,new y(i.width*r,i.height*r));o.setCenter(t.getCenter()),this.setBounds(o)}}),{_setStyles:function(t,e,i){var n=this._style,s=this._matrix;if(n.hasFill()&&(t.fillStyle=n.getFillColor().toCanvasStyle(t,s)),n.hasStroke()){t.strokeStyle=n.getStrokeColor().toCanvasStyle(t,s),t.lineWidth=n.getStrokeWidth();var r=n.getStrokeJoin(),o=n.getStrokeCap(),a=n.getMiterLimit();if(r&&(t.lineJoin=r),o&&(t.lineCap=o),a&&(t.miterLimit=a),dt.support.nativeDash){var l=n.getDashArray(),h=n.getDashOffset();l&&l.length&&("setLineDash"in t?(t.setLineDash(l),t.lineDashOffset=h):(t.mozDash=l,t.mozDashOffset=h))}}if(n.hasShadow()){var u=e.pixelRatio||1,c=i._shiftless().prepend((new S).scale(u,u)),d=c.transform(new b(n.getShadowBlur(),0)),p=c.transform(this.getShadowOffset());t.shadowColor=n.getShadowColor().toCanvasStyle(t),t.shadowBlur=d.getLength(),t.shadowOffsetX=p.x,t.shadowOffsetY=p.y}},draw:function(t,e,i){if(this._updateVersion=this._project._updateVersion,this._visible&&0!==this._opacity){var n=e.matrices,s=e.viewMatrix,r=this._matrix,o=n[n.length-1].appended(r);if(o.isInvertible()){s=s?s.appended(o):o,n.push(o),e.updateMatrix&&(this._globalMatrix=o);var a,l,h,u=this._blendMode,c=m.clamp(this._opacity,0,1),d="normal"===u,p=ht.nativeModes[u],f=d&&1===c||e.dontStart||e.clip||(p||d&&c<1)&&this._canComposite(),g=e.pixelRatio||1;if(!f){var v=this.getStrokeBounds(s);if(!v.width||!v.height)return void n.pop();h=e.offset,l=e.offset=v.getTopLeft().floor(),a=t,t=lt.getContext(v.getSize().ceil().add(1).multiply(g)),1!==g&&t.scale(g,g)}t.save();var b=i?i.appended(r):this._canScaleStroke&&!this.getStrokeScaling(!0)&&s,_=!f&&e.clipItem,y=!b||_;if(f?(t.globalAlpha=c,p&&(t.globalCompositeOperation=u)):y&&t.translate(-l.x,-l.y),y&&(f?r:s).applyToContext(t),_&&e.clipItem.draw(t,e.extend({clip:!0})),b){t.setTransform(g,0,0,g,0,0);var w=e.offset;w&&t.translate(-w.x,-w.y)}this._draw(t,e,s,b),t.restore(),n.pop(),e.clip&&!e.dontFinish&&t.clip(this.getFillRule()),f||(ht.process(u,t,a,c,l.subtract(h).multiply(g)),lt.release(t),e.offset=h)}}},_isUpdated:function(t){var e=this._parent;if(e instanceof z)return e._isUpdated(t);var i=this._updateVersion===t;return!i&&e&&e._visible&&e._isUpdated(t)&&(this._updateVersion=t,i=!0),i},_drawSelection:function(t,e,i,n,s){var r=this._selection,o=1&r,a=2&r||o&&this._selectBounds,l=4&r;if(this._drawSelected||(o=!1),(o||a||l)&&this._isUpdated(s)){var h,u=this.getSelectedColor(!0)||(h=this.getLayer())&&h.getSelectedColor(!0),c=e.appended(this.getGlobalMatrix(!0)),d=i/2;if(t.strokeStyle=t.fillStyle=u?u.toCanvasStyle(t):"#009dec",o&&this._drawSelected(t,c,n),l){var p=this.getPosition(!0),f=this._parent,g=f?f.localToGlobal(p):p,m=g.x,v=g.y;t.beginPath(),t.arc(m,v,d,0,2*Math.PI,!0),t.stroke();for(var b=[[0,-1],[1,0],[0,1],[-1,0]],_=d,y=i+1,w=0;w<4;w++){var x=b[w],C=x[0],S=x[1];t.moveTo(m+C*_,v+S*_),t.lineTo(m+C*y,v+S*y),t.stroke()}}if(a){var P=c._transformCorners(this.getInternalBounds());for(t.beginPath(),w=0;w<8;w++)t[w?"lineTo":"moveTo"](P[w],P[++w]);for(t.closePath(),t.stroke(),w=0;w<8;w++)t.fillRect(P[w]-d,P[++w]-d,i,i)}}},_canComposite:function(){return!1}},u.each(["down","drag","up","move"],(function(t){this["removeOn"+u.capitalize(t)]=function(){var e={};return e[t]=!0,this.removeOn(e)}}),{removeOn:function(t){for(var e in t)if(t[e]){var i="mouse"+e,n=this._project,s=n._removeSets=n._removeSets||{};s[i]=s[i]||{},s[i][this._id]=this}return this}}),{tween:function(t,e,i){i||(i=e,e=t,t=null,i||(i=e,e=null));var n=i&&i.easing,s=i&&i.start,r=null!=i&&("number"==typeof i?i:i.duration),o=new ot(this,t,e,r,n,s);return r&&this.on("frame",(function t(e){o._handleFrame(1e3*e.time),o.running||this.off("frame",t)})),o},tweenTo:function(t,e){return this.tween(null,t,e)},tweenFrom:function(t,e){return this.tween(t,null,e)}}),A=T.extend({_class:"Group",_selectBounds:!1,_selectChildren:!0,_serializeFields:{children:[]},initialize:function(t){this._children=[],this._namedChildren={},this._initialize(t)||this.addChildren(Array.isArray(t)?t:arguments)},_changed:function t(e){t.base.call(this,e),2050&e&&(this._clipItem=a)},_getClipItem:function(){var t=this._clipItem;if(t===a){t=null;for(var e=this._children,i=0,n=e.length;i<n;i++)if(e[i]._clipMask){t=e[i];break}this._clipItem=t}return t},isClipped:function(){return!!this._getClipItem()},setClipped:function(t){var e=this.getFirstChild();e&&e.setClipMask(t)},_getBounds:function t(e,i){var n=this._getClipItem();return n?n._getCachedBounds(n._matrix.prepended(e),u.set({},i,{stroke:!1})):t.base.call(this,e,i)},_hitTestChildren:function t(e,i,n){var s=this._getClipItem();return(!s||s.contains(e))&&t.base.call(this,e,i,n,s)},_draw:function(t,e){var i=e.clip,n=!i&&this._getClipItem();e=e.extend({clipItem:n,clip:!1}),i?(t.beginPath(),e.dontStart=e.dontFinish=!0):n&&n.draw(t,e.extend({clip:!0}));for(var s=this._children,r=0,o=s.length;r<o;r++){var a=s[r];a!==n&&a.draw(t,e)}}}),I=A.extend({_class:"Layer",initialize:function(){A.apply(this,arguments)},_getOwner:function(){return this._parent||null!=this._index&&this._project},isInserted:function t(){return this._parent?t.base.call(this):null!=this._index},activate:function(){this._project._activeLayer=this},_hitTestSelf:function(){}}),E=T.extend({_class:"Shape",_applyMatrix:!1,_canApplyMatrix:!1,_canScaleStroke:!0,_serializeFields:{type:null,size:null,radius:null},initialize:function(t,e){this._initialize(t,e)},_equals:function(t){return this._type===t._type&&this._size.equals(t._size)&&u.equals(this._radius,t._radius)},copyContent:function(t){this.setType(t._type),this.setSize(t._size),this.setRadius(t._radius)},getType:function(){return this._type},setType:function(t){this._type=t},getShape:"#getType",setShape:"#setType",getSize:function(){var t=this._size;return new w(t.width,t.height,this,"setSize")},setSize:function(){var t=y.read(arguments);if(this._size){if(!this._size.equals(t)){var e=this._type,i=t.width,n=t.height;"rectangle"===e?this._radius.set(y.min(this._radius,t.divide(2).abs())):"circle"===e?(i=n=(i+n)/2,this._radius=i/2):"ellipse"===e&&this._radius._set(i/2,n/2),this._size._set(i,n),this._changed(9)}}else this._size=t.clone()},getRadius:function(){var t=this._radius;return"circle"===this._type?t:new w(t.width,t.height,this,"setRadius")},setRadius:function(t){var e=this._type;if("circle"===e){if(t===this._radius)return;var i=2*t;this._radius=t,this._size._set(i,i)}else if(t=y.read(arguments),this._radius){if(this._radius.equals(t))return;this._radius.set(t),"rectangle"===e?(i=y.max(this._size,t.multiply(2)),this._size.set(i)):"ellipse"===e&&this._size._set(2*t.width,2*t.height)}else this._radius=t.clone();this._changed(9)},isEmpty:function(){return!1},toPath:function(t){var e=new(j[u.capitalize(this._type)])({center:new b,size:this._size,radius:this._radius,insert:!1});return e.copyAttributes(this),dt.settings.applyMatrix&&e.setApplyMatrix(!0),(t===a||t)&&e.insertAbove(this),e},toShape:"#clone",_asPathItem:function(){return this.toPath(!1)},_draw:function(t,e,i,n){var s=this._style,r=s.hasFill(),o=s.hasStroke(),a=e.dontFinish||e.clip,l=!n;if(r||o||a){var h=this._type,u=this._radius,c="circle"===h;if(e.dontStart||t.beginPath(),l&&c)t.arc(0,0,u,0,2*Math.PI,!0);else{var d=c?u:u.width,p=c?u:u.height,f=this._size,g=f.width,m=f.height;if(l&&"rectangle"===h&&0===d&&0===p)t.rect(-g/2,-m/2,g,m);else{var v=g/2,b=m/2,_=.44771525016920644,y=d*_,w=p*_,x=[-v,-b+p,-v,-b+w,-v+y,-b,-v+d,-b,v-d,-b,v-y,-b,v,-b+w,v,-b+p,v,b-p,v,b-w,v-y,b,v-d,b,-v+d,b,-v+y,b,-v,b-w,-v,b-p];n&&n.transform(x,x,32),t.moveTo(x[0],x[1]),t.bezierCurveTo(x[2],x[3],x[4],x[5],x[6],x[7]),v!==d&&t.lineTo(x[8],x[9]),t.bezierCurveTo(x[10],x[11],x[12],x[13],x[14],x[15]),b!==p&&t.lineTo(x[16],x[17]),t.bezierCurveTo(x[18],x[19],x[20],x[21],x[22],x[23]),v!==d&&t.lineTo(x[24],x[25]),t.bezierCurveTo(x[26],x[27],x[28],x[29],x[30],x[31])}}t.closePath()}a||!r&&!o||(this._setStyles(t,e,i),r&&(t.fill(s.getFillRule()),t.shadowColor="rgba(0,0,0,0)"),o&&t.stroke())},_canComposite:function(){return!(this.hasFill()&&this.hasStroke())},_getBounds:function(t,e){var i=new x(this._size).setCenter(0,0),n=this._style,s=e.stroke&&n.hasStroke()&&n.getStrokeWidth();return t&&(i=t._transformBounds(i)),s?i.expand(j._getStrokePadding(s,this._getStrokeMatrix(t,e))):i}},new function(){function t(t,e,i){var n=t._radius;if(!n.isZero())for(var s=t._size.divide(2),r=1;r<=4;r++){var o=new b(r>1&&r<4?-1:1,r>2?-1:1),a=o.multiply(s),l=a.subtract(o.multiply(n));if(new x(i?a.add(o.multiply(i)):a,l).contains(e))return{point:l,quadrant:r}}}function e(t,e,i,n){var s=t.divide(e);return(!n||s.isInQuadrant(n))&&s.subtract(s.normalize()).multiply(e).divide(i).length<=1}return{_contains:function e(i){if("rectangle"===this._type){var n=t(this,i);return n?i.subtract(n.point).divide(this._radius).getLength()<=1:e.base.call(this,i)}return i.divide(this.size).getLength()<=.5},_hitTestSelf:function i(n,s,r,o){var a=!1,l=this._style,h=s.stroke&&l.hasStroke(),u=s.fill&&l.hasFill();if(h||u){var c=this._type,d=this._radius,p=h?l.getStrokeWidth()/2:0,f=s._tolerancePadding.add(j._getStrokePadding(p,!l.getStrokeScaling()&&o));if("rectangle"===c){var g=f.multiply(2),m=t(this,n,g);if(m)a=e(n.subtract(m.point),d,f,m.quadrant);else{var v=new x(this._size).setCenter(0,0),b=v.expand(g),_=v.expand(g.negate());a=b._containsPoint(n)&&!_._containsPoint(n)}}else a=e(n,d,f)}return a?new N(h?"stroke":"fill",this):i.base.apply(this,arguments)}}},{statics:new function(){function t(t,e,i,n,s){var r=u.create(E.prototype);return r._type=t,r._size=i,r._radius=n,r._initialize(u.getNamed(s),e),r}return{Circle:function(){var e=arguments,i=b.readNamed(e,"center"),n=u.readNamed(e,"radius");return t("circle",i,new y(2*n),n,e)},Rectangle:function(){var e=arguments,i=x.readNamed(e,"rectangle"),n=y.min(y.readNamed(e,"radius"),i.getSize(!0).divide(2));return t("rectangle",i.getCenter(!0),i.getSize(!0),n,e)},Ellipse:function(){var e=arguments,i=E._readEllipse(e),n=i.radius;return t("ellipse",i.center,n.multiply(2),n,e)},_readEllipse:function(t){var e,i;if(u.hasNamed(t,"radius"))e=b.readNamed(t,"center"),i=y.readNamed(t,"radius");else{var n=x.readNamed(t,"rectangle");e=n.getCenter(!0),i=n.getSize(!0).divide(2)}return{center:e,radius:i}}}}}),M=T.extend({_class:"Raster",_applyMatrix:!1,_canApplyMatrix:!1,_boundsOptions:{stroke:!1,handle:!1},_serializeFields:{crossOrigin:null,source:null},_prioritize:["crossOrigin"],_smoothing:"low",beans:!0,initialize:function(t,e){if(!this._initialize(t,e!==a&&b.read(arguments))){var i,n=typeof t,s="string"===n?h.getElementById(t):"object"===n?t:null;if(s&&s!==T.NO_INSERT)if(s.getContext||null!=s.naturalHeight)i=s;else if(s){var r=y.read(arguments);r.isZero()||(i=lt.getCanvas(r))}i?this.setImage(i):this.setSource(t)}this._size||(this._size=new y,this._loaded=!1)},_equals:function(t){return this.getSource()===t.getSource()},copyContent:function(t){var e=t._image,i=t._canvas;if(e)this._setImage(e);else if(i){var n=lt.getCanvas(t._size);n.getContext("2d").drawImage(i,0,0),this._setImage(n)}this._crossOrigin=t._crossOrigin},getSize:function(){var t=this._size;return new w(t?t.width:0,t?t.height:0,this,"setSize")},setSize:function(t,e){var i=y.read(arguments);if(i.equals(this._size))e&&this.clear();else if(i.width>0&&i.height>0){var n=!e&&this.getElement();this._setImage(lt.getCanvas(i)),n&&this.getContext(!0).drawImage(n,0,0,i.width,i.height)}else this._canvas&&lt.release(this._canvas),this._size=i.clone()},getWidth:function(){return this._size?this._size.width:0},setWidth:function(t){this.setSize(t,this.getHeight())},getHeight:function(){return this._size?this._size.height:0},setHeight:function(t){this.setSize(this.getWidth(),t)},getLoaded:function(){return this._loaded},isEmpty:function(){var t=this._size;return!t||0===t.width&&0===t.height},getResolution:function(){var t=this._matrix,e=new b(0,0).transform(t),i=new b(1,0).transform(t).subtract(e),n=new b(0,1).transform(t).subtract(e);return new y(72/i.getLength(),72/n.getLength())},getPpi:"#getResolution",getImage:function(){return this._image},setImage:function(t){var e=this;function i(t){var i=e.getView(),n=t&&t.type||"load";i&&e.responds(n)&&(dt=i._scope,e.emit(n,new tt(t)))}this._setImage(t),this._loaded?setTimeout(i,0):t&&J.add(t,{load:function(n){e._setImage(t),i(n)},error:i})},_setImage:function(t){this._canvas&&lt.release(this._canvas),t&&t.getContext?(this._image=null,this._canvas=t,this._loaded=!0):(this._image=t,this._canvas=null,this._loaded=!!(t&&t.src&&t.complete)),this._size=new y(t?t.naturalWidth||t.width:0,t?t.naturalHeight||t.height:0),this._context=null,this._changed(1033)},getCanvas:function(){if(!this._canvas){var t=lt.getContext(this._size);try{this._image&&t.drawImage(this._image,0,0),this._canvas=t.canvas}catch(e){lt.release(t)}}return this._canvas},setCanvas:"#setImage",getContext:function(t){return this._context||(this._context=this.getCanvas().getContext("2d")),t&&(this._image=null,this._changed(1025)),this._context},setContext:function(t){this._context=t},getSource:function(){var t=this._image;return t&&t.src||this.toDataURL()},setSource:function(t){var e=new o.Image,i=this._crossOrigin;i&&(e.crossOrigin=i),t&&(e.src=t),this.setImage(e)},getCrossOrigin:function(){var t=this._image;return t&&t.crossOrigin||this._crossOrigin||""},setCrossOrigin:function(t){this._crossOrigin=t;var e=this._image;e&&(e.crossOrigin=t)},getSmoothing:function(){return this._smoothing},setSmoothing:function(t){this._smoothing="string"==typeof t?t:t?"low":"off",this._changed(257)},getElement:function(){return this._canvas||this._loaded&&this._image}},{beans:!1,getSubCanvas:function(){var t=x.read(arguments),e=lt.getContext(t.getSize());return e.drawImage(this.getCanvas(),t.x,t.y,t.width,t.height,0,0,t.width,t.height),e.canvas},getSubRaster:function(){var t=x.read(arguments),e=new M(T.NO_INSERT);return e._setImage(this.getSubCanvas(t)),e.translate(t.getCenter().subtract(this.getSize().divide(2))),e._matrix.prepend(this._matrix),e.insertAbove(this),e},toDataURL:function(){var t=this._image,e=t&&t.src;if(/^data:/.test(e))return e;var i=this.getCanvas();return i?i.toDataURL.apply(i,arguments):null},drawImage:function(t){var e=b.read(arguments,1);this.getContext(!0).drawImage(t,e.x,e.y)},getAverageColor:function(t){var e,i;if(t?t instanceof V?(i=t,e=t.getBounds()):"object"==typeof t&&("width"in t?e=new x(t):"x"in t&&(e=new x(t.x-.5,t.y-.5,1,1))):e=this.getBounds(),!e)return null;var n=Math.min(e.width,32),s=Math.min(e.height,32),r=M._sampleContext;r?r.clearRect(0,0,33,33):r=M._sampleContext=lt.getContext(new y(32)),r.save();var o=(new S).scale(n/e.width,s/e.height).translate(-e.x,-e.y);o.applyToContext(r),i&&i.draw(r,new u({clip:!0,matrices:[o]})),this._matrix.applyToContext(r);var a=this.getElement(),l=this._size;a&&r.drawImage(a,-l.width/2,-l.height/2),r.restore();for(var h=r.getImageData(.5,.5,Math.ceil(n),Math.ceil(s)).data,c=[0,0,0],d=0,p=0,f=h.length;p<f;p+=4){var g=h[p+3];d+=g,g/=255,c[0]+=h[p]*g,c[1]+=h[p+1]*g,c[2]+=h[p+2]*g}for(p=0;p<3;p++)c[p]/=d;return d?W.read(c):null},getPixel:function(){var t=b.read(arguments),e=this.getContext().getImageData(t.x,t.y,1,1).data;return new W("rgb",[e[0]/255,e[1]/255,e[2]/255],e[3]/255)},setPixel:function(){var t=arguments,e=b.read(t),i=W.read(t),n=i._convert("rgb"),s=i._alpha,r=this.getContext(!0),o=r.createImageData(1,1),a=o.data;a[0]=255*n[0],a[1]=255*n[1],a[2]=255*n[2],a[3]=null!=s?255*s:255,r.putImageData(o,e.x,e.y)},clear:function(){var t=this._size;this.getContext(!0).clearRect(0,0,t.width+1,t.height+1)},createImageData:function(){var t=y.read(arguments);return this.getContext().createImageData(t.width,t.height)},getImageData:function(){var t=x.read(arguments);return t.isEmpty()&&(t=new x(this._size)),this.getContext().getImageData(t.x,t.y,t.width,t.height)},setImageData:function(t){var e=b.read(arguments,1);this.getContext(!0).putImageData(t,e.x,e.y)},_getBounds:function(t,e){var i=new x(this._size).setCenter(0,0);return t?t._transformBounds(i):i},_hitTestSelf:function(t){if(this._contains(t)){var e=this;return new N("pixel",e,{offset:t.add(e._size.divide(2)).round(),color:{get:function(){return e.getPixel(this.offset)}}})}},_draw:function(t,e,i){var n=this.getElement();if(n&&n.width>0&&n.height>0){t.globalAlpha=m.clamp(this._opacity,0,1),this._setStyles(t,e,i);var s=this._smoothing,r="off"===s;Y.setPrefixed(t,r?"imageSmoothingEnabled":"imageSmoothingQuality",!r&&s),t.drawImage(n,-this._size.width/2,-this._size.height/2)}},_canComposite:function(){return!0}}),D=T.extend({_class:"SymbolItem",_applyMatrix:!1,_canApplyMatrix:!1,_boundsOptions:{stroke:!0},_serializeFields:{symbol:null},initialize:function(t,e){this._initialize(t,e!==a&&b.read(arguments,1))||this.setDefinition(t instanceof L?t:new L(t))},_equals:function(t){return this._definition===t._definition},copyContent:function(t){this.setDefinition(t._definition)},getDefinition:function(){return this._definition},setDefinition:function(t){this._definition=t,this._changed(9)},getSymbol:"#getDefinition",setSymbol:"#setDefinition",isEmpty:function(){return this._definition._item.isEmpty()},_getBounds:function(t,e){var i=this._definition._item;return i._getCachedBounds(i._matrix.prepended(t),e)},_hitTestSelf:function(t,e,i){var n=e.extend({all:!1}),s=this._definition._item._hitTest(t,n,i);return s&&(s.item=this),s},_draw:function(t,e){this._definition._item.draw(t,e)}}),L=u.extend({_class:"SymbolDefinition",initialize:function(t,e){this._id=v.get(),this.project=dt.project,t&&this.setItem(t,e)},_serialize:function(t,e){return e.add(this,(function(){return u.serialize([this._class,this._item],t,!1,e)}))},_changed:function(t){8&t&&T._clearBoundsCache(this),1&t&&this.project._changed(t)},getItem:function(){return this._item},setItem:function(t,e){t._symbol&&(t=t.clone()),this._item&&(this._item._symbol=null),this._item=t,t.remove(),t.setSelected(!1),e||t.setPosition(new b),t._symbol=this,this._changed(9)},getDefinition:"#getItem",setDefinition:"#setItem",place:function(t){return new D(this,t)},clone:function(){return new L(this._item.clone(!1))},equals:function(t){return t===this||t&&this._item.equals(t._item)||!1}}),N=u.extend({_class:"HitResult",initialize:function(t,e,i){this.type=t,this.item=e,i&&this.inject(i)},statics:{getOptions:function(t){var e=t&&u.read(t);return new u({type:null,tolerance:dt.settings.hitTolerance,fill:!e,stroke:!e,segments:!e,handles:!1,ends:!1,position:!1,center:!1,bounds:!1,guides:!1,selected:!1},e)}}}),O=u.extend({_class:"Segment",beans:!0,_selection:0,initialize:function(t,e,i,n,s,r){var o,l,h,u,c=arguments.length;c>0&&(null==t||"object"==typeof t?1===c&&t&&"point"in t?(o=t.point,l=t.handleIn,h=t.handleOut,u=t.selection):(o=t,l=e,h=i,u=n):(o=[t,e],l=i!==a?[i,n]:null,h=s!==a?[s,r]:null)),new R(o,this,"_point"),new R(l,this,"_handleIn"),new R(h,this,"_handleOut"),u&&this.setSelection(u)},_serialize:function(t,e){var i=this._point,n=this._selection,s=n||this.hasHandles()?[i,this._handleIn,this._handleOut]:i;return n&&s.push(n),u.serialize(s,t,!0,e)},_changed:function(t){var e=this._path;if(e){var i,n=e._curves,s=this._index;n&&(t&&t!==this._point&&t!==this._handleIn||!(i=s>0?n[s-1]:e._closed?n[n.length-1]:null)||i._changed(),t&&t!==this._point&&t!==this._handleOut||!(i=n[s])||i._changed()),e._changed(41)}},getPoint:function(){return this._point},setPoint:function(){this._point.set(b.read(arguments))},getHandleIn:function(){return this._handleIn},setHandleIn:function(){this._handleIn.set(b.read(arguments))},getHandleOut:function(){return this._handleOut},setHandleOut:function(){this._handleOut.set(b.read(arguments))},hasHandles:function(){return!this._handleIn.isZero()||!this._handleOut.isZero()},isSmooth:function(){var t=this._handleIn,e=this._handleOut;return!t.isZero()&&!e.isZero()&&t.isCollinear(e)},clearHandles:function(){this._handleIn._set(0,0),this._handleOut._set(0,0)},getSelection:function(){return this._selection},setSelection:function(t){var e=this._selection,i=this._path;this._selection=t=t||0,i&&t!==e&&(i._updateSelection(this,e,t),i._changed(257))},_changeSelection:function(t,e){var i=this._selection;this.setSelection(e?i|t:i&~t)},isSelected:function(){return!!(7&this._selection)},setSelected:function(t){this._changeSelection(7,t)},getIndex:function(){return this._index!==a?this._index:null},getPath:function(){return this._path||null},getCurve:function(){var t=this._path,e=this._index;return t?(e>0&&!t._closed&&e===t._segments.length-1&&e--,t.getCurves()[e]||null):null},getLocation:function(){var t=this.getCurve();return t?new B(t,this===t._segment1?0:1):null},getNext:function(){var t=this._path&&this._path._segments;return t&&(t[this._index+1]||this._path._closed&&t[0])||null},smooth:function(t,e,i){var n=t||{},s=n.type,r=n.factor,o=this.getPrevious(),l=this.getNext(),h=(o||this)._point,u=this._point,c=(l||this)._point,d=h.getDistance(u),p=u.getDistance(c);if(s&&"catmull-rom"!==s){if("geometric"!==s)throw new Error("Smoothing method '"+s+"' not supported.");if(o&&l){var f=h.subtract(c),g=r===a?.4:r,m=g*d/(d+p);e||this.setHandleIn(f.multiply(m)),i||this.setHandleOut(f.multiply(m-g))}}else{var v=r===a?.5:r,_=Math.pow(d,v),y=_*_,w=Math.pow(p,v),x=w*w;if(!e&&o){var C=2*x+3*w*_+y,S=3*w*(w+_);this.setHandleIn(0!==S?new b((x*h._x+C*u._x-y*c._x)/S-u._x,(x*h._y+C*u._y-y*c._y)/S-u._y):new b)}!i&&l&&(C=2*y+3*_*w+x,S=3*_*(_+w),this.setHandleOut(0!==S?new b((y*c._x+C*u._x-x*h._x)/S-u._x,(y*c._y+C*u._y-x*h._y)/S-u._y):new b))}},getPrevious:function(){var t=this._path&&this._path._segments;return t&&(t[this._index-1]||this._path._closed&&t[t.length-1])||null},isFirst:function(){return!this._index},isLast:function(){var t=this._path;return t&&this._index===t._segments.length-1||!1},reverse:function(){var t=this._handleIn,e=this._handleOut,i=t.clone();t.set(e),e.set(i)},reversed:function(){return new O(this._point,this._handleOut,this._handleIn)},remove:function(){return!!this._path&&!!this._path.removeSegment(this._index)},clone:function(){return new O(this._point,this._handleIn,this._handleOut)},equals:function(t){return t===this||t&&this._class===t._class&&this._point.equals(t._point)&&this._handleIn.equals(t._handleIn)&&this._handleOut.equals(t._handleOut)||!1},toString:function(){var t=["point: "+this._point];return this._handleIn.isZero()||t.push("handleIn: "+this._handleIn),this._handleOut.isZero()||t.push("handleOut: "+this._handleOut),"{ "+t.join(", ")+" }"},transform:function(t){this._transformCoordinates(t,new Array(6),!0),this._changed()},interpolate:function(t,e,i){var n=1-i,s=i,r=t._point,o=e._point,a=t._handleIn,l=e._handleIn,h=e._handleOut,u=t._handleOut;this._point._set(n*r._x+s*o._x,n*r._y+s*o._y,!0),this._handleIn._set(n*a._x+s*l._x,n*a._y+s*l._y,!0),this._handleOut._set(n*u._x+s*h._x,n*u._y+s*h._y,!0),this._changed()},_transformCoordinates:function(t,e,i){var n=this._point,s=i&&this._handleIn.isZero()?null:this._handleIn,r=i&&this._handleOut.isZero()?null:this._handleOut,o=n._x,a=n._y,l=2;return e[0]=o,e[1]=a,s&&(e[l++]=s._x+o,e[l++]=s._y+a),r&&(e[l++]=r._x+o,e[l++]=r._y+a),t&&(t._transformCoordinates(e,e,l/2),o=e[0],a=e[1],i?(n._x=o,n._y=a,l=2,s&&(s._x=e[l++]-o,s._y=e[l++]-a),r&&(r._x=e[l++]-o,r._y=e[l++]-a)):(s||(e[l++]=o,e[l++]=a),r||(e[l++]=o,e[l++]=a))),e}}),R=b.extend({initialize:function(t,e,i){var n,s,r;if(t)if((n=t[0])!==a)s=t[1];else{var o=t;(n=o.x)===a&&(n=(o=b.read(arguments)).x),s=o.y,r=o.selected}else n=s=0;this._x=n,this._y=s,this._owner=e,e[i]=this,r&&this.setSelected(!0)},_set:function(t,e){return this._x=t,this._y=e,this._owner._changed(this),this},getX:function(){return this._x},setX:function(t){this._x=t,this._owner._changed(this)},getY:function(){return this._y},setY:function(t){this._y=t,this._owner._changed(this)},isZero:function(){var t=m.isZero;return t(this._x)&&t(this._y)},isSelected:function(){return!!(this._owner._selection&this._getSelection())},setSelected:function(t){this._owner._changeSelection(this._getSelection(),t)},_getSelection:function(){var t=this._owner;return this===t._point?1:this===t._handleIn?2:this===t._handleOut?4:0}}),F=u.extend({_class:"Curve",beans:!0,initialize:function(t,e,i,n,s,r,o,a){var l,h,u,c,d,p,f=arguments.length;3===f?(this._path=t,l=e,h=i):f?1===f?"segment1"in t?(l=new O(t.segment1),h=new O(t.segment2)):"point1"in t?(u=t.point1,d=t.handle1,p=t.handle2,c=t.point2):Array.isArray(t)&&(u=[t[0],t[1]],c=[t[6],t[7]],d=[t[2]-t[0],t[3]-t[1]],p=[t[4]-t[6],t[5]-t[7]]):2===f?(l=new O(t),h=new O(e)):4===f?(u=t,d=e,p=i,c=n):8===f&&(u=[t,e],c=[o,a],d=[i-t,n-e],p=[s-o,r-a]):(l=new O,h=new O),this._segment1=l||new O(u,null,d),this._segment2=h||new O(c,p,null)},_serialize:function(t,e){return u.serialize(this.hasHandles()?[this.getPoint1(),this.getHandle1(),this.getHandle2(),this.getPoint2()]:[this.getPoint1(),this.getPoint2()],t,!0,e)},_changed:function(){this._length=this._bounds=a},clone:function(){return new F(this._segment1,this._segment2)},toString:function(){var t=["point1: "+this._segment1._point];return this._segment1._handleOut.isZero()||t.push("handle1: "+this._segment1._handleOut),this._segment2._handleIn.isZero()||t.push("handle2: "+this._segment2._handleIn),t.push("point2: "+this._segment2._point),"{ "+t.join(", ")+" }"},classify:function(){return F.classify(this.getValues())},remove:function(){var t=!1;if(this._path){var e=this._segment2,i=e._handleOut;(t=e.remove())&&this._segment1._handleOut.set(i)}return t},getPoint1:function(){return this._segment1._point},setPoint1:function(){this._segment1._point.set(b.read(arguments))},getPoint2:function(){return this._segment2._point},setPoint2:function(){this._segment2._point.set(b.read(arguments))},getHandle1:function(){return this._segment1._handleOut},setHandle1:function(){this._segment1._handleOut.set(b.read(arguments))},getHandle2:function(){return this._segment2._handleIn},setHandle2:function(){this._segment2._handleIn.set(b.read(arguments))},getSegment1:function(){return this._segment1},getSegment2:function(){return this._segment2},getPath:function(){return this._path},getIndex:function(){return this._segment1._index},getNext:function(){var t=this._path&&this._path._curves;return t&&(t[this._segment1._index+1]||this._path._closed&&t[0])||null},getPrevious:function(){var t=this._path&&this._path._curves;return t&&(t[this._segment1._index-1]||this._path._closed&&t[t.length-1])||null},isFirst:function(){return!this._segment1._index},isLast:function(){var t=this._path;return t&&this._segment1._index===t._curves.length-1||!1},isSelected:function(){return this.getPoint1().isSelected()&&this.getHandle1().isSelected()&&this.getHandle2().isSelected()&&this.getPoint2().isSelected()},setSelected:function(t){this.getPoint1().setSelected(t),this.getHandle1().setSelected(t),this.getHandle2().setSelected(t),this.getPoint2().setSelected(t)},getValues:function(t){return F.getValues(this._segment1,this._segment2,t)},getPoints:function(){for(var t=this.getValues(),e=[],i=0;i<8;i+=2)e.push(new b(t[i],t[i+1]));return e}},{getLength:function(){return null==this._length&&(this._length=F.getLength(this.getValues(),0,1)),this._length},getArea:function(){return F.getArea(this.getValues())},getLine:function(){return new P(this._segment1._point,this._segment2._point)},getPart:function(t,e){return new F(F.getPart(this.getValues(),t,e))},getPartLength:function(t,e){return F.getLength(this.getValues(),t,e)},divideAt:function(t){return this.divideAtTime(t&&t.curve===this?t.time:this.getTimeAt(t))},divideAtTime:function(t,e){var i=null;if(t>=1e-8&&t<=.99999999){var n=F.subdivide(this.getValues(),t),s=n[0],r=n[1],o=e||this.hasHandles(),a=this._segment1,l=this._segment2,h=this._path;o&&(a._handleOut._set(s[2]-s[0],s[3]-s[1]),l._handleIn._set(r[4]-r[6],r[5]-r[7]));var u=s[6],c=s[7],d=new O(new b(u,c),o&&new b(s[4]-u,s[5]-c),o&&new b(r[2]-u,r[3]-c));h?(h.insert(a._index+1,d),i=this.getNext()):(this._segment2=d,this._changed(),i=new F(d,l))}return i},splitAt:function(t){var e=this._path;return e?e.splitAt(t):null},splitAtTime:function(t){return this.splitAt(this.getLocationAtTime(t))},divide:function(t,e){return this.divideAtTime(t===a?.5:e?t:this.getTimeAt(t))},split:function(t,e){return this.splitAtTime(t===a?.5:e?t:this.getTimeAt(t))},reversed:function(){return new F(this._segment2.reversed(),this._segment1.reversed())},clearHandles:function(){this._segment1._handleOut._set(0,0),this._segment2._handleIn._set(0,0)},statics:{getValues:function(t,e,i,n){var s=t._point,r=t._handleOut,o=e._handleIn,a=e._point,l=s.x,h=s.y,u=a.x,c=a.y,d=n?[l,h,l,h,u,c,u,c]:[l,h,l+r._x,h+r._y,u+o._x,c+o._y,u,c];return i&&i._transformCoordinates(d,d,4),d},subdivide:function(t,e){var i=t[0],n=t[1],s=t[2],r=t[3],o=t[4],l=t[5],h=t[6],u=t[7];e===a&&(e=.5);var c=1-e,d=c*i+e*s,p=c*n+e*r,f=c*s+e*o,g=c*r+e*l,m=c*o+e*h,v=c*l+e*u,b=c*d+e*f,_=c*p+e*g,y=c*f+e*m,w=c*g+e*v,x=c*b+e*y,C=c*_+e*w;return[[i,n,d,p,b,_,x,C],[x,C,y,w,m,v,h,u]]},getMonoCurves:function(t,e){var i=[],n=e?0:1,s=t[n+0],r=t[n+2],o=t[n+4],a=t[n+6];if(s>=r==r>=o&&r>=o==o>=a||F.isStraight(t))i.push(t);else{var l=3*(r-o)-s+a,h=2*(s+o)-4*r,u=r-s,c=[],d=m.solveQuadratic(l,h,u,c,1e-8,.99999999);if(d){c.sort();var p=c[0],f=F.subdivide(t,p);i.push(f[0]),d>1&&(p=(c[1]-p)/(1-p),f=F.subdivide(f[1],p),i.push(f[0])),i.push(f[1])}else i.push(t)}return i},solveCubic:function(t,e,i,n,s,r){var o=t[e],a=t[e+2],l=t[e+4],h=t[e+6],u=0;if(!(o<i&&h<i&&a<i&&l<i||o>i&&h>i&&a>i&&l>i)){var c=3*(a-o),d=3*(l-a)-c,p=h-o-c-d;u=m.solveCubic(p,d,c,o-i,n,s,r)}return u},getTimeOf:function(t,e){var i=new b(t[0],t[1]),n=new b(t[6],t[7]),s=1e-7;if(null===(e.isClose(i,1e-12)?0:e.isClose(n,1e-12)?1:null))for(var r=[e.x,e.y],o=[],a=0;a<2;a++)for(var l=F.solveCubic(t,a,r[a],o,0,1),h=0;h<l;h++){var u=o[h];if(e.isClose(F.getPoint(t,u),s))return u}return e.isClose(i,s)?0:e.isClose(n,s)?1:null},getNearestTime:function(t,e){if(F.isStraight(t)){var i=t[0],n=t[1],s=t[6]-i,r=t[7]-n,o=s*s+r*r;if(0===o)return 0;var a=((e.x-i)*s+(e.y-n)*r)/o;return a<1e-12?0:a>.999999999999?1:F.getTimeOf(t,new b(i+a*s,n+a*r))}var l=1/0,h=0;function u(i){if(i>=0&&i<=1){var n=e.getDistance(F.getPoint(t,i),!0);if(n<l)return l=n,h=i,!0}}for(var c=0;c<=100;c++)u(c/100);for(var d=.005;d>1e-8;)u(h-d)||u(h+d)||(d/=2);return h},getPart:function(t,e,i){var n=e>i;if(n){var s=e;e=i,i=s}return e>0&&(t=F.subdivide(t,e)[1]),i<1&&(t=F.subdivide(t,(i-e)/(1-e))[0]),n?[t[6],t[7],t[4],t[5],t[2],t[3],t[0],t[1]]:t},isFlatEnough:function(t,e){var i=t[0],n=t[1],s=t[2],r=t[3],o=t[4],a=t[5],l=t[6],h=t[7],u=3*s-2*i-l,c=3*r-2*n-h,d=3*o-2*l-i,p=3*a-2*h-n;return Math.max(u*u,d*d)+Math.max(c*c,p*p)<=16*e*e},getArea:function(t){var e=t[0],i=t[1],n=t[2],s=t[3],r=t[4],o=t[5],a=t[6],l=t[7];return 3*((l-i)*(n+r)-(a-e)*(s+o)+s*(e-r)-n*(i-o)+l*(r+e/3)-a*(o+i/3))/20},getBounds:function(t){for(var e=t.slice(0,2),i=e.slice(),n=[0,0],s=0;s<2;s++)F._addBounds(t[s],t[s+2],t[s+4],t[s+6],s,0,e,i,n);return new x(e[0],e[1],i[0]-e[0],i[1]-e[1])},_addBounds:function(t,e,i,n,s,r,o,a,l){function h(t,e){var i=t-e,n=t+e;i<o[s]&&(o[s]=i),n>a[s]&&(a[s]=n)}r/=2;var u=o[s]+r,c=a[s]-r;if(t<u||e<u||i<u||n<u||t>c||e>c||i>c||n>c)if(e<t!=e<n&&i<t!=i<n)h(t,0),h(n,0);else{var d=3*(e-i)-t+n,p=2*(t+i)-4*e,f=e-t,g=m.solveQuadratic(d,p,f,l);h(n,0);for(var v=0;v<g;v++){var b=l[v],_=1-b;1e-8<=b&&b<=.99999999&&h(_*_*_*t+3*_*_*b*e+3*_*b*b*i+b*b*b*n,r)}}}}},u.each(["getBounds","getStrokeBounds","getHandleBounds"],(function(t){this[t]=function(){this._bounds||(this._bounds={});var e=this._bounds[t];return e||(e=this._bounds[t]=j[t]([this._segment1,this._segment2],!1,this._path)),e.clone()}}),{}),u.each({isStraight:function(t,e,i,n){if(e.isZero()&&i.isZero())return!0;var s=n.subtract(t);if(s.isZero())return!1;if(s.isCollinear(e)&&s.isCollinear(i)){var r=new P(t,n);if(r.getDistance(t.add(e))<1e-7&&r.getDistance(n.add(i))<1e-7){var o=s.dot(s),a=s.dot(e)/o,l=s.dot(i)/o;return a>=0&&a<=1&&l<=0&&l>=-1}}return!1},isLinear:function(t,e,i,n){var s=n.subtract(t).divide(3);return e.equals(s)&&i.negate().equals(s)}},(function(t,e){this[e]=function(e){var i=this._segment1,n=this._segment2;return t(i._point,i._handleOut,n._handleIn,n._point,e)},this.statics[e]=function(e,i){var n=e[0],s=e[1],r=e[6],o=e[7];return t(new b(n,s),new b(e[2]-n,e[3]-s),new b(e[4]-r,e[5]-o),new b(r,o),i)}}),{statics:{},hasHandles:function(){return!this._segment1._handleOut.isZero()||!this._segment2._handleIn.isZero()},hasLength:function(t){return(!this.getPoint1().equals(this.getPoint2())||this.hasHandles())&&this.getLength()>(t||0)},isCollinear:function(t){return t&&this.isStraight()&&t.isStraight()&&this.getLine().isCollinear(t.getLine())},isHorizontal:function(){return this.isStraight()&&Math.abs(this.getTangentAtTime(.5).y)<1e-8},isVertical:function(){return this.isStraight()&&Math.abs(this.getTangentAtTime(.5).x)<1e-8}}),{beans:!1,getLocationAt:function(t,e){return this.getLocationAtTime(e?t:this.getTimeAt(t))},getLocationAtTime:function(t){return null!=t&&t>=0&&t<=1?new B(this,t):null},getTimeAt:function(t,e){return F.getTimeAt(this.getValues(),t,e)},getParameterAt:"#getTimeAt",getTimesWithTangent:function(){var t=b.read(arguments);return t.isZero()?[]:F.getTimesWithTangent(this.getValues(),t)},getOffsetAtTime:function(t){return this.getPartLength(0,t)},getLocationOf:function(){return this.getLocationAtTime(this.getTimeOf(b.read(arguments)))},getOffsetOf:function(){var t=this.getLocationOf.apply(this,arguments);return t?t.getOffset():null},getTimeOf:function(){return F.getTimeOf(this.getValues(),b.read(arguments))},getParameterOf:"#getTimeOf",getNearestLocation:function(){var t=b.read(arguments),e=this.getValues(),i=F.getNearestTime(e,t),n=F.getPoint(e,i);return new B(this,i,n,null,t.getDistance(n))},getNearestPoint:function(){var t=this.getNearestLocation.apply(this,arguments);return t?t.getPoint():t}},new function(){var t=["getPoint","getTangent","getNormal","getWeightedTangent","getWeightedNormal","getCurvature"];return u.each(t,(function(t){this[t+"At"]=function(e,i){var n=this.getValues();return F[t](n,i?e:F.getTimeAt(n,e))},this[t+"AtTime"]=function(e){return F[t](this.getValues(),e)}}),{statics:{_evaluateMethods:t}})},new function(){function t(t){var e=t[0],i=t[1],n=t[2],s=t[3],r=t[4],o=t[5],a=t[6],l=t[7],h=9*(n-r)+3*(a-e),u=6*(e+r)-12*n,c=3*(n-e),d=9*(s-o)+3*(l-i),p=6*(i+o)-12*s,f=3*(s-i);return function(t){var e=(h*t+u)*t+c,i=(d*t+p)*t+f;return Math.sqrt(e*e+i*i)}}function e(t,e){return Math.max(2,Math.min(16,Math.ceil(32*Math.abs(e-t))))}function i(t,e,i,n){if(null==e||e<0||e>1)return null;var s=t[0],r=t[1],o=t[2],a=t[3],l=t[4],h=t[5],u=t[6],c=t[7],d=m.isZero;d(o-s)&&d(a-r)&&(o=s,a=r),d(l-u)&&d(h-c)&&(l=u,h=c);var p,f,g=3*(o-s),v=3*(l-o)-g,_=u-s-g-v,y=3*(a-r),w=3*(h-a)-y,x=c-r-y-w;if(0===i)p=0===e?s:1===e?u:((_*e+v)*e+g)*e+s,f=0===e?r:1===e?c:((x*e+w)*e+y)*e+r;else{var C=1e-8,S=1-C;if(e<C?(p=g,f=y):e>S?(p=3*(u-l),f=3*(c-h)):(p=(3*_*e+2*v)*e+g,f=(3*x*e+2*w)*e+y),n){0===p&&0===f&&(e<C||e>S)&&(p=l-o,f=h-a);var P=Math.sqrt(p*p+f*f);P&&(p/=P,f/=P)}if(3===i){l=6*_*e+2*v,h=6*x*e+2*w;var k=Math.pow(p*p+f*f,1.5);p=0!==k?(p*h-f*l)/k:0,f=0}}return 2===i?new b(f,-p):new b(p,f)}return{statics:{classify:function(t){var e=t[0],i=t[1],n=t[2],s=t[3],r=t[4],o=t[5],l=t[6],h=t[7],u=n*(i-h)+s*(l-e)+e*h-i*l,c=3*(r*(s-i)+o*(e-n)+n*i-s*e),d=c-u,p=d-u+(e*(h-o)+i*(r-l)+l*o-h*r),f=Math.sqrt(p*p+d*d+c*c),g=0!==f?1/f:0,v=m.isZero,b="serpentine";function _(t,e,i){var n=e!==a,s=n&&e>0&&e<1,r=n&&i>0&&i<1;return!n||(s||r)&&("loop"!==t||s&&r)||(t="arch",s=r=!1),{type:t,roots:s||r?s&&r?e<i?[e,i]:[i,e]:[s?e:i]:null}}if(d*=g,c*=g,v(p*=g))return v(d)?_(v(c)?"line":"quadratic"):_(b,c/(3*d));var y=3*d*d-4*p*c;if(v(y))return _("cusp",d/(2*p));var w=y>0?Math.sqrt(y/3):Math.sqrt(-y),x=2*p;return _(y>0?b:"loop",(d+w)/x,(d-w)/x)},getLength:function(i,n,s,r){if(n===a&&(n=0),s===a&&(s=1),F.isStraight(i)){var o=i;s<1&&(o=F.subdivide(o,s)[0],n/=s),n>0&&(o=F.subdivide(o,n)[1]);var l=o[6]-o[0],h=o[7]-o[1];return Math.sqrt(l*l+h*h)}return m.integrate(r||t(i),n,s,e(n,s))},getTimeAt:function(i,n,s){if(s===a&&(s=n<0?1:0),0===n)return s;var r=Math.abs,o=n>0,l=o?s:0,h=o?1:s,u=t(i),c=F.getLength(i,l,h,u),d=r(n)-c;if(r(d)<1e-12)return o?h:l;if(d>1e-12)return null;var p=n/c,f=0;return m.findRoot((function(t){return f+=m.integrate(u,s,t,e(s,t)),s=t,f-n}),u,s+p,l,h,32,1e-12)},getPoint:function(t,e){return i(t,e,0,!1)},getTangent:function(t,e){return i(t,e,1,!0)},getWeightedTangent:function(t,e){return i(t,e,1,!1)},getNormal:function(t,e){return i(t,e,2,!0)},getWeightedNormal:function(t,e){return i(t,e,2,!1)},getCurvature:function(t,e){return i(t,e,3,!1).x},getPeaks:function(t){var e=t[0],i=t[1],n=t[2],s=t[3],r=t[4],o=t[5],a=3*n-e-3*r+t[6],l=3*e-6*n+3*r,h=-3*e+3*n,u=3*s-i-3*o+t[7],c=3*i-6*s+3*o,d=-3*i+3*s,p=[];return m.solveCubic(9*(a*a+u*u),9*(a*l+c*u),2*(l*l+c*c)+3*(h*a+d*u),h*l+c*d,p,1e-8,.99999999),p.sort()}}}},new function(){function t(t,e,i,n,s,r,o){var a=!o&&i.getPrevious()===s,l=!o&&i!==s&&i.getNext()===s,h=1e-8,u=1-h;if(null!==n&&n>=(a?h:0)&&n<=(l?u:1)&&null!==r&&r>=(l?h:0)&&r<=(a?u:1)){var c=new B(i,n,null,o),d=new B(s,r,null,o);c._intersection=d,d._intersection=c,e&&!e(c)||B.insert(t,c,!0)}}function e(n,s,r,o,a,l,h,u,c,d,p,f,g){if(++c>=4096||++u>=40)return c;var m,v,b=s[0],_=s[1],y=s[6],w=s[7],x=P.getSignedDistance,C=x(b,_,y,w,s[2],s[3]),S=x(b,_,y,w,s[4],s[5]),k=C*S>0?3/4:4/9,T=k*Math.min(0,C,S),A=k*Math.max(0,C,S),I=x(b,_,y,w,n[0],n[1]),E=x(b,_,y,w,n[2],n[3]),M=x(b,_,y,w,n[4],n[5]),D=x(b,_,y,w,n[6],n[7]),L=function(t,e,i,n){var s,r=[0,t],o=[1/3,e],a=[2/3,i],l=[1,n],h=e-(2*t+n)/3,u=i-(t+2*n)/3;if(h*u<0)s=[[r,o,l],[r,a,l]];else{var c=h/u;s=[c>=2?[r,o,l]:c<=.5?[r,a,l]:[r,o,a,l],[r,l]]}return(h||u)<0?s.reverse():s}(I,E,M,D),N=L[0],O=L[1];if(0===C&&0===S&&0===I&&0===E&&0===M&&0===D||null==(m=i(N,O,T,A))||null==(v=i(N.reverse(),O.reverse(),T,A)))return c;var R=d+(p-d)*m,B=d+(p-d)*v;if(Math.max(g-f,B-R)<1e-9){var V=(R+B)/2,j=(f+g)/2;t(a,l,h?o:r,h?j:V,h?r:o,h?V:j)}else{n=F.getPart(n,m,v);var z=g-f;if(v-m>.8)if(B-R>z)V=(R+B)/2,c=e(s,(U=F.subdivide(n,.5))[0],o,r,a,l,!h,u,c,f,g,R,V),c=e(s,U[1],o,r,a,l,!h,u,c,f,g,V,B);else{var U;j=(f+g)/2,c=e((U=F.subdivide(s,.5))[0],n,o,r,a,l,!h,u,c,f,j,R,B),c=e(U[1],n,o,r,a,l,!h,u,c,j,g,R,B)}else c=0===z||z>=1e-9?e(s,n,o,r,a,l,!h,u,c,f,g,R,B):e(n,s,r,o,a,l,h,u,c,R,B,f,g)}return c}function i(t,e,i,s){return t[0][1]<i?n(t,!0,i):e[0][1]>s?n(e,!1,s):t[0][0]}function n(t,e,i){for(var n=t[0][0],s=t[0][1],r=1,o=t.length;r<o;r++){var a=t[r][0],l=t[r][1];if(e?l>=i:l<=i)return l===i?a:n+(i-s)*(a-n)/(l-s);n=a,s=l}return null}function s(t,e,i,n,s){var r=m.isZero;if(r(n)&&r(s)){var o=F.getTimeOf(t,new b(e,i));return null===o?[]:[o]}for(var a=Math.atan2(-s,n),l=Math.sin(a),h=Math.cos(a),u=[],c=[],d=0;d<8;d+=2){var p=t[d]-e,f=t[d+1]-i;u.push(p*h-f*l,p*l+f*h)}return F.solveCubic(u,1,0,c,0,1),c}function r(e,i,n,r,o,a,l){for(var h=i[0],u=i[1],c=s(e,h,u,i[6]-h,i[7]-u),d=0,p=c.length;d<p;d++){var f=c[d],g=F.getPoint(e,f),m=F.getTimeOf(i,g);null!==m&&t(o,a,l?r:n,l?m:f,l?n:r,l?f:m)}}function o(e,i,n,s,r,o){var a=P.intersect(e[0],e[1],e[6],e[7],i[0],i[1],i[6],i[7]);a&&t(r,o,n,F.getTimeOf(e,a),s,F.getTimeOf(i,a))}function a(i,n,s,a,l,u){var c=1e-12,d=Math.min,p=Math.max;if(p(i[0],i[2],i[4],i[6])+c>d(n[0],n[2],n[4],n[6])&&d(i[0],i[2],i[4],i[6])-c<p(n[0],n[2],n[4],n[6])&&p(i[1],i[3],i[5],i[7])+c>d(n[1],n[3],n[5],n[7])&&d(i[1],i[3],i[5],i[7])-c<p(n[1],n[3],n[5],n[7])){var f=h(i,n);if(f)for(var g=0;g<2;g++){var m=f[g];t(l,u,s,m[0],a,m[1],!0)}else{var v=F.isStraight(i),_=F.isStraight(n),y=v&&_,w=v&&!_,x=l.length;if((y?o:v||_?r:e)(w?n:i,w?i:n,w?a:s,w?s:a,l,u,w,0,0,0,1,0,1),!y||l.length===x)for(g=0;g<4;g++){var C=g>>1,S=1&g,P=6*C,k=6*S,T=new b(i[P],i[P+1]),A=new b(n[k],n[k+1]);T.isClose(A,c)&&t(l,u,s,C,a,S)}}}return l}function l(e,i,n,s){var r=F.classify(e);if("loop"===r.type){var o=r.roots;t(n,s,i,o[0],i,o[1])}return n}function h(t,e){function i(t){var e=t[6]-t[0],i=t[7]-t[1];return e*e+i*i}var n=Math.abs,s=P.getDistance,r=1e-7,o=F.isStraight(t),a=F.isStraight(e),l=o&&a,h=i(t)<i(e),u=h?e:t,c=h?t:e,d=u[0],p=u[1],f=u[6]-d,g=u[7]-p;if(s(d,p,f,g,c[0],c[1],!0)<r&&s(d,p,f,g,c[6],c[7],!0)<r)!l&&s(d,p,f,g,u[2],u[3],!0)<r&&s(d,p,f,g,u[4],u[5],!0)<r&&s(d,p,f,g,c[2],c[3],!0)<r&&s(d,p,f,g,c[4],c[5],!0)<r&&(o=a=l=!0);else if(l)return null;if(o^a)return null;for(var m=[t,e],v=[],_=0;_<4&&v.length<2;_++){var y=1&_,w=1^y,x=_>>1,C=F.getTimeOf(m[y],new b(m[w][x?6:0],m[w][x?7:1]));if(null!=C){var S=y?[x,C]:[C,x];(!v.length||n(S[0]-v[0][0])>1e-8&&n(S[1]-v[0][1])>1e-8)&&v.push(S)}if(_>2&&!v.length)break}if(2!==v.length)v=null;else if(!l){var k=F.getPart(t,v[0][0],v[1][0]),T=F.getPart(e,v[0][1],v[1][1]);(n(T[2]-k[2])>r||n(T[3]-k[3])>r||n(T[4]-k[4])>r||n(T[5]-k[5])>r)&&(v=null)}return v}return{getIntersections:function(t){var e=this.getValues(),i=t&&t!==this&&t.getValues();return i?a(e,i,this,t,[]):l(e,this,[])},statics:{getOverlaps:h,getIntersections:function(t,e,i,n,s,r){var o=!e;o&&(e=t);for(var h=t.length,u=e.length,c=new Array(h),d=o?c:new Array(u),p=[],g=0;g<h;g++)c[g]=t[g].getValues(n);if(!o)for(g=0;g<u;g++)d[g]=e[g].getValues(s);for(var m=f.findCurveBoundsCollisions(c,d,1e-7),v=0;v<h;v++){var b=t[v],_=c[v];o&&l(_,b,p,i);var y=m[v];if(y)for(var w=0;w<y.length;w++){if(r&&p.length)return p;var x=y[w];if(!o||x>v){var C=e[x];a(_,d[x],b,C,p,i)}}}return p},getCurveLineIntersections:s,getTimesWithTangent:function(t,e){var i=t[0],n=t[1],s=t[2],r=t[3],o=t[4],a=t[5],l=t[6],h=t[7],u=e.normalize(),c=u.x,d=u.y,p=3*l-9*o+9*s-3*i,f=3*h-9*a+9*r-3*n,g=6*o-12*s+6*i,v=6*a-12*r+6*n,b=3*s-3*i,_=3*r-3*n,y=2*p*d-2*f*c,w=[];if(Math.abs(y)<m.CURVETIME_EPSILON){if(0!=(y=p*v-f*g)){var x=-(p*_-f*b)/y;x>=0&&x<=1&&w.push(x)}}else{var C=(g*g-4*p*b)*d*d+(-2*g*v+4*f*b+4*p*_)*c*d+(v*v-4*f*_)*c*c,S=g*d-v*c;if(C>=0&&0!=y){var P=Math.sqrt(C),k=-(S+P)/y,T=(-S+P)/y;k>=0&&k<=1&&w.push(k),T>=0&&T<=1&&w.push(T)}}return w}}}}),B=u.extend({_class:"CurveLocation",initialize:function(t,e,i,n,s){if(e>=.99999999){var r=t.getNext();r&&(e=0,t=r)}this._setCurve(t),this._time=e,this._point=i||t.getPointAtTime(e),this._overlap=n,this._distance=s,this._intersection=this._next=this._previous=null},_setPath:function(t){this._path=t,this._version=t?t._version:0},_setCurve:function(t){this._setPath(t._path),this._curve=t,this._segment=null,this._segment1=t._segment1,this._segment2=t._segment2},_setSegment:function(t){var e=t.getCurve();e?this._setCurve(e):(this._setPath(t._path),this._segment1=t,this._segment2=null),this._segment=t,this._time=t===this._segment1?0:1,this._point=t._point.clone()},getSegment:function(){var t=this._segment;if(!t){var e=this.getCurve(),i=this.getTime();0===i?t=e._segment1:1===i?t=e._segment2:null!=i&&(t=e.getPartLength(0,i)<e.getPartLength(i,1)?e._segment1:e._segment2),this._segment=t}return t},getCurve:function(){var t=this._path,e=this;function i(t){var i=t&&t.getCurve();if(i&&null!=(e._time=i.getTimeOf(e._point)))return e._setCurve(i),i}return t&&t._version!==this._version&&(this._time=this._offset=this._curveOffset=this._curve=null),this._curve||i(this._segment)||i(this._segment1)||i(this._segment2.getPrevious())},getPath:function(){var t=this.getCurve();return t&&t._path},getIndex:function(){var t=this.getCurve();return t&&t.getIndex()},getTime:function(){var t=this.getCurve(),e=this._time;return t&&null==e?this._time=t.getTimeOf(this._point):e},getParameter:"#getTime",getPoint:function(){return this._point},getOffset:function(){var t=this._offset;if(null==t){t=0;var e=this.getPath(),i=this.getIndex();if(e&&null!=i)for(var n=e.getCurves(),s=0;s<i;s++)t+=n[s].getLength();this._offset=t+=this.getCurveOffset()}return t},getCurveOffset:function(){var t=this._curveOffset;if(null==t){var e=this.getCurve(),i=this.getTime();this._curveOffset=t=null!=i&&e&&e.getPartLength(0,i)}return t},getIntersection:function(){return this._intersection},getDistance:function(){return this._distance},divide:function(){var t=this.getCurve(),e=t&&t.divideAtTime(this.getTime());return e&&this._setSegment(e._segment1),e},split:function(){var t=this.getCurve(),e=t._path,i=t&&t.splitAtTime(this.getTime());return i&&this._setSegment(e.getLastSegment()),i},equals:function(t,e){var i=this===t;if(!i&&t instanceof B){var n=this.getCurve(),s=t.getCurve(),r=n._path;if(r===s._path){var o=Math.abs,a=o(this.getOffset()-t.getOffset()),l=!e&&this._intersection,h=!e&&t._intersection;i=(a<1e-7||r&&o(r.getLength()-a)<1e-7)&&(!l&&!h||l&&h&&l.equals(h,!0))}}return i},toString:function(){var t=[],e=this.getPoint(),i=g.instance;e&&t.push("point: "+e);var n=this.getIndex();null!=n&&t.push("index: "+n);var s=this.getTime();return null!=s&&t.push("time: "+i.number(s)),null!=this._distance&&t.push("distance: "+i.number(this._distance)),"{ "+t.join(", ")+" }"},isTouching:function(){var t=this._intersection;if(t&&this.getTangent().isCollinear(t.getTangent())){var e=this.getCurve(),i=t.getCurve();return!(e.isStraight()&&i.isStraight()&&e.getLine().intersect(i.getLine()))}return!1},isCrossing:function(){var t=this._intersection;if(!t)return!1;var e=this.getTime(),i=t.getTime(),n=1e-8,s=1-n,r=e>=n&&e<=s,o=i>=n&&i<=s;if(r&&o)return!this.isTouching();var a=this.getCurve(),l=a&&e<n?a.getPrevious():a,h=t.getCurve(),u=h&&i<n?h.getPrevious():h;if(e>s&&(a=a.getNext()),i>s&&(h=h.getNext()),!(l&&a&&u&&h))return!1;var c=[];function d(t,e){var i=t.getValues(),n=F.classify(i).roots||F.getPeaks(i),s=n.length,r=F.getLength(i,e&&s?n[s-1]:0,!e&&s?n[0]:1);c.push(s?r:r/32)}function p(t,e,i){return e<i?t>e&&t<i:t>e||t<i}r||(d(l,!0),d(a,!1)),o||(d(u,!0),d(h,!1));var f=this.getPoint(),g=Math.min.apply(Math,c),m=r?a.getTangentAtTime(e):a.getPointAt(g).subtract(f),v=r?m.negate():l.getPointAt(-g).subtract(f),b=o?h.getTangentAtTime(i):h.getPointAt(g).subtract(f),_=o?b.negate():u.getPointAt(-g).subtract(f),y=v.getAngle(),w=m.getAngle(),x=_.getAngle(),C=b.getAngle();return!!(r?p(y,x,C)^p(w,x,C)&&p(y,C,x)^p(w,C,x):p(x,y,w)^p(C,y,w)&&p(x,w,y)^p(C,w,y))},hasOverlap:function(){return!!this._overlap}},u.each(F._evaluateMethods,(function(t){var e=t+"At";this[t]=function(){var t=this.getCurve(),i=this.getTime();return null!=i&&t&&t[e](i,!0)}}),{preserve:!0}),new function(){function t(t,e,i){var n=t.length,s=0,r=n-1;function o(i,s){for(var r=i+s;r>=-1&&r<=n;r+=s){var o=t[(r%n+n)%n];if(!e.getPoint().isClose(o.getPoint(),1e-7))break;if(e.equals(o))return o}return null}for(;s<=r;){var a,l=s+r>>>1,h=t[l];if(i&&(a=e.equals(h)?h:o(l,-1)||o(l,1)))return e._overlap&&(a._overlap=a._intersection._overlap=!0),a;var u=e.getPath(),c=h.getPath();(u!==c?u._id-c._id:e.getIndex()+e.getTime()-(h.getIndex()+h.getTime()))<0?r=l-1:s=l+1}return t.splice(s,0,e),e}return{statics:{insert:t,expand:function(e){for(var i=e.slice(),n=e.length-1;n>=0;n--)t(i,e[n]._intersection,!1);return i}}}}),V=T.extend({_class:"PathItem",_selectBounds:!1,_canScaleStroke:!0,beans:!0,initialize:function(){},statics:{create:function(t){var e,i,n;if(u.isPlainObject(t)?(i=t.segments,e=t.pathData):Array.isArray(t)?i=t:"string"==typeof t&&(e=t),i){var s=i[0];n=s&&Array.isArray(s[0])}else e&&(n=(e.match(/m/gi)||[]).length>1||/z\s*\S+/i.test(e));return new(n?z:j)(t)}},_asPathItem:function(){return this},isClockwise:function(){return this.getArea()>=0},setClockwise:function(t){this.isClockwise()!=(t=!!t)&&this.reverse()},setPathData:function(t){var e,i,n,s=t&&t.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/gi),r=!1,o=new b,a=new b;function l(t,i){var n=+e[t];return r&&(n+=o[i]),n}function h(t){return new b(l(t,"x"),l(t+1,"y"))}this.clear();for(var u=0,c=s&&s.length;u<c;u++){var d=s[u],p=d[0],f=p.toLowerCase(),g=(e=d.match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g))&&e.length;switch(r=p===f,"z"!==i||/[mz]/.test(f)||this.moveTo(o),f){case"m":case"l":for(var m="m"===f,v=0;v<g;v+=2)this[m?"moveTo":"lineTo"](o=h(v)),m&&(a=o,m=!1);n=o;break;case"h":case"v":var _="h"===f?"x":"y";for(o=o.clone(),v=0;v<g;v++)o[_]=l(v,_),this.lineTo(o);n=o;break;case"c":for(v=0;v<g;v+=6)this.cubicCurveTo(h(v),n=h(v+2),o=h(v+4));break;case"s":for(v=0;v<g;v+=4)this.cubicCurveTo(/[cs]/.test(i)?o.multiply(2).subtract(n):o,n=h(v),o=h(v+2)),i=f;break;case"q":for(v=0;v<g;v+=4)this.quadraticCurveTo(n=h(v),o=h(v+2));break;case"t":for(v=0;v<g;v+=2)this.quadraticCurveTo(n=/[qt]/.test(i)?o.multiply(2).subtract(n):o,o=h(v)),i=f;break;case"a":for(v=0;v<g;v+=7)this.arcTo(o=h(v+5),new y(+e[v],+e[v+1]),+e[v+2],+e[v+4],+e[v+3]);break;case"z":this.closePath(1e-12),o=a}i=f}},_canComposite:function(){return!(this.hasFill()&&this.hasStroke())},_contains:function(t){var e=t.isInside(this.getBounds({internal:!0,handle:!0}))?this._getWinding(t):{};return e.onPath||!!("evenodd"===this.getFillRule()?1&e.windingL||1&e.windingR:e.winding)},getIntersections:function(t,e,i,n){var s=this===t||!t,r=this._matrix._orNullIfIdentity(),o=s?r:(i||t._matrix)._orNullIfIdentity();return s||this.getBounds(r).intersects(t.getBounds(o),1e-12)?F.getIntersections(this.getCurves(),!s&&t.getCurves(),e,r,o,n):[]},getCrossings:function(t){return this.getIntersections(t,(function(t){return t.isCrossing()}))},getNearestLocation:function(){for(var t=b.read(arguments),e=this.getCurves(),i=1/0,n=null,s=0,r=e.length;s<r;s++){var o=e[s].getNearestLocation(t);o._distance<i&&(i=o._distance,n=o)}return n},getNearestPoint:function(){var t=this.getNearestLocation.apply(this,arguments);return t?t.getPoint():t},interpolate:function(t,e,i){var n=!this._children,s=n?"_segments":"_children",r=t[s],o=e[s],a=this[s];if(!r||!o||r.length!==o.length)throw new Error("Invalid operands in interpolate() call: "+t+", "+e);var l=a.length,h=o.length;if(l<h)for(var u=n?O:j,c=l;c<h;c++)this.add(new u);else l>h&&this[n?"removeSegments":"removeChildren"](h,l);for(c=0;c<h;c++)a[c].interpolate(r[c],o[c],i);n&&(this.setClosed(t._closed),this._changed(9))},compare:function(t){var e=!1;if(t){var i=this._children||[this],n=t._children?t._children.slice():[t],s=i.length,r=n.length,o=[],a=0;e=!0;for(var l=f.findItemBoundsCollisions(i,n,m.GEOMETRIC_EPSILON),h=s-1;h>=0&&e;h--){var u=i[h];e=!1;var c=l[h];if(c)for(var d=c.length-1;d>=0&&!e;d--)u.compare(n[c[d]])&&(o[c[d]]||(o[c[d]]=!0,a++),e=!0)}e=e&&a===r}return e}}),j=V.extend({_class:"Path",_serializeFields:{segments:[],closed:!1},initialize:function(t){this._closed=!1,this._segments=[],this._version=0;var e=arguments,i=Array.isArray(t)?"object"==typeof t[0]?t:e:!t||t.size!==a||t.x===a&&t.point===a?null:e;i&&i.length>0?this.setSegments(i):(this._curves=a,this._segmentSelection=0,i||"string"!=typeof t||(this.setPathData(t),t=null)),this._initialize(!i&&t)},_equals:function(t){return this._closed===t._closed&&u.equals(this._segments,t._segments)},copyContent:function(t){this.setSegments(t._segments),this._closed=t._closed},_changed:function t(e){if(t.base.call(this,e),8&e){if(this._length=this._area=a,32&e)this._version++;else if(this._curves)for(var i=0,n=this._curves.length;i<n;i++)this._curves[i]._changed()}else 64&e&&(this._bounds=a)},getStyle:function(){var t=this._parent;return(t instanceof z?t:this)._style},getSegments:function(){return this._segments},setSegments:function(t){var e=this.isFullySelected(),i=t&&t.length;if(this._segments.length=0,this._segmentSelection=0,this._curves=a,i){var n=t[i-1];"boolean"==typeof n&&(this.setClosed(n),i--),this._add(O.readList(t,0,{},i))}e&&this.setFullySelected(!0)},getFirstSegment:function(){return this._segments[0]},getLastSegment:function(){return this._segments[this._segments.length-1]},getCurves:function(){var t=this._curves,e=this._segments;if(!t){var i=this._countCurves();t=this._curves=new Array(i);for(var n=0;n<i;n++)t[n]=new F(this,e[n],e[n+1]||e[0])}return t},getFirstCurve:function(){return this.getCurves()[0]},getLastCurve:function(){var t=this.getCurves();return t[t.length-1]},isClosed:function(){return this._closed},setClosed:function(t){if(this._closed!=(t=!!t)){if(this._closed=t,this._curves){var e=this._curves.length=this._countCurves();t&&(this._curves[e-1]=new F(this,this._segments[e-1],this._segments[0]))}this._changed(41)}}},{beans:!0,getPathData:function(t,e){var i,n,s,r,o,a,l,h,u=this._segments,c=u.length,d=new g(e),p=new Array(6),f=!0,m=[];function v(e,u){if(e._transformCoordinates(t,p),i=p[0],n=p[1],f)m.push("M"+d.pair(i,n)),f=!1;else if(o=p[2],a=p[3],o===i&&a===n&&l===s&&h===r){if(!u){var c=i-s,g=n-r;m.push(0===c?"v"+d.number(g):0===g?"h"+d.number(c):"l"+d.pair(c,g))}}else m.push("c"+d.pair(l-s,h-r)+" "+d.pair(o-s,a-r)+" "+d.pair(i-s,n-r));s=i,r=n,l=p[4],h=p[5]}if(!c)return"";for(var b=0;b<c;b++)v(u[b]);return this._closed&&c>0&&(v(u[0],!0),m.push("z")),m.join("")},isEmpty:function(){return!this._segments.length},_transformContent:function(t){for(var e=this._segments,i=new Array(6),n=0,s=e.length;n<s;n++)e[n]._transformCoordinates(t,i,!0);return!0},_add:function(t,e){for(var i=this._segments,n=this._curves,s=t.length,r=null==e,o=(e=r?i.length:e,0);o<s;o++){var a=t[o];a._path&&(a=t[o]=a.clone()),a._path=this,a._index=e+o,a._selection&&this._updateSelection(a,0,a._selection)}if(r)u.push(i,t);else{i.splice.apply(i,[e,0].concat(t)),o=e+s;for(var l=i.length;o<l;o++)i[o]._index=o}if(n){var h=this._countCurves(),c=e>0&&e+s-1===h?e-1:e,d=c,p=Math.min(c+s,h);for(t._curves&&(n.splice.apply(n,[c,0].concat(t._curves)),d+=t._curves.length),o=d;o<p;o++)n.splice(o,0,new F(this,null,null));this._adjustCurves(c,p)}return this._changed(41),t},_adjustCurves:function(t,e){for(var i,n=this._segments,s=this._curves,r=t;r<e;r++)(i=s[r])._path=this,i._segment1=n[r],i._segment2=n[r+1]||n[0],i._changed();(i=s[this._closed&&!t?n.length-1:t-1])&&(i._segment2=n[t]||n[0],i._changed()),(i=s[e])&&(i._segment1=n[e],i._changed())},_countCurves:function(){var t=this._segments.length;return!this._closed&&t>0?t-1:t},add:function(t){var e=arguments;return e.length>1&&"number"!=typeof t?this._add(O.readList(e)):this._add([O.read(e)])[0]},insert:function(t,e){var i=arguments;return i.length>2&&"number"!=typeof e?this._add(O.readList(i,1),t):this._add([O.read(i,1)],t)[0]},addSegment:function(){return this._add([O.read(arguments)])[0]},insertSegment:function(t){return this._add([O.read(arguments,1)],t)[0]},addSegments:function(t){return this._add(O.readList(t))},insertSegments:function(t,e){return this._add(O.readList(e),t)},removeSegment:function(t){return this.removeSegments(t,t+1)[0]||null},removeSegments:function(t,e,i){t=t||0,e=u.pick(e,this._segments.length);var n=this._segments,s=this._curves,r=n.length,o=n.splice(t,e-t),a=o.length;if(!a)return o;for(var l=0;l<a;l++){var h=o[l];h._selection&&this._updateSelection(h,h._selection,0),h._index=h._path=null}l=t;for(var c=n.length;l<c;l++)n[l]._index=l;if(s){var d=t>0&&e===r+(this._closed?1:0)?t-1:t;for(l=(s=s.splice(d,a)).length-1;l>=0;l--)s[l]._path=null;i&&(o._curves=s.slice(1)),this._adjustCurves(d,d)}return this._changed(41),o},clear:"#removeSegments",hasHandles:function(){for(var t=this._segments,e=0,i=t.length;e<i;e++)if(t[e].hasHandles())return!0;return!1},clearHandles:function(){for(var t=this._segments,e=0,i=t.length;e<i;e++)t[e].clearHandles()},getLength:function(){if(null==this._length){for(var t=this.getCurves(),e=0,i=0,n=t.length;i<n;i++)e+=t[i].getLength();this._length=e}return this._length},getArea:function(){var t=this._area;if(null==t){var e=this._segments,i=this._closed;t=0;for(var n=0,s=e.length;n<s;n++){var r=n+1===s;t+=F.getArea(F.getValues(e[n],e[r?0:n+1],null,r&&!i))}this._area=t}return t},isFullySelected:function(){var t=this._segments.length;return this.isSelected()&&t>0&&this._segmentSelection===7*t},setFullySelected:function(t){t&&this._selectSegments(!0),this.setSelected(t)},setSelection:function t(e){1&e||this._selectSegments(!1),t.base.call(this,e)},_selectSegments:function(t){var e=this._segments,i=e.length,n=t?7:0;this._segmentSelection=n*i;for(var s=0;s<i;s++)e[s]._selection=n},_updateSelection:function(t,e,i){t._selection=i,(this._segmentSelection+=i-e)>0&&this.setSelected(!0)},divideAt:function(t){var e,i=this.getLocationAt(t);return i&&(e=i.getCurve().divideAt(i.getCurveOffset()))?e._segment1:null},splitAt:function(t){var e=this.getLocationAt(t),i=e&&e.index,n=e&&e.time;n>.99999999&&(i++,n=0);var s=this.getCurves();if(i>=0&&i<s.length){n>=1e-8&&s[i++].divideAtTime(n);var r,o=this.removeSegments(i,this._segments.length,!0);return this._closed?(this.setClosed(!1),r=this):((r=new j(T.NO_INSERT)).insertAbove(this),r.copyAttributes(this)),r._add(o,0),this.addSegment(o[0]),r}return null},split:function(t,e){var i,n=e===a?t:(i=this.getCurves()[t])&&i.getLocationAtTime(e);return null!=n?this.splitAt(n):null},join:function(t,e){var i=e||0;if(t&&t!==this){var n=t._segments,s=this.getLastSegment(),r=t.getLastSegment();if(!r)return this;s&&s._point.isClose(r._point,i)&&t.reverse();var o=t.getFirstSegment();if(s&&s._point.isClose(o._point,i))s.setHandleOut(o._handleOut),this._add(n.slice(1));else{var a=this.getFirstSegment();a&&a._point.isClose(o._point,i)&&t.reverse(),r=t.getLastSegment(),a&&a._point.isClose(r._point,i)?(a.setHandleIn(r._handleIn),this._add(n.slice(0,n.length-1),0)):this._add(n.slice())}t._closed&&this._add([n[0]]),t.remove()}var l=this.getFirstSegment(),h=this.getLastSegment();return l!==h&&l._point.isClose(h._point,i)&&(l.setHandleIn(h._handleIn),h.remove(),this.setClosed(!0)),this},reduce:function(t){for(var e=this.getCurves(),i=t&&t.simplify,n=i?1e-7:0,s=e.length-1;s>=0;s--){var r=e[s];!r.hasHandles()&&(!r.hasLength(n)||i&&r.isCollinear(r.getNext()))&&r.remove()}return this},reverse:function(){this._segments.reverse();for(var t=0,e=this._segments.length;t<e;t++){var i=this._segments[t],n=i._handleIn;i._handleIn=i._handleOut,i._handleOut=n,i._index=t}this._curves=null,this._changed(9)},flatten:function(t){for(var e=new U(this,t||.25,256,!0).parts,i=e.length,n=[],s=0;s<i;s++)n.push(new O(e[s].curve.slice(0,2)));!this._closed&&i>0&&n.push(new O(e[i-1].curve.slice(6))),this.setSegments(n)},simplify:function(t){var e=new q(this).fit(t||2.5);return e&&this.setSegments(e),!!e},smooth:function(t){var e=this,i=t||{},n=i.type||"asymmetric",s=this._segments,r=s.length,o=this._closed;function l(t,i){var n=t&&t.index;if(null!=n){var s=t.path;if(s&&s!==e)throw new Error(t._class+" "+n+" of "+s+" is not part of "+e);i&&t instanceof F&&n++}else n="number"==typeof t?t:i;return Math.min(n<0&&o?n%r:n<0?n+r:n,r-1)}var h=o&&i.from===a&&i.to===a,u=l(i.from,0),c=l(i.to,r-1);if(u>c)if(o)u-=r;else{var d=u;u=c,c=d}if(/^(?:asymmetric|continuous)$/.test(n)){var p="asymmetric"===n,f=Math.min,g=c-u+1,m=g-1,v=h?f(g,4):1,b=v,_=v,y=[];if(o||(b=f(1,u),_=f(1,r-c-1)),(m+=b+_)<=1)return;for(var w=0,x=u-b;w<=m;w++,x++)y[w]=s[(x<0?x+r:x)%r]._point;var C=y[0]._x+2*y[1]._x,S=y[0]._y+2*y[1]._y,P=2,k=m-1,T=[C],A=[S],I=[P],E=[],M=[];for(w=1;w<m;w++){var D=w<k,L=D?4:p?2:7,N=D?4:p?3:8,O=D?2:p?0:1,R=(D||p?1:2)/P;P=I[w]=L-R,C=T[w]=N*y[w]._x+O*y[w+1]._x-R*C,S=A[w]=N*y[w]._y+O*y[w+1]._y-R*S}for(E[k]=T[k]/I[k],M[k]=A[k]/I[k],w=m-2;w>=0;w--)E[w]=(T[w]-E[w+1])/I[w],M[w]=(A[w]-M[w+1])/I[w];E[m]=(3*y[m]._x-E[k])/2,M[m]=(3*y[m]._y-M[k])/2,w=b;var B=m-_;for(x=u;w<=B;w++,x++){var V=s[x<0?x+r:x],j=V._point,z=E[w]-j._x,U=M[w]-j._y;(h||w<B)&&V.setHandleOut(z,U),(h||w>b)&&V.setHandleIn(-z,-U)}}else for(w=u;w<=c;w++)s[w<0?w+r:w].smooth(i,!h&&w===u,!h&&w===c)},toShape:function(t){if(!this._closed)return null;var e,i,n,s,r,o,l,h=this._segments;function u(t,e){var i=h[t],n=i.getNext(),s=h[e],r=s.getNext();return i._handleOut.isZero()&&n._handleIn.isZero()&&s._handleOut.isZero()&&r._handleIn.isZero()&&n._point.subtract(i._point).isCollinear(r._point.subtract(s._point))}function c(t){var e=h[t],i=e.getNext(),n=e._handleOut,s=i._handleIn,r=.5522847498307936;if(n.isOrthogonal(s)){var o=e._point,a=i._point,l=new P(o,n,!0).intersect(new P(a,s,!0),!0);return l&&m.isZero(n.getLength()/l.subtract(o).getLength()-r)&&m.isZero(s.getLength()/l.subtract(a).getLength()-r)}return!1}function d(t,e){return h[t]._point.getDistance(h[e]._point)}if(!this.hasHandles()&&4===h.length&&u(0,2)&&u(1,3)&&(o=(r=h[1]).getPrevious(),l=r.getNext(),o._handleOut.isZero()&&r._handleIn.isZero()&&r._handleOut.isZero()&&l._handleIn.isZero()&&r._point.subtract(o._point).isOrthogonal(l._point.subtract(r._point)))?(e=E.Rectangle,i=new y(d(0,3),d(0,1)),s=h[1]._point.add(h[2]._point).divide(2)):8===h.length&&c(0)&&c(2)&&c(4)&&c(6)&&u(1,5)&&u(3,7)?(e=E.Rectangle,n=(i=new y(d(1,6),d(0,3))).subtract(new y(d(0,7),d(1,2))).divide(2),s=h[3]._point.add(h[4]._point).divide(2)):4===h.length&&c(0)&&c(1)&&c(2)&&c(3)&&(m.isZero(d(0,2)-d(1,3))?(e=E.Circle,n=d(0,2)/2):(e=E.Ellipse,n=new y(d(2,0)/2,d(3,1)/2)),s=h[1]._point),e){var p=this.getPosition(!0),f=new e({center:p,size:i,radius:n,insert:!1});return f.copyAttributes(this,!0),f._matrix.prepend(this._matrix),f.rotate(s.subtract(p).getAngle()+90),(t===a||t)&&f.insertAbove(this),f}return null},toPath:"#clone",compare:function t(e){if(!e||e instanceof z)return t.base.call(this,e);var i=this.getCurves(),n=e.getCurves(),s=i.length,r=n.length;if(!s||!r)return s==r;for(var o,a,l=i[0].getValues(),h=[],u=0,c=0,d=0;d<r;d++){var p=n[d].getValues();if(h.push(p),m=F.getOverlaps(l,p)){o=!d&&m[0][0]>0?r-1:d,a=m[0][1];break}}var f,g=Math.abs;for(p=h[o];l&&p;){var m;if((m=F.getOverlaps(l,p))&&g(m[0][0]-c)<1e-8){1===(c=m[1][0])&&(l=++u<s?i[u].getValues():null,c=0);var v=m[0][1];if(g(v-a)<1e-8){if(f||(f=[o,v]),1===(a=m[1][1])&&(++o>=r&&(o=0),p=h[o]||n[o].getValues(),a=0),!l)return f[0]===o&&f[1]===a;continue}}break}return!1},_hitTestSelf:function(t,e,i,n){var s,r,o,a,l,h,u=this,c=this.getStyle(),d=this._segments,p=d.length,f=this._closed,g=e._tolerancePadding,m=g,v=e.stroke&&c.hasStroke(),b=e.fill&&c.hasFill(),_=e.curves,y=v?c.getStrokeWidth()/2:b&&e.tolerance>0||_?0:null;function w(e,i){return t.subtract(e).divide(i).length<=1}function x(t,i,n){if(!e.selected||i.isSelected()){var s=t._point;if(i!==s&&(i=i.add(s)),w(i,m))return new N(n,u,{segment:t,point:i})}}function C(t,i){return(i||e.segments)&&x(t,t._point,"segment")||!i&&e.handles&&(x(t,t._handleIn,"handle-in")||x(t,t._handleOut,"handle-out"))}function S(t){a.add(t)}function P(e){var i,l=f||e._index>0&&e._index<p-1;return"round"===(l?s:r)?w(e._point,m):(a=new j({internal:!0,closed:!0}),l?e.isSmooth()||j._addBevelJoin(e,s,y,o,null,n,S,!0):"square"===r&&j._addSquareCap(e,r,y,null,n,S,!0),a.isEmpty()?void 0:a.contains(t)||(i=a.getNearestLocation(t))&&w(i.getPoint(),g))}if(null!==y&&(y>0?(s=c.getStrokeJoin(),r=c.getStrokeCap(),o=c.getMiterLimit(),m=m.add(j._getStrokePadding(y,n))):s=r="round"),!e.ends||e.segments||f){if(e.segments||e.handles)for(var k=0;k<p;k++)if(h=C(d[k]))return h}else if(h=C(d[0],!0)||C(d[p-1],!0))return h;if(null!==y){if(l=this.getNearestLocation(t)){var T=l.getTime();0===T||1===T&&p>1?P(l.getSegment())||(l=null):w(l.getPoint(),m)||(l=null)}if(!l&&"miter"===s&&p>1)for(k=0;k<p;k++){var A=d[k];if(t.getDistance(A._point)<=o*y&&P(A)){l=A.getLocation();break}}}return!l&&b&&this._contains(t)||l&&!v&&!_?new N("fill",this):l?new N(v?"stroke":"curve",this,{location:l,point:l.getPoint()}):null}},u.each(F._evaluateMethods,(function(t){this[t+"At"]=function(e){var i=this.getLocationAt(e);return i&&i[t]()}}),{beans:!1,getLocationOf:function(){for(var t=b.read(arguments),e=this.getCurves(),i=0,n=e.length;i<n;i++){var s=e[i].getLocationOf(t);if(s)return s}return null},getOffsetOf:function(){var t=this.getLocationOf.apply(this,arguments);return t?t.getOffset():null},getLocationAt:function(t){if("number"==typeof t){for(var e=this.getCurves(),i=0,n=0,s=e.length;n<s;n++){var r=i,o=e[n];if((i+=o.getLength())>t)return o.getLocationAt(t-r)}if(e.length>0&&t<=this.getLength())return new B(e[e.length-1],1)}else if(t&&t.getPath&&t.getPath()===this)return t;return null},getOffsetsWithTangent:function(){var t=b.read(arguments);if(t.isZero())return[];for(var e=[],i=0,n=this.getCurves(),s=0,r=n.length;s<r;s++){for(var o=n[s],a=o.getTimesWithTangent(t),l=0,h=a.length;l<h;l++){var u=i+o.getOffsetAtTime(a[l]);e.indexOf(u)<0&&e.push(u)}i+=o.length}return e}}),new function(){function t(t,e,i){var n,s,r,o,a,l,h,u,c=e._segments,d=c.length,p=new Array(6),f=!0;function g(e){if(i)e._transformCoordinates(i,p),n=p[0],s=p[1];else{var c=e._point;n=c._x,s=c._y}if(f)t.moveTo(n,s),f=!1;else{if(i)a=p[2],l=p[3];else{var d=e._handleIn;a=n+d._x,l=s+d._y}a===n&&l===s&&h===r&&u===o?t.lineTo(n,s):t.bezierCurveTo(h,u,a,l,n,s)}r=n,o=s,i?(h=p[4],u=p[5]):(d=e._handleOut,h=r+d._x,u=o+d._y)}for(var m=0;m<d;m++)g(c[m]);e._closed&&d>0&&g(c[0])}return{_draw:function(e,i,n,s){var r=i.dontStart,o=i.dontFinish||i.clip,a=this.getStyle(),l=a.hasFill(),h=a.hasStroke(),u=a.getDashArray(),c=!dt.support.nativeDash&&h&&u&&u.length;function d(t){return u[(t%c+c)%c]}if(r||e.beginPath(),(l||h&&!c||o)&&(t(e,this,s),this._closed&&e.closePath()),!o&&(l||h)&&(this._setStyles(e,i,n),l&&(e.fill(a.getFillRule()),e.shadowColor="rgba(0,0,0,0)"),h)){if(c){r||e.beginPath();for(var p,f=new U(this,.25,32,!1,s),g=f.length,m=-a.getDashOffset(),v=0;m>0;)m-=d(v--)+d(v--);for(;m<g;)p=m+d(v++),(m>0||p>0)&&f.drawPart(e,Math.max(m,0),Math.max(p,0)),m=p+d(v++)}e.stroke()}},_drawSelected:function(e,i){e.beginPath(),t(e,this,i),e.stroke(),function(t,e,i,n){if(!(n<=0))for(var s,r,o=n/2,a=n-2,l=o-1,h=new Array(6),u=0,c=e.length;u<c;u++){var d=e[u],p=d._selection;if(d._transformCoordinates(i,h),s=h[0],r=h[1],2&p&&g(2),4&p&&g(4),t.fillRect(s-o,r-o,n,n),a>0&&!(1&p)){var f=t.fillStyle;t.fillStyle="#ffffff",t.fillRect(s-l,r-l,a,a),t.fillStyle=f}}function g(e){var i=h[e],n=h[e+1];s==i&&r==n||(t.beginPath(),t.moveTo(s,r),t.lineTo(i,n),t.stroke(),t.beginPath(),t.arc(i,n,o,0,2*Math.PI,!0),t.fill())}}(e,this._segments,i,dt.settings.handleSize)}}},new function(){function t(t){var e=t._segments;if(!e.length)throw new Error("Use a moveTo() command first");return e[e.length-1]}return{moveTo:function(){var t=this._segments;1===t.length&&this.removeSegment(0),t.length||this._add([new O(b.read(arguments))])},moveBy:function(){throw new Error("moveBy() is unsupported on Path items.")},lineTo:function(){this._add([new O(b.read(arguments))])},cubicCurveTo:function(){var e=arguments,i=b.read(e),n=b.read(e),s=b.read(e),r=t(this);r.setHandleOut(i.subtract(r._point)),this._add([new O(s,n.subtract(s))])},quadraticCurveTo:function(){var e=arguments,i=b.read(e),n=b.read(e),s=t(this)._point;this.cubicCurveTo(i.add(s.subtract(i).multiply(1/3)),i.add(n.subtract(i).multiply(1/3)),n)},curveTo:function(){var e=arguments,i=b.read(e),n=b.read(e),s=u.pick(u.read(e),.5),r=1-s,o=t(this)._point,a=i.subtract(o.multiply(r*r)).subtract(n.multiply(s*s)).divide(2*s*r);if(a.isNaN())throw new Error("Cannot put a curve through points with parameter = "+s);this.quadraticCurveTo(a,n)},arcTo:function(){var e,i,n,s,r=arguments,o=Math.abs,a=Math.sqrt,l=t(this),h=l._point,c=b.read(r),d=u.peek(r);if("boolean"==typeof(_=u.pick(d,!0)))var p=(x=h.add(c).divide(2)).add(x.subtract(h).rotate(_?-90:90));else if(u.remain(r)<=2)p=c,c=b.read(r);else if(!h.equals(c)){var f=y.read(r),g=m.isZero;if(g(f.width)||g(f.height))return this.lineTo(c);var v=u.read(r),_=!!u.read(r),w=!!u.read(r),x=h.add(c).divide(2),C=(Q=h.subtract(x).rotate(-v)).x,k=Q.y,T=o(f.width),A=o(f.height),I=T*T,E=A*A,M=C*C,D=k*k,L=a(M/I+D/E);if(L>1&&(I=(T*=L)*T,E=(A*=L)*A),o(L=(I*E-I*D-E*M)/(I*D+E*M))<1e-12&&(L=0),L<0)throw new Error("Cannot create an arc with the given arguments");e=new b(T*k/A,-A*C/T).multiply((w===_?-1:1)*a(L)).rotate(v).add(x),i=(n=(s=(new S).translate(e).rotate(v).scale(T,A))._inverseTransform(h)).getDirectedAngle(s._inverseTransform(c)),!_&&i>0?i-=360:_&&i<0&&(i+=360)}if(p){var N=new P(h.add(p).divide(2),p.subtract(h).rotate(90),!0),R=new P(p.add(c).divide(2),c.subtract(p).rotate(90),!0),F=new P(h,c),B=F.getSide(p);if(!(e=N.intersect(R,!0))){if(!B)return this.lineTo(c);throw new Error("Cannot create an arc with the given arguments")}i=(n=h.subtract(e)).getDirectedAngle(c.subtract(e));var V=F.getSide(e,!0);0===V?i=B*o(i):B===V&&(i+=i<0?360:-360)}if(i){for(var j=1e-7,z=o(i),U=z>=360?4:Math.ceil((z-j)/90),q=i/U,H=q*Math.PI/360,G=4/3*Math.sin(H)/(1+Math.cos(H)),W=[],K=0;K<=U;K++){var Q=c,X=null;if(K<U&&(X=n.rotate(90).multiply(G),s?(Q=s._transformPoint(n),X=s._transformPoint(n.add(X)).subtract(Q)):Q=e.add(n)),K){var Y=n.rotate(-90).multiply(G);s&&(Y=s._transformPoint(n.add(Y)).subtract(Q)),W.push(new O(Q,Y,X))}else l.setHandleOut(X);n=n.rotate(q)}this._add(W)}},lineBy:function(){var e=b.read(arguments),i=t(this)._point;this.lineTo(i.add(e))},curveBy:function(){var e=arguments,i=b.read(e),n=b.read(e),s=u.read(e),r=t(this)._point;this.curveTo(r.add(i),r.add(n),s)},cubicCurveBy:function(){var e=arguments,i=b.read(e),n=b.read(e),s=b.read(e),r=t(this)._point;this.cubicCurveTo(r.add(i),r.add(n),r.add(s))},quadraticCurveBy:function(){var e=arguments,i=b.read(e),n=b.read(e),s=t(this)._point;this.quadraticCurveTo(s.add(i),s.add(n))},arcBy:function(){var e=arguments,i=t(this)._point,n=i.add(b.read(e)),s=u.pick(u.peek(e),!0);"boolean"==typeof s?this.arcTo(n,s):this.arcTo(n,i.add(b.read(e)))},closePath:function(t){this.setClosed(!0),this.join(this,t)}}},{_getBounds:function(t,e){var i=e.handle?"getHandleBounds":e.stroke?"getStrokeBounds":"getBounds";return j[i](this._segments,this._closed,this,t,e)},statics:{getBounds:function(t,e,i,n,s,r){var o=t[0];if(!o)return new x;var a=new Array(6),l=o._transformCoordinates(n,new Array(6)),h=l.slice(0,2),u=h.slice(),c=new Array(2);function d(t){t._transformCoordinates(n,a);for(var e=0;e<2;e++)F._addBounds(l[e],l[e+4],a[e+2],a[e],e,r?r[e]:0,h,u,c);var i=l;l=a,a=i}for(var p=1,f=t.length;p<f;p++)d(t[p]);return e&&d(o),new x(h[0],h[1],u[0]-h[0],u[1]-h[1])},getStrokeBounds:function(t,e,i,n,s){var r=i.getStyle(),o=r.hasStroke(),a=r.getStrokeWidth(),l=o&&i._getStrokeMatrix(n,s),h=o&&j._getStrokePadding(a,l),u=j.getBounds(t,e,i,n,s,h);if(!o)return u;var c=a/2,d=r.getStrokeJoin(),p=r.getStrokeCap(),f=r.getMiterLimit(),g=new x(new y(h));function m(t){u=u.include(t)}function v(t){u=u.unite(g.setCenter(t._point.transform(n)))}function b(t,e){"round"===e||t.isSmooth()?v(t):j._addBevelJoin(t,e,c,f,n,l,m)}function _(t,e){"round"===e?v(t):j._addSquareCap(t,e,c,n,l,m)}var w=t.length-(e?0:1);if(w>0){for(var C=1;C<w;C++)b(t[C],d);e?b(t[0],d):(_(t[0],p),_(t[t.length-1],p))}return u},_getStrokePadding:function(t,e){if(!e)return[t,t];var i=new b(t,0).transform(e),n=new b(0,t).transform(e),s=i.getAngleInRadians(),r=i.getLength(),o=n.getLength(),a=Math.sin(s),l=Math.cos(s),h=Math.tan(s),u=Math.atan2(o*h,r),c=Math.atan2(o,h*r);return[Math.abs(r*Math.cos(u)*l+o*Math.sin(u)*a),Math.abs(o*Math.sin(c)*l+r*Math.cos(c)*a)]},_addBevelJoin:function(t,e,i,n,s,r,o,a){var l=t.getCurve(),h=l.getPrevious(),u=l.getPoint1().transform(s),c=h.getNormalAtTime(1).multiply(i).transform(r),d=l.getNormalAtTime(0).multiply(i).transform(r),p=c.getDirectedAngle(d);if((p<0||p>=180)&&(c=c.negate(),d=d.negate()),a&&o(u),o(u.add(c)),"miter"===e){var f=new P(u.add(c),new b(-c.y,c.x),!0).intersect(new P(u.add(d),new b(-d.y,d.x),!0),!0);f&&u.getDistance(f)<=n*i&&o(f)}o(u.add(d))},_addSquareCap:function(t,e,i,n,s,r,o){var a=t._point.transform(n),l=t.getLocation(),h=l.getNormal().multiply(0===l.getTime()?i:-i).transform(s);"square"===e&&(o&&(r(a.subtract(h)),r(a.add(h))),a=a.add(h.rotate(-90))),r(a.add(h)),r(a.subtract(h))},getHandleBounds:function(t,e,i,n,s){var r,o,a=i.getStyle();if(s.stroke&&a.hasStroke()){var l=i._getStrokeMatrix(n,s),h=a.getStrokeWidth()/2,u=h;"miter"===a.getStrokeJoin()&&(u=h*a.getMiterLimit()),"square"===a.getStrokeCap()&&(u=Math.max(u,h*Math.SQRT2)),r=j._getStrokePadding(h,l),o=j._getStrokePadding(u,l)}for(var c=new Array(6),d=1/0,p=-d,f=d,g=p,m=0,v=t.length;m<v;m++){t[m]._transformCoordinates(n,c);for(var b=0;b<6;b+=2){var _=b?r:o,y=_?_[0]:0,w=_?_[1]:0,C=c[b],S=c[b+1],P=C-y,k=C+y,T=S-w,A=S+w;P<d&&(d=P),k>p&&(p=k),T<f&&(f=T),A>g&&(g=A)}}return new x(d,f,p-d,g-f)}}});j.inject({statics:new function(){var t=.5522847498307936,e=[new O([-1,0],[0,t],[0,-t]),new O([0,-1],[-t,0],[t,0]),new O([1,0],[0,-t],[0,t]),new O([0,1],[t,0],[-t,0])];function i(t,e,i){var n=u.getNamed(i),s=new j(n&&0==n.insert&&T.NO_INSERT);return s._add(t),s._closed=e,s.set(n,{insert:!0})}function n(t,n,s){for(var r=new Array(4),o=0;o<4;o++){var a=e[o];r[o]=new O(a._point.multiply(n).add(t),a._handleIn.multiply(n),a._handleOut.multiply(n))}return i(r,!0,s)}return{Line:function(){var t=arguments;return i([new O(b.readNamed(t,"from")),new O(b.readNamed(t,"to"))],!1,t)},Circle:function(){var t=arguments,e=b.readNamed(t,"center"),i=u.readNamed(t,"radius");return n(e,new y(i),t)},Rectangle:function(){var e,n=arguments,s=x.readNamed(n,"rectangle"),r=y.readNamed(n,"radius",0,{readNull:!0}),o=s.getBottomLeft(!0),a=s.getTopLeft(!0),l=s.getTopRight(!0),h=s.getBottomRight(!0);if(!r||r.isZero())e=[new O(o),new O(a),new O(l),new O(h)];else{var u=(r=y.min(r,s.getSize(!0).divide(2))).width,c=r.height,d=u*t,p=c*t;e=[new O(o.add(u,0),null,[-d,0]),new O(o.subtract(0,c),[0,p]),new O(a.add(0,c),null,[0,-p]),new O(a.add(u,0),[-d,0],null),new O(l.subtract(u,0),null,[d,0]),new O(l.add(0,c),[0,-p],null),new O(h.subtract(0,c),null,[0,p]),new O(h.subtract(u,0),[d,0])]}return i(e,!0,n)},RoundRectangle:"#Rectangle",Ellipse:function(){var t=arguments,e=E._readEllipse(t);return n(e.center,e.radius,t)},Oval:"#Ellipse",Arc:function(){var t=arguments,e=b.readNamed(t,"from"),i=b.readNamed(t,"through"),n=b.readNamed(t,"to"),s=u.getNamed(t),r=new j(s&&0==s.insert&&T.NO_INSERT);return r.moveTo(e),r.arcTo(i,n),r.set(s)},RegularPolygon:function(){for(var t=arguments,e=b.readNamed(t,"center"),n=u.readNamed(t,"sides"),s=u.readNamed(t,"radius"),r=360/n,o=n%3==0,a=new b(0,o?-s:s),l=o?-1:.5,h=new Array(n),c=0;c<n;c++)h[c]=new O(e.add(a.rotate((c+l)*r)));return i(h,!0,t)},Star:function(){for(var t=arguments,e=b.readNamed(t,"center"),n=2*u.readNamed(t,"points"),s=u.readNamed(t,"radius1"),r=u.readNamed(t,"radius2"),o=360/n,a=new b(0,-1),l=new Array(n),h=0;h<n;h++)l[h]=new O(e.add(a.rotate(o*h).multiply(h%2?r:s)));return i(l,!0,t)}}}});var z=V.extend({_class:"CompoundPath",_serializeFields:{children:[]},beans:!0,initialize:function(t){this._children=[],this._namedChildren={},this._initialize(t)||("string"==typeof t?this.setPathData(t):this.addChildren(Array.isArray(t)?t:arguments))},insertChildren:function t(e,i){var n=i,s=n[0];s&&"number"==typeof s[0]&&(n=[n]);for(var r=i.length-1;r>=0;r--){var o=n[r];n!==i||o instanceof j||(n=u.slice(n)),Array.isArray(o)?n[r]=new j({segments:o,insert:!1}):o instanceof z&&(n.splice.apply(n,[r,1].concat(o.removeChildren())),o.remove())}return t.base.call(this,e,n)},reduce:function t(e){for(var i=this._children,n=i.length-1;n>=0;n--){var s;(s=i[n].reduce(e)).isEmpty()&&s.remove()}return i.length?t.base.call(this):((s=new j(T.NO_INSERT)).copyAttributes(this),s.insertAbove(this),this.remove(),s)},isClosed:function(){for(var t=this._children,e=0,i=t.length;e<i;e++)if(!t[e]._closed)return!1;return!0},setClosed:function(t){for(var e=this._children,i=0,n=e.length;i<n;i++)e[i].setClosed(t)},getFirstSegment:function(){var t=this.getFirstChild();return t&&t.getFirstSegment()},getLastSegment:function(){var t=this.getLastChild();return t&&t.getLastSegment()},getCurves:function(){for(var t=this._children,e=[],i=0,n=t.length;i<n;i++)u.push(e,t[i].getCurves());return e},getFirstCurve:function(){var t=this.getFirstChild();return t&&t.getFirstCurve()},getLastCurve:function(){var t=this.getLastChild();return t&&t.getLastCurve()},getArea:function(){for(var t=this._children,e=0,i=0,n=t.length;i<n;i++)e+=t[i].getArea();return e},getLength:function(){for(var t=this._children,e=0,i=0,n=t.length;i<n;i++)e+=t[i].getLength();return e},getPathData:function(t,e){for(var i=this._children,n=[],s=0,r=i.length;s<r;s++){var o=i[s],a=o._matrix;n.push(o.getPathData(t&&!a.isIdentity()?t.appended(a):t,e))}return n.join("")},_hitTestChildren:function t(e,i,n){return t.base.call(this,e,i.class===j||"path"===i.type?i:u.set({},i,{fill:!1}),n)},_draw:function(t,e,i,n){var s=this._children;if(s.length){e=e.extend({dontStart:!0,dontFinish:!0}),t.beginPath();for(var r=0,o=s.length;r<o;r++)s[r].draw(t,e,n);if(!e.clip){this._setStyles(t,e,i);var a=this._style;a.hasFill()&&(t.fill(a.getFillRule()),t.shadowColor="rgba(0,0,0,0)"),a.hasStroke()&&t.stroke()}}},_drawSelected:function(t,e,i){for(var n=this._children,s=0,r=n.length;s<r;s++){var o=n[s],a=o._matrix;i[o._id]||o._drawSelected(t,a.isIdentity()?e:e.appended(a))}}},new function(){function t(t,e){var i=t._children;if(e&&!i.length)throw new Error("Use a moveTo() command first");return i[i.length-1]}return u.each(["lineTo","cubicCurveTo","quadraticCurveTo","curveTo","arcTo","lineBy","cubicCurveBy","quadraticCurveBy","curveBy","arcBy"],(function(e){this[e]=function(){var i=t(this,!0);i[e].apply(i,arguments)}}),{moveTo:function(){var e=t(this),i=e&&e.isEmpty()?e:new j(T.NO_INSERT);i!==e&&this.addChild(i),i.moveTo.apply(i,arguments)},moveBy:function(){var e=t(this,!0),i=e&&e.getLastSegment(),n=b.read(arguments);this.moveTo(i?n.add(i._point):n)},closePath:function(e){t(this,!0).closePath(e)}})},u.each(["reverse","flatten","simplify","smooth"],(function(t){this[t]=function(e){for(var i,n=this._children,s=0,r=n.length;s<r;s++)i=n[s][t](e)||i;return i}}),{}));V.inject(new function(){var t=Math.min,e=Math.max,i=Math.abs,n={unite:{1:!0,2:!0},intersect:{2:!0},subtract:{1:!0},exclude:{1:!0,"-1":!0}};function s(t){return t._children||[t]}function r(t,e){var i=t.clone(!1).reduce({simplify:!0}).transform(null,!0,!0);if(e){for(var n=s(i),r=0,o=n.length;r<o;r++)(t=n[r])._closed||t.isEmpty()||(t.closePath(1e-12),t.getFirstSegment().setHandleIn(0,0),t.getLastSegment().setHandleOut(0,0));i=i.resolveCrossings().reorient("nonzero"===i.getFillRule(),!0)}return i}function o(t,e,i,n,s){var r=new z(T.NO_INSERT);return r.addChildren(t,!0),r=r.reduce({simplify:e}),s&&0==s.insert||r.insertAbove(n&&i.isSibling(n)&&i.getIndex()<n.getIndex()?n:i),r.copyAttributes(i,!0),r}function l(t){return t.hasOverlap()||t.isCrossing()}function h(t,e,i,a){if(a&&(0==a.trace||a.stroke)&&/^(subtract|intersect)$/.test(i))return c(t,e,i);var h=r(t,!0),d=e&&t!==e&&r(e,!0),p=n[i];p[i]=!0,d&&(p.subtract||p.exclude)^d.isClockwise()^h.isClockwise()&&d.reverse();var m,b=v(B.expand(h.getIntersections(d,l))),w=s(h),x=d&&s(d),C=[],S=[];function P(t){for(var e=0,i=t.length;e<i;e++){var n=t[e];u.push(C,n._segments),u.push(S,n.getCurves()),n._overlapsOnly=!0}}function k(t){for(var e=[],i=0,n=t&&t.length;i<n;i++)e.push(S[t[i]]);return e}if(b.length){P(w),x&&P(x);for(var T=new Array(S.length),A=0,I=S.length;A<I;A++)T[A]=S[A].getValues();var E=f.findCurveBoundsCollisions(T,T,0,!0),M={};for(A=0;A<S.length;A++){var D=S[A],L=D._path._id;(M[L]=M[L]||{})[D.getIndex()]={hor:k(E[A].hor),ver:k(E[A].ver)}}for(A=0,I=b.length;A<I;A++)_(b[A]._segment,h,d,M,p);for(A=0,I=C.length;A<I;A++){var N=C[A],O=N._intersection;N._winding||_(N,h,d,M,p),O&&O._overlap||(N._path._overlapsOnly=!1)}m=y(C,p)}else m=g(x?w.concat(x):w.slice(),(function(t){return!!p[t]}));return o(m,!0,t,e,a)}function c(t,e,i){var n=r(t),s=r(e),a=n.getIntersections(s,l),h="subtract"===i,u="divide"===i,c={},d=[];function p(t){if(!c[t._id]&&(u||s.contains(t.getPointAt(t.getLength()/2))^h))return d.unshift(t),c[t._id]=!0}for(var f=a.length-1;f>=0;f--){var g=a[f].split();g&&(p(g)&&g.getFirstSegment().setHandleIn(0,0),n.getLastSegment().setHandleOut(0,0))}return p(n),o(d,!1,t,e)}function d(t,e){for(var i=t;i;){if(i===e)return;i=i._previous}for(;t._next&&t._next!==e;)t=t._next;if(!t._next){for(;e._previous;)e=e._previous;t._next=e,e._previous=t}}function p(t){for(var e=t.length-1;e>=0;e--)t[e].clearHandles()}function g(t,e,n){var s=t&&t.length;if(s){var r=u.each(t,(function(t,e){this[t._id]={container:null,winding:t.isClockwise()?1:-1,index:e}}),{}),o=t.slice().sort((function(t,e){return i(e.getArea())-i(t.getArea())})),a=o[0],l=f.findItemBoundsCollisions(o,null,m.GEOMETRIC_EPSILON);null==n&&(n=a.isClockwise());for(var h=0;h<s;h++){var c=o[h],d=r[c._id],p=0,g=l[h];if(g)for(var v=null,b=g.length-1;b>=0;b--)if(g[b]<h){v=v||c.getInteriorPoint();var _=o[g[b]];if(_.contains(v)){var y=r[_._id];p=y.winding,d.winding+=p,d.container=y.exclude?y.container:_;break}}if(e(d.winding)===e(p))d.exclude=!0,t[d.index]=null;else{var w=d.container;c.setClockwise(w?!w.isClockwise():n)}}}return t}function v(t,e,i){var n,s,r,o=e&&[],a=!1,l=i||[],h=i&&{};function u(t){return t._path._id+"."+t._segment1._index}for(var c=(i&&i.length)-1;c>=0;c--)(f=i[c])._path&&(h[u(f)]=!0);for(c=t.length-1;c>=0;c--){var f,g,m=t[c],v=m._time,b=v,_=e&&!e(m);if((f=m._curve)&&(f!==s?(a=!f.hasHandles()||h&&h[u(f)],n=[],r=null,s=f):r>=1e-8&&(v/=r)),_)n&&n.push(m);else{if(e&&o.unshift(m),r=b,v<1e-8)g=f._segment1;else if(v>.99999999)g=f._segment2;else{var y=f.divideAtTime(v,!0);a&&l.push(f,y),g=y._segment1;for(var w=n.length-1;w>=0;w--){var x=n[w];x._time=(x._time-v)/(1-v)}}m._setSegment(g);var C=g._intersection,S=m._intersection;if(C){d(C,S);for(var P=C;P;)d(P._intersection,C),P=P._next}else g._intersection=S}}return i||p(l),o||t}function b(n,s,r,o,a){var l,h,u=Array.isArray(s)?s:s[r?"hor":"ver"],c=r?1:0,d=1^c,p=[n.x,n.y],f=p[c],g=p[d],m=1e-6,v=f-1e-9,_=f+1e-9,y=0,w=0,x=0,C=0,S=!1,P=!1,k=1,T=[];function A(i){var h=i[d+0],u=i[d+6];if(!(g<t(h,u)||g>e(h,u))){var p=i[c+0],y=i[c+2],w=i[c+4],P=i[c+6];if(h!==u){var A=g===h?0:g===u||v>e(p,y,w,P)||_<t(p,y,w,P)?1:F.solveCubic(i,d,g,T,0,1)>0?T[0]:1,I=0===A?p:1===A?P:F.getPoint(i,A)[r?"y":"x"],E=h>u?1:-1,M=l[d]>l[d+6]?1:-1,D=l[c+6];return g!==h?(I<v?x+=E:I>_?C+=E:S=!0,I>f-m&&I<f+m&&(k/=2)):(E!==M?p<v?x+=E:p>_&&(C+=E):p!=D&&(D<_&&I>_?(C+=E,S=!0):D>v&&I<v&&(x+=E,S=!0)),k/=4),l=i,!a&&I>v&&I<_&&0===F.getTangent(i,A)[r?"x":"y"]&&b(n,s,!r,o,!0)}(p<_&&P>v||P<_&&p>v)&&(S=!0)}}function I(i){var n=i[d+0],s=i[d+2],o=i[d+4],a=i[d+6];if(g<=e(n,s,o,a)&&g>=t(n,s,o,a))for(var l,h=i[c+0],u=i[c+2],p=i[c+4],f=i[c+6],m=v>e(h,u,p,f)||_<t(h,u,p,f)?[i]:F.getMonoCurves(i,r),b=0,y=m.length;b<y;b++)if(l=A(m[b]))return l}for(var E=0,M=u.length;E<M;E++){var D,L=u[E],N=L._path,O=L.getValues();if(!(E&&u[E-1]._path===N||(l=null,N._closed||(h=F.getValues(N.getLastCurve().getSegment2(),L.getSegment1(),null,!o))[d]!==h[d+6]&&(l=h),l))){l=O;for(var R=N.getLastCurve();R&&R!==L;){var B=R.getValues();if(B[d]!==B[d+6]){l=B;break}R=R.getPrevious()}}if(D=I(O))return D;if(E+1===M||u[E+1]._path!==N){if(h&&(D=I(h)))return D;!S||x||C||(x=C=N.isClockwise(o)^r?1:-1),y+=x,w+=C,x=C=0,S&&(P=!0,S=!1),h=null}}return y=i(y),w=i(w),{winding:e(y,w),windingL:y,windingR:w,quality:k,onPath:P}}function _(t,e,n,s,r){var o=[],a=t,l=0;do{if(_=t.getCurve()){var h=_.getLength();o.push({segment:t,curve:_,length:h}),l+=h}t=t.getNext()}while(t&&!t._intersection&&t!==a);for(var u=[.5,.25,.75],c={winding:0,quality:-1},d=0;d<u.length&&c.quality<.5;d++){h=l*u[d];for(var p=0,f=o.length;p<f;p++){var g=o[p],v=g.length;if(h<=v){var _,y=(_=g.curve)._path,w=y._parent,x=w instanceof z?w:y,C=m.clamp(_.getTimeAt(h),.001,.999),S=_.getPointAtTime(C),P=i(_.getTangentAtTime(C).y)<Math.SQRT1_2,k=null;if(r.subtract&&n){var T=(x===e?n:e)._getWinding(S,P,!0);if(x===e&&T.winding||x===n&&!T.winding){if(T.quality<1)continue;k={winding:0,quality:1}}}(k=k||b(S,s[y._id][_.getIndex()],P,!0)).quality>c.quality&&(c=k);break}h-=v}}for(p=o.length-1;p>=0;p--)o[p].segment._winding=c}function y(t,e){var i,n=[];function s(t){var i;return!(!t||t._visited||e&&(!e[(i=t._winding||{}).winding]||e.unite&&2===i.winding&&i.windingL&&i.windingR))}function r(t){if(t)for(var e=0,n=i.length;e<n;e++)if(t===i[e])return!0;return!1}function o(t){for(var e=t._segments,i=0,n=e.length;i<n;i++)e[i]._visited=!0}function a(t,e){var n=t._intersection,o=n,a=[];function l(n,o){for(;n&&n!==o;){var l=n._segment,h=l&&l._path;if(h){var u=l.getNext()||h.getFirstSegment(),c=u._intersection;l!==t&&(r(l)||r(u)||u&&s(l)&&(s(u)||c&&s(c._segment)))&&a.push(l),e&&i.push(l)}n=n._next}}if(e&&(i=[t]),n){for(l(n);n&&n._previous;)n=n._previous;l(n,o)}return a}t.sort((function(t,e){var i=t._intersection,n=e._intersection,s=!(!i||!i._overlap),r=!(!n||!n._overlap),o=t._path,a=e._path;return s^r?s?1:-1:!i^!n?i?1:-1:o!==a?o._id-a._id:t._index-e._index}));for(var l=0,h=t.length;l<h;l++){var u,c,d,p=t[l],f=s(p),g=null,m=!1,v=!0,b=[];if(f&&p._path._overlapsOnly){var _=p._path,y=p._intersection._segment._path;_.compare(y)&&(_.getArea()&&n.push(_.clone(!1)),o(_),o(y),f=!1)}for(;f;){var w=!g,x=a(p,w),C=x.shift(),S=!(m=!w&&(r(p)||r(C)))&&C;if(w&&(g=new j(T.NO_INSERT),u=null),m){(p.isFirst()||p.isLast())&&(v=p._path._closed),p._visited=!0;break}if(S&&u&&(b.push(u),u=null),u||(S&&x.push(p),u={start:g._segments.length,crossings:x,visited:c=[],handleIn:d}),S&&(p=C),!s(p)){g.removeSegments(u.start);for(var P=0,k=c.length;P<k;P++)c[P]._visited=!1;c.length=0;do{(p=u&&u.crossings.shift())&&p._path||(p=null,(u=b.pop())&&(c=u.visited,d=u.handleIn))}while(u&&!s(p));if(!p)break}var A=p.getNext();g.add(new O(p._point,d,A&&p._handleOut)),p._visited=!0,c.push(p),p=A||p._path.getFirstSegment(),d=A&&A._handleIn}m&&(v&&(g.getFirstSegment().setHandleIn(d),g.setClosed(v)),0!==g.getArea()&&n.push(g))}return n}return{_getWinding:function(t,e,i){return b(t,this.getCurves(),e,i)},unite:function(t,e){return h(this,t,"unite",e)},intersect:function(t,e){return h(this,t,"intersect",e)},subtract:function(t,e){return h(this,t,"subtract",e)},exclude:function(t,e){return h(this,t,"exclude",e)},divide:function(t,e){return e&&(0==e.trace||e.stroke)?c(this,t,"divide"):o([this.subtract(t,e),this.intersect(t,e)],!0,this,t,e)},resolveCrossings:function(){var t=this._children,e=t||[this];function i(t,e){var i=t&&t._intersection;return i&&i._overlap&&i._path===e}var n=!1,s=!1,r=this.getIntersections(null,(function(t){return t.hasOverlap()&&(n=!0)||t.isCrossing()&&(s=!0)})),o=n&&s&&[];if(r=B.expand(r),n)for(var a=v(r,(function(t){return t.hasOverlap()}),o),l=a.length-1;l>=0;l--){var h=a[l],c=h._path,d=h._segment,f=d.getPrevious(),g=d.getNext();i(f,c)&&i(g,c)&&(d.remove(),f._handleOut._set(0,0),g._handleIn._set(0,0),f===d||f.getCurve().hasLength()||(g._handleIn.set(f._handleIn),f.remove()))}s&&(v(r,n&&function(t){var e=t.getCurve(),i=t.getSegment(),n=t._intersection,s=n._curve,r=n._segment;if(e&&s&&e._path&&s._path)return!0;i&&(i._intersection=null),r&&(r._intersection=null)},o),o&&p(o),e=y(u.each(e,(function(t){u.push(this,t._segments)}),[])));var m,b=e.length;return b>1&&t?(e!==t&&this.setChildren(e),m=this):1!==b||t||(e[0]!==this&&this.setSegments(e[0].removeSegments()),m=this),m||((m=new z(T.NO_INSERT)).addChildren(e),(m=m.reduce()).copyAttributes(this),this.replaceWith(m)),m},reorient:function(t,e){var i=this._children;return i&&i.length?this.setChildren(g(this.removeChildren(),(function(e){return!!(t?e:1&e)}),e)):e!==a&&this.setClockwise(e),this},getInteriorPoint:function(){var i=this.getBounds().getCenter(!0);if(!this.contains(i)){for(var n=this.getCurves(),s=i.y,r=[],o=[],a=0,l=n.length;a<l;a++){var h=n[a].getValues(),u=h[1],c=h[3],d=h[5],p=h[7];if(s>=t(u,c,d,p)&&s<=e(u,c,d,p))for(var f=F.getMonoCurves(h),g=0,m=f.length;g<m;g++){var v=f[g],b=v[1],_=v[7];if(b!==_&&(s>=b&&s<=_||s>=_&&s<=b)){var y=s===b?v[0]:s===_?v[6]:1===F.solveCubic(v,1,s,o,0,1)?F.getPoint(v,o[0]).x:(v[0]+v[6])/2;r.push(y)}}}r.length>1&&(r.sort((function(t,e){return t-e})),i.x=(r[0]+r[1])/2)}return i}}});var U=u.extend({_class:"PathFlattener",initialize:function(t,e,i,n,s){var r,o=[],a=[],l=0,h=1/(i||32),u=t._segments,c=u[0];function d(t,e){var i=F.getValues(t,e,s);o.push(i),p(i,t._index,0,1)}function p(t,i,s,r){if(!(r-s>h)||n&&F.isStraight(t)||F.isFlatEnough(t,e||.25)){var o=t[6]-t[0],u=t[7]-t[1],c=Math.sqrt(o*o+u*u);c>0&&(l+=c,a.push({offset:l,curve:t,index:i,time:r}))}else{var d=F.subdivide(t,.5),f=(s+r)/2;p(d[0],i,s,f),p(d[1],i,f,r)}}for(var f=1,g=u.length;f<g;f++)d(c,r=u[f]),c=r;t._closed&&d(r||c,u[0]),this.curves=o,this.parts=a,this.length=l,this.index=0},_get:function(t){for(var e,i=this.parts,n=i.length,s=this.index;e=s,s&&!(i[--s].offset<t););for(;e<n;e++){var r=i[e];if(r.offset>=t){this.index=e;var o=i[e-1],a=o&&o.index===r.index?o.time:0,l=o?o.offset:0;return{index:r.index,time:a+(r.time-a)*(t-l)/(r.offset-l)}}}return{index:i[n-1].index,time:1}},drawPart:function(t,e,i){for(var n=this._get(e),s=this._get(i),r=n.index,o=s.index;r<=o;r++){var a=F.getPart(this.curves[r],r===n.index?n.time:0,r===s.index?s.time:1);r===n.index&&t.moveTo(a[0],a[1]),t.bezierCurveTo.apply(t,a.slice(2))}}},u.each(F._evaluateMethods,(function(t){this[t+"At"]=function(e){var i=this._get(e);return F[t](this.curves[i.index],i.time)}}),{})),q=u.extend({initialize:function(t){for(var e,i=this.points=[],n=t._segments,s=t._closed,r=0,o=n.length;r<o;r++){var a=n[r].point;e&&e.equals(a)||i.push(e=a.clone())}s&&(i.unshift(i[i.length-1]),i.push(i[1])),this.closed=s},fit:function(t){var e=this.points,i=e.length,n=null;return i>0&&(n=[new O(e[0])],i>1&&(this.fitCubic(n,t,0,i-1,e[1].subtract(e[0]),e[i-2].subtract(e[i-1])),this.closed&&(n.shift(),n.pop()))),n},fitCubic:function(t,e,i,n,s,r){var o=this.points;if(n-i!=1){for(var a,l=this.chordLengthParameterize(i,n),h=Math.max(e,e*e),u=!0,c=0;c<=4;c++){var d=this.generateBezier(i,n,l,s,r),p=this.findMaxError(i,n,d,l);if(p.error<e&&u)return void this.addCurve(t,d);if(a=p.index,p.error>=h)break;u=this.reparameterize(i,n,l,d),h=p.error}var f=o[a-1].subtract(o[a+1]);this.fitCubic(t,e,i,a,s,f),this.fitCubic(t,e,a,n,f.negate(),r)}else{var g=o[i],m=o[n],v=g.getDistance(m)/3;this.addCurve(t,[g,g.add(s.normalize(v)),m.add(r.normalize(v)),m])}},addCurve:function(t,e){t[t.length-1].setHandleOut(e[1].subtract(e[0])),t.push(new O(e[3],e[2].subtract(e[3])))},generateBezier:function(t,e,i,n,s){for(var r=1e-12,o=Math.abs,a=this.points,l=a[t],h=a[e],u=[[0,0],[0,0]],c=[0,0],d=0,p=e-t+1;d<p;d++){var f=i[d],g=1-f,m=3*f*g,v=g*g*g,b=m*g,_=m*f,y=f*f*f,w=n.normalize(b),x=s.normalize(_),C=a[t+d].subtract(l.multiply(v+b)).subtract(h.multiply(_+y));u[0][0]+=w.dot(w),u[0][1]+=w.dot(x),u[1][0]=u[0][1],u[1][1]+=x.dot(x),c[0]+=w.dot(C),c[1]+=x.dot(C)}var S,P,k=u[0][0]*u[1][1]-u[1][0]*u[0][1];if(o(k)>r){var T=u[0][0]*c[1]-u[1][0]*c[0];S=(c[0]*u[1][1]-c[1]*u[0][1])/k,P=T/k}else{var A=u[0][0]+u[0][1],I=u[1][0]+u[1][1];S=P=o(A)>r?c[0]/A:o(I)>r?c[1]/I:0}var E,M,D=h.getDistance(l),L=r*D;if(S<L||P<L)S=P=D/3;else{var N=h.subtract(l);E=n.normalize(S),M=s.normalize(P),E.dot(N)-M.dot(N)>D*D&&(S=P=D/3,E=M=null)}return[l,l.add(E||n.normalize(S)),h.add(M||s.normalize(P)),h]},reparameterize:function(t,e,i,n){for(var s=t;s<=e;s++)i[s-t]=this.findRoot(n,this.points[s],i[s-t]);s=1;for(var r=i.length;s<r;s++)if(i[s]<=i[s-1])return!1;return!0},findRoot:function(t,e,i){for(var n=[],s=[],r=0;r<=2;r++)n[r]=t[r+1].subtract(t[r]).multiply(3);for(r=0;r<=1;r++)s[r]=n[r+1].subtract(n[r]).multiply(2);var o=this.evaluate(3,t,i),a=this.evaluate(2,n,i),l=this.evaluate(1,s,i),h=o.subtract(e),u=a.dot(a)+h.dot(l);return m.isMachineZero(u)?i:i-h.dot(a)/u},evaluate:function(t,e,i){for(var n=e.slice(),s=1;s<=t;s++)for(var r=0;r<=t-s;r++)n[r]=n[r].multiply(1-i).add(n[r+1].multiply(i));return n[0]},chordLengthParameterize:function(t,e){for(var i=[0],n=t+1;n<=e;n++)i[n-t]=i[n-t-1]+this.points[n].getDistance(this.points[n-1]);n=1;for(var s=e-t;n<=s;n++)i[n]/=i[s];return i},findMaxError:function(t,e,i,n){for(var s=Math.floor((e-t+1)/2),r=0,o=t+1;o<e;o++){var a=this.evaluate(3,i,n[o-t]).subtract(this.points[o]),l=a.x*a.x+a.y*a.y;l>=r&&(r=l,s=o)}return{error:r,index:s}}}),H=T.extend({_class:"TextItem",_applyMatrix:!1,_canApplyMatrix:!1,_serializeFields:{content:null},_boundsOptions:{stroke:!1,handle:!1},initialize:function(t){this._content="",this._lines=[];var e=t&&u.isPlainObject(t)&&t.x===a&&t.y===a;this._initialize(e&&t,!e&&b.read(arguments))},_equals:function(t){return this._content===t._content},copyContent:function(t){this.setContent(t._content)},getContent:function(){return this._content},setContent:function(t){this._content=""+t,this._lines=this._content.split(/\r\n|\n|\r/gm),this._changed(521)},isEmpty:function(){return!this._content},getCharacterStyle:"#getStyle",setCharacterStyle:"#setStyle",getParagraphStyle:"#getStyle",setParagraphStyle:"#setStyle"}),G=H.extend({_class:"PointText",initialize:function(){H.apply(this,arguments)},getPoint:function(){var t=this._matrix.getTranslation();return new _(t.x,t.y,this,"setPoint")},setPoint:function(){var t=b.read(arguments);this.translate(t.subtract(this._matrix.getTranslation()))},_draw:function(t,e,i){if(this._content){this._setStyles(t,e,i);var n=this._lines,s=this._style,r=s.hasFill(),o=s.hasStroke(),a=s.getLeading(),l=t.shadowColor;t.font=s.getFontStyle(),t.textAlign=s.getJustification();for(var h=0,u=n.length;h<u;h++){t.shadowColor=l;var c=n[h];r&&(t.fillText(c,0,0),t.shadowColor="rgba(0,0,0,0)"),o&&t.strokeText(c,0,0),t.translate(0,a)}}},_getBounds:function(t,e){var i=this._style,n=this._lines,s=n.length,r=i.getJustification(),o=i.getLeading(),a=this.getView().getTextWidth(i.getFontStyle(),n),l=0;"left"!==r&&(l-=a/("center"===r?2:1));var h=new x(l,s?-.75*o:0,a,s*o);return t?t._transformBounds(h,h):h}}),W=u.extend(new function(){var t,e={gray:["gray"],rgb:["red","green","blue"],hsb:["hue","saturation","brightness"],hsl:["hue","saturation","lightness"],gradient:["gradient","origin","destination","highlight"]},i={},n={transparent:[0,0,0,0]};function s(e){var i,s=e.match(/^#([\da-f]{2})([\da-f]{2})([\da-f]{2})([\da-f]{2})?$/i)||e.match(/^#([\da-f])([\da-f])([\da-f])([\da-f])?$/i),r="rgb";if(s){var o=s[4]?4:3;i=new Array(o);for(var a=0;a<o;a++){var h=s[a+1];i[a]=parseInt(1==h.length?h+h:h,16)/255}}else if(s=e.match(/^(rgb|hsl)a?\((.*)\)$/)){r=s[1],i=s[2].trim().split(/[,\s]+/g);for(var u="hsl"===r,c=(a=0,Math.min(i.length,4));a<c;a++){var d=i[a];if(h=parseFloat(d),u)if(0===a){var p=d.match(/([a-z]*)$/)[1];h*={turn:360,rad:180/Math.PI,grad:.9}[p]||1}else a<3&&(h/=100);else a<3&&(h/=/%$/.test(d)?100:255);i[a]=h}}else{var f=n[e];if(!f)if(l){t||((t=lt.getContext(1,1)).globalCompositeOperation="copy"),t.fillStyle="rgba(0,0,0,0)",t.fillStyle=e,t.fillRect(0,0,1,1);var g=t.getImageData(0,0,1,1).data;f=n[e]=[g[0]/255,g[1]/255,g[2]/255]}else f=[0,0,0];i=f.slice()}return[r,i]}var r=[[0,3,1],[2,0,1],[1,0,3],[1,2,0],[3,1,0],[0,1,2]],o={"rgb-hsb":function(t,e,i){var n=Math.max(t,e,i),s=n-Math.min(t,e,i);return[0===s?0:60*(n==t?(e-i)/s+(e<i?6:0):n==e?(i-t)/s+2:(t-e)/s+4),0===n?0:s/n,n]},"hsb-rgb":function(t,e,i){var n,s=(t=(t/60%6+6)%6)-(n=Math.floor(t)),o=[i,i*(1-e),i*(1-e*s),i*(1-e*(1-s))];return[o[(n=r[n])[0]],o[n[1]],o[n[2]]]},"rgb-hsl":function(t,e,i){var n=Math.max(t,e,i),s=Math.min(t,e,i),r=n-s,o=0===r,a=(n+s)/2;return[o?0:60*(n==t?(e-i)/r+(e<i?6:0):n==e?(i-t)/r+2:(t-e)/r+4),o?0:a<.5?r/(n+s):r/(2-n-s),a]},"hsl-rgb":function(t,e,i){if(0===e)return[i,i,i];for(var n=[(t=(t/360%1+1)%1)+1/3,t,t-1/3],s=i<.5?i*(1+e):i+e-i*e,r=2*i-s,o=[],a=0;a<3;a++){var l=n[a];l<0&&(l+=1),l>1&&(l-=1),o[a]=6*l<1?r+6*(s-r)*l:2*l<1?s:3*l<2?r+(s-r)*(2/3-l)*6:r}return o},"rgb-gray":function(t,e,i){return[.2989*t+.587*e+.114*i]},"gray-rgb":function(t){return[t,t,t]},"gray-hsb":function(t){return[0,0,t]},"gray-hsl":function(t){return[0,0,t]},"gradient-rgb":function(){return[]},"rgb-gradient":function(){return[]}};return u.each(e,(function(t,n){i[n]=[],u.each(t,(function(t,s){var r=u.capitalize(t),o=/^(hue|saturation)$/.test(t),a=i[n][s]="gradient"===n?"gradient"===t?function(t){var e=this._components[0];return e!==(t=K.read(Array.isArray(t)?t:arguments,0,{readNull:!0}))&&(e&&e._removeOwner(this),t&&t._addOwner(this)),t}:function(){return b.read(arguments,0,{readNull:"highlight"===t,clone:!0})}:function(t){return null==t||isNaN(t)?0:+t};this["get"+r]=function(){return this._type===n||o&&/^hs[bl]$/.test(this._type)?this._components[s]:this._convert(n)[s]},this["set"+r]=function(t){this._type===n||o&&/^hs[bl]$/.test(this._type)||(this._components=this._convert(n),this._properties=e[n],this._type=n),this._components[s]=a.call(this,t),this._changed()}}),this)}),{_class:"Color",_readIndex:!0,initialize:function t(n){var r,o,a,l,h=arguments,c=this.__read,d=0;Array.isArray(n)&&(n=(h=n)[0]);var p=null!=n&&typeof n;if("string"===p&&n in e&&(r=n,n=h[1],Array.isArray(n)?(o=n,a=h[2]):(c&&(d=1),h=u.slice(h,1),p=typeof n)),!o){if(l="number"===p?h:"object"===p&&null!=n.length?n:null){r||(r=l.length>=3?"rgb":"gray");var f=e[r].length;a=l[f],c&&(d+=l===arguments?f+(null!=a?1:0):1),l.length>f&&(l=u.slice(l,0,f))}else if("string"===p){var g=s(n);r=g[0],4===(o=g[1]).length&&(a=o[3],o.length--)}else if("object"===p)if(n.constructor===t){if(r=n._type,o=n._components.slice(),a=n._alpha,"gradient"===r)for(var m=1,v=o.length;m<v;m++){var b=o[m];b&&(o[m]=b.clone())}}else if(n.constructor===K)r="gradient",l=h;else{var _=e[r="hue"in n?"lightness"in n?"hsl":"hsb":"gradient"in n||"stops"in n||"radial"in n?"gradient":"gray"in n?"gray":"rgb"],y=i[r];for(this._components=o=[],m=0,v=_.length;m<v;m++)null==(w=n[_[m]])&&!m&&"gradient"===r&&"stops"in n&&(w={stops:n.stops,radial:n.radial}),null!=(w=y[m].call(this,w))&&(o[m]=w);a=n.alpha}c&&r&&(d=1)}if(this._type=r||"rgb",!o)for(this._components=o=[],m=0,v=(y=i[this._type]).length;m<v;m++){var w;null!=(w=y[m].call(this,l&&l[m]))&&(o[m]=w)}return this._components=o,this._properties=e[this._type],this._alpha=a,c&&(this.__read=d),this},set:"#initialize",_serialize:function(t,e){var i=this.getComponents();return u.serialize(/^(gray|rgb)$/.test(this._type)?i:[this._type].concat(i),t,!0,e)},_changed:function(){this._canvasStyle=null,this._owner&&(this._setter?this._owner[this._setter](this):this._owner._changed(129))},_convert:function(t){var e;return this._type===t?this._components.slice():(e=o[this._type+"-"+t])?e.apply(this,this._components):o["rgb-"+t].apply(this,o[this._type+"-rgb"].apply(this,this._components))},convert:function(t){return new W(t,this._convert(t),this._alpha)},getType:function(){return this._type},setType:function(t){this._components=this._convert(t),this._properties=e[t],this._type=t},getComponents:function(){var t=this._components.slice();return null!=this._alpha&&t.push(this._alpha),t},getAlpha:function(){return null!=this._alpha?this._alpha:1},setAlpha:function(t){this._alpha=null==t?null:Math.min(Math.max(t,0),1),this._changed()},hasAlpha:function(){return null!=this._alpha},equals:function(t){var e=u.isPlainValue(t,!0)?W.read(arguments):t;return e===this||e&&this._class===e._class&&this._type===e._type&&this.getAlpha()===e.getAlpha()&&u.equals(this._components,e._components)||!1},toString:function(){for(var t=this._properties,e=[],i="gradient"===this._type,n=g.instance,s=0,r=t.length;s<r;s++){var o=this._components[s];null!=o&&e.push(t[s]+": "+(i?o:n.number(o)))}return null!=this._alpha&&e.push("alpha: "+n.number(this._alpha)),"{ "+e.join(", ")+" }"},toCSS:function(t){var e=this._convert("rgb"),i=t||null==this._alpha?1:this._alpha;function n(t){return Math.round(255*(t<0?0:t>1?1:t))}return e=[n(e[0]),n(e[1]),n(e[2])],i<1&&e.push(i<0?0:i),t?"#"+((1<<24)+(e[0]<<16)+(e[1]<<8)+e[2]).toString(16).slice(1):(4==e.length?"rgba(":"rgb(")+e.join(",")+")"},toCanvasStyle:function(t,e){if(this._canvasStyle)return this._canvasStyle;if("gradient"!==this._type)return this._canvasStyle=this.toCSS();var i,n=this._components,s=n[0],r=s._stops,o=n[1],a=n[2],l=n[3],h=e&&e.inverted();if(h&&(o=h._transformPoint(o),a=h._transformPoint(a),l&&(l=h._transformPoint(l))),s._radial){var u=a.getDistance(o);if(l){var c=l.subtract(o);c.getLength()>u&&(l=o.add(c.normalize(u-.1)))}var d=l||o;i=t.createRadialGradient(d.x,d.y,0,o.x,o.y,u)}else i=t.createLinearGradient(o.x,o.y,a.x,a.y);for(var p=0,f=r.length;p<f;p++){var g=r[p],m=g._offset;i.addColorStop(null==m?p/(f-1):m,g._color.toCanvasStyle())}return this._canvasStyle=i},transform:function(t){if("gradient"===this._type){for(var e=this._components,i=1,n=e.length;i<n;i++){var s=e[i];t._transformPoint(s,s,!0)}this._changed()}},statics:{_types:e,random:function(){var t=Math.random;return new W(t(),t(),t())},_setOwner:function(t,e,i){return t&&(t._owner&&e&&t._owner!==e&&(t=t.clone()),!t._owner^!e&&(t._owner=e||null,t._setter=i||null)),t}}})},new function(){return u.each({add:function(t,e){return t+e},subtract:function(t,e){return t-e},multiply:function(t,e){return t*e},divide:function(t,e){return t/e}},(function(t,e){this[e]=function(e){e=W.read(arguments);for(var i=this._type,n=this._components,s=e._convert(i),r=0,o=n.length;r<o;r++)s[r]=t(n[r],s[r]);return new W(i,s,null!=this._alpha?t(this._alpha,e.getAlpha()):null)}}),{})}),K=u.extend({_class:"Gradient",initialize:function(t,e){this._id=v.get(),t&&u.isPlainObject(t)&&(this.set(t),t=e=null),null==this._stops&&this.setStops(t||["white","black"]),null==this._radial&&this.setRadial("string"==typeof e&&"radial"===e||e||!1)},_serialize:function(t,e){return e.add(this,(function(){return u.serialize([this._stops,this._radial],t,!0,e)}))},_changed:function(){for(var t=0,e=this._owners&&this._owners.length;t<e;t++)this._owners[t]._changed()},_addOwner:function(t){this._owners||(this._owners=[]),this._owners.push(t)},_removeOwner:function(t){var e=this._owners?this._owners.indexOf(t):-1;-1!=e&&(this._owners.splice(e,1),this._owners.length||(this._owners=a))},clone:function(){for(var t=[],e=0,i=this._stops.length;e<i;e++)t[e]=this._stops[e].clone();return new K(t,this._radial)},getStops:function(){return this._stops},setStops:function(t){if(t.length<2)throw new Error("Gradient stop list needs to contain at least two stops.");var e=this._stops;if(e)for(var i=0,n=e.length;i<n;i++)e[i]._owner=a;for(i=0,n=(e=this._stops=Q.readList(t,0,{clone:!0})).length;i<n;i++)e[i]._owner=this;this._changed()},getRadial:function(){return this._radial},setRadial:function(t){this._radial=t,this._changed()},equals:function(t){if(t===this)return!0;if(t&&this._class===t._class){var e=this._stops,i=t._stops,n=e.length;if(n===i.length){for(var s=0;s<n;s++)if(!e[s].equals(i[s]))return!1;return!0}}return!1}}),Q=u.extend({_class:"GradientStop",initialize:function(t,e){var i=t,n=e;"object"==typeof t&&e===a&&(Array.isArray(t)&&"number"!=typeof t[0]?(i=t[0],n=t[1]):("color"in t||"offset"in t||"rampPoint"in t)&&(i=t.color,n=t.offset||t.rampPoint||0)),this.setColor(i),this.setOffset(n)},clone:function(){return new Q(this._color.clone(),this._offset)},_serialize:function(t,e){var i=this._color,n=this._offset;return u.serialize(null==n?[i]:[i,n],t,!0,e)},_changed:function(){this._owner&&this._owner._changed(129)},getOffset:function(){return this._offset},setOffset:function(t){this._offset=t,this._changed()},getRampPoint:"#getOffset",setRampPoint:"#setOffset",getColor:function(){return this._color},setColor:function(){W._setOwner(this._color,null),this._color=W._setOwner(W.read(arguments,0),this,"setColor"),this._changed()},equals:function(t){return t===this||t&&this._class===t._class&&this._color.equals(t._color)&&this._offset==t._offset||!1}}),X=u.extend(new function(){var t={fillColor:null,fillRule:"nonzero",strokeColor:null,strokeWidth:1,strokeCap:"butt",strokeJoin:"miter",strokeScaling:!0,miterLimit:10,dashOffset:0,dashArray:[],shadowColor:null,shadowBlur:0,shadowOffset:new b,selectedColor:null},e=u.set({},t,{fontFamily:"sans-serif",fontWeight:"normal",fontSize:12,leading:null,justification:"left"}),i=u.set({},e,{fillColor:new W}),n={strokeWidth:193,strokeCap:193,strokeJoin:193,strokeScaling:201,miterLimit:193,fontFamily:9,fontWeight:9,fontSize:9,font:9,leading:9,justification:9},s={beans:!0},r={_class:"Style",beans:!0,initialize:function(n,s,r){this._values={},this._owner=s,this._project=s&&s._project||r||dt.project,this._defaults=!s||s instanceof A?e:s instanceof H?i:t,n&&this.set(n)}};return u.each(e,(function(t,e){var i=/Color$/.test(e),o="shadowOffset"===e,l=u.capitalize(e),h=n[e],c="set"+l,d="get"+l;r[c]=function(t){var n=this._owner,s=n&&n._children,r=s&&s.length>0&&!(n instanceof z);if(r)for(var o=0,a=s.length;o<a;o++)s[o]._style[c](t);if(("selectedColor"===e||!r)&&e in this._defaults){var l=this._values[e];l!==t&&(i&&(l&&(W._setOwner(l,null),l._canvasStyle=null),t&&t.constructor===W&&(t=W._setOwner(t,n,r&&c))),this._values[e]=t,n&&n._changed(h||129))}},r[d]=function(t){var n=this._owner,s=n&&n._children,r=s&&s.length>0&&!(n instanceof z);if(r&&!t)for(var l=0,h=s.length;l<h;l++){var p=s[l]._style[d]();if(l){if(!u.equals(f,p))return a}else f=p}else if(e in this._defaults){var f;if((f=this._values[e])===a)(f=this._defaults[e])&&f.clone&&(f=f.clone());else{var g=i?W:o?b:null;!g||f&&f.constructor===g||(this._values[e]=f=g.read([f],0,{readNull:!0,clone:!0}))}}return f&&i&&(f=W._setOwner(f,n,r&&c)),f},s[d]=function(t){return this._style[d](t)},s[c]=function(t){this._style[c](t)}})),u.each({Font:"FontFamily",WindingRule:"FillRule"},(function(t,e){var i="get"+e,n="set"+e;r[i]=s[i]="#get"+t,r[n]=s[n]="#set"+t})),T.inject(s),r},{set:function(t){var e=t instanceof X,i=e?t._values:t;if(i)for(var n in i)if(n in this._defaults){var s=i[n];this[n]=s&&e&&s.clone?s.clone():s}},equals:function(t){function e(t,e,i){var n=t._values,s=e._values,r=e._defaults;for(var o in n){var l=n[o],h=s[o];if(!(i&&o in s||u.equals(l,h===a?r[o]:h)))return!1}return!0}return t===this||t&&this._class===t._class&&e(this,t)&&e(t,this,!0)||!1},_dispose:function(){var t;(t=this.getFillColor())&&(t._canvasStyle=null),(t=this.getStrokeColor())&&(t._canvasStyle=null),(t=this.getShadowColor())&&(t._canvasStyle=null)},hasFill:function(){var t=this.getFillColor();return!!t&&t.alpha>0},hasStroke:function(){var t=this.getStrokeColor();return!!t&&t.alpha>0&&this.getStrokeWidth()>0},hasShadow:function(){var t=this.getShadowColor();return!!t&&t.alpha>0&&(this.getShadowBlur()>0||!this.getShadowOffset().isZero())},getView:function(){return this._project._view},getFontStyle:function(){var t=this.getFontSize();return this.getFontWeight()+" "+t+(/[a-z]/i.test(t+"")?" ":"px ")+this.getFontFamily()},getFont:"#getFontFamily",setFont:"#setFontFamily",getLeading:function t(){var e=t.base.call(this),i=this.getFontSize();return/pt|em|%|px/.test(i)&&(i=this.getView().getPixelSize(i)),null!=e?e:1.2*i}}),Y=new function(){function t(t,e,i,n){for(var s=["","webkit","moz","Moz","ms","o"],r=e[0].toUpperCase()+e.substring(1),o=0;o<6;o++){var a=s[o],l=a?a+r:e;if(l in t){if(!i)return t[l];t[l]=n;break}}}return{getStyles:function(t){var e=t&&9!==t.nodeType?t.ownerDocument:t,i=e&&e.defaultView;return i&&i.getComputedStyle(t,"")},getBounds:function(t,e){var i,n=t.ownerDocument,s=n.body,r=n.documentElement;try{i=t.getBoundingClientRect()}catch(t){i={left:0,top:0,width:0,height:0}}var o=i.left-(r.clientLeft||s.clientLeft||0),a=i.top-(r.clientTop||s.clientTop||0);if(!e){var l=n.defaultView;o+=l.pageXOffset||r.scrollLeft||s.scrollLeft,a+=l.pageYOffset||r.scrollTop||s.scrollTop}return new x(o,a,i.width,i.height)},getViewportBounds:function(t){var e=t.ownerDocument,i=e.defaultView,n=e.documentElement;return new x(0,0,i.innerWidth||n.clientWidth,i.innerHeight||n.clientHeight)},getOffset:function(t,e){return Y.getBounds(t,e).getPoint()},getSize:function(t){return Y.getBounds(t,!0).getSize()},isInvisible:function(t){return Y.getSize(t).equals(new y(0,0))},isInView:function(t){return!Y.isInvisible(t)&&Y.getViewportBounds(t).intersects(Y.getBounds(t,!0))},isInserted:function(t){return h.body.contains(t)},getPrefixed:function(e,i){return e&&t(e,i)},setPrefixed:function(e,i,n){if("object"==typeof i)for(var s in i)t(e,s,!0,i[s]);else t(e,i,!0,n)}}},J={add:function(t,e){if(t)for(var i in e)for(var n=e[i],s=i.split(/[\s,]+/g),r=0,o=s.length;r<o;r++){var a=s[r],l=t===h&&("touchstart"===a||"touchmove"===a)&&{passive:!1};t.addEventListener(a,n,l)}},remove:function(t,e){if(t)for(var i in e)for(var n=e[i],s=i.split(/[\s,]+/g),r=0,o=s.length;r<o;r++)t.removeEventListener(s[r],n,!1)},getPoint:function(t){var e=t.targetTouches?t.targetTouches.length?t.targetTouches[0]:t.changedTouches[0]:t;return new b(e.pageX||e.clientX+h.documentElement.scrollLeft,e.pageY||e.clientY+h.documentElement.scrollTop)},getTarget:function(t){return t.target||t.srcElement},getRelatedTarget:function(t){return t.relatedTarget||t.toElement},getOffset:function(t,e){return J.getPoint(t).subtract(Y.getOffset(e||J.getTarget(t)))}};J.requestAnimationFrame=new function(){var t,e=Y.getPrefixed(l,"requestAnimationFrame"),i=!1,n=[];function s(){var t=n;n=[];for(var r=0,o=t.length;r<o;r++)t[r]();(i=e&&n.length)&&e(s)}return function(r){n.push(r),e?i||(e(s),i=!0):t||(t=setInterval(s,1e3/60))}};var Z=u.extend(c,{_class:"View",initialize:function t(e,i){function n(t){return i[t]||parseInt(i.getAttribute(t),10)}function s(){var t=Y.getSize(i);return t.isNaN()||t.isZero()?new y(n("width"),n("height")):t}var r;if(l&&i){this._id=i.getAttribute("id"),null==this._id&&i.setAttribute("id",this._id="paper-view-"+t._id++),J.add(i,this._viewEvents);var o="none";if(Y.setPrefixed(i.style,{userDrag:o,userSelect:o,touchCallout:o,contentZooming:o,tapHighlightColor:"rgba(0,0,0,0)"}),d.hasAttribute(i,"resize")){var a=this;J.add(l,this._windowEvents={resize:function(){a.setViewSize(s())}})}if(r=s(),d.hasAttribute(i,"stats")&&"undefined"!=typeof Stats){this._stats=new Stats;var u=this._stats.domElement,c=u.style,p=Y.getOffset(i);c.position="absolute",c.left=p.x+"px",c.top=p.y+"px",h.body.appendChild(u)}}else r=new y(i),i=null;this._project=e,this._scope=e._scope,this._element=i,this._pixelRatio||(this._pixelRatio=l&&l.devicePixelRatio||1),this._setElementSize(r.width,r.height),this._viewSize=r,t._views.push(this),t._viewsById[this._id]=this,(this._matrix=new S)._owner=this,t._focused||(t._focused=this),this._frameItems={},this._frameItemCount=0,this._itemEvents={native:{},virtual:{}},this._autoUpdate=!dt.agent.node,this._needsUpdate=!1},remove:function(){if(!this._project)return!1;Z._focused===this&&(Z._focused=null),Z._views.splice(Z._views.indexOf(this),1),delete Z._viewsById[this._id];var t=this._project;return t._view===this&&(t._view=null),J.remove(this._element,this._viewEvents),J.remove(l,this._windowEvents),this._element=this._project=null,this.off("frame"),this._animate=!1,this._frameItems={},!0},_events:u.each(T._itemHandlers.concat(["onResize","onKeyDown","onKeyUp"]),(function(t){this[t]={}}),{onFrame:{install:function(){this.play()},uninstall:function(){this.pause()}}}),_animate:!1,_time:0,_count:0,getAutoUpdate:function(){return this._autoUpdate},setAutoUpdate:function(t){this._autoUpdate=t,t&&this.requestUpdate()},update:function(){},draw:function(){this.update()},requestUpdate:function(){if(!this._requested){var t=this;J.requestAnimationFrame((function(){if(t._requested=!1,t._animate){t.requestUpdate();var e=t._element;Y.getPrefixed(h,"hidden")&&"true"!==d.getAttribute(e,"keepalive")||!Y.isInView(e)||t._handleFrame()}t._autoUpdate&&t.update()})),this._requested=!0}},play:function(){this._animate=!0,this.requestUpdate()},pause:function(){this._animate=!1},_handleFrame:function(){dt=this._scope;var t=Date.now()/1e3,e=this._last?t-this._last:0;this._last=t,this.emit("frame",new u({delta:e,time:this._time+=e,count:this._count++})),this._stats&&this._stats.update()},_animateItem:function(t,e){var i=this._frameItems;e?(i[t._id]={item:t,time:0,count:0},1==++this._frameItemCount&&this.on("frame",this._handleFrameItems)):(delete i[t._id],0==--this._frameItemCount&&this.off("frame",this._handleFrameItems))},_handleFrameItems:function(t){for(var e in this._frameItems){var i=this._frameItems[e];i.item.emit("frame",new u(t,{time:i.time+=t.delta,count:i.count++}))}},_changed:function(){this._project._changed(4097),this._bounds=this._decomposed=a},getElement:function(){return this._element},getPixelRatio:function(){return this._pixelRatio},getResolution:function(){return 72*this._pixelRatio},getViewSize:function(){var t=this._viewSize;return new w(t.width,t.height,this,"setViewSize")},setViewSize:function(){var t=y.read(arguments),e=t.subtract(this._viewSize);e.isZero()||(this._setElementSize(t.width,t.height),this._viewSize.set(t),this._changed(),this.emit("resize",{size:t,delta:e}),this._autoUpdate&&this.update())},_setElementSize:function(t,e){var i=this._element;i&&(i.width!==t&&(i.width=t),i.height!==e&&(i.height=e))},getBounds:function(){return this._bounds||(this._bounds=this._matrix.inverted()._transformBounds(new x(new b,this._viewSize))),this._bounds},getSize:function(){return this.getBounds().getSize()},isVisible:function(){return Y.isInView(this._element)},isInserted:function(){return Y.isInserted(this._element)},getPixelSize:function(t){var e,i=this._element;if(i){var n=i.parentNode,s=h.createElement("div");s.style.fontSize=t,n.appendChild(s),e=parseFloat(Y.getStyles(s).fontSize),n.removeChild(s)}else e=parseFloat(e);return e},getTextWidth:function(t,e){return 0}},u.each(["rotate","scale","shear","skew"],(function(t){var e="rotate"===t;this[t]=function(){var i=arguments,n=(e?u:b).read(i),s=b.read(i,0,{readNull:!0});return this.transform((new S)[t](n,s||this.getCenter(!0)))}}),{_decompose:function(){return this._decomposed||(this._decomposed=this._matrix.decompose())},translate:function(){var t=new S;return this.transform(t.translate.apply(t,arguments))},getCenter:function(){return this.getBounds().getCenter()},setCenter:function(){var t=b.read(arguments);this.translate(this.getCenter().subtract(t))},getZoom:function(){var t=this._decompose().scaling;return(t.x+t.y)/2},setZoom:function(t){this.transform((new S).scale(t/this.getZoom(),this.getCenter()))},getRotation:function(){return this._decompose().rotation},setRotation:function(t){var e=this.getRotation();null!=e&&null!=t&&this.rotate(t-e)},getScaling:function(){var t=this._decompose().scaling;return new _(t.x,t.y,this,"setScaling")},setScaling:function(){var t=this.getScaling(),e=b.read(arguments,0,{clone:!0,readNull:!0});t&&e&&this.scale(e.x/t.x,e.y/t.y)},getMatrix:function(){return this._matrix},setMatrix:function(){var t=this._matrix;t.set.apply(t,arguments)},transform:function(t){this._matrix.append(t)},scrollBy:function(){this.translate(b.read(arguments).negate())}}),{projectToView:function(){return this._matrix._transformPoint(b.read(arguments))},viewToProject:function(){return this._matrix._inverseTransform(b.read(arguments))},getEventPoint:function(t){return this.viewToProject(J.getOffset(t,this._element))}},{statics:{_views:[],_viewsById:{},_id:0,create:function(t,e){return h&&"string"==typeof e&&(e=h.getElementById(e)),new(l?$:Z)(t,e)}}},new function(){if(l){var t,e,i,n,s,r=!1,o=!1,a=l.navigator;a.pointerEnabled||a.msPointerEnabled?(i="pointerdown MSPointerDown",n="pointermove MSPointerMove",s="pointerup pointercancel MSPointerUp MSPointerCancel"):(i="touchstart",n="touchmove",s="touchend touchcancel","ontouchstart"in l&&a.userAgent.match(/mobile|tablet|ip(ad|hone|od)|android|silk/i)||(i+=" mousedown",n+=" mousemove",s+=" mouseup"));var u={},c={mouseout:function(t){var e=Z._focused,i=J.getRelatedTarget(t);if(e&&(!i||"HTML"===i.nodeName)){var n=J.getOffset(t,e._element),s=n.x,r=Math.abs,o=r(s),a=o-(1<<25);n.x=r(a)<o?a*(s<0?-1:1):s,T(e,t,e.viewToProject(n))}},scroll:k};u[i]=function(t){var e=Z._focused=P(t);r||(r=!0,e._handleMouseEvent("mousedown",t))},c[n]=function(i){var n=Z._focused;if(!o){var s=P(i);s?n!==s&&(n&&T(n,i),t||(t=n),n=Z._focused=e=s):e&&e===n&&(t&&!t.isInserted()&&(t=null),n=Z._focused=t,t=null,k())}n&&T(n,i)},c[i]=function(){o=!0},c[s]=function(t){var e=Z._focused;e&&r&&e._handleMouseEvent("mouseup",t),o=r=!1},J.add(h,c),J.add(l,{load:k});var d,p,f,g,m,v,b,_,y=!1,w=!1,x={doubleclick:"click",mousedrag:"mousemove"},C=!1,S={mousedown:{mousedown:1,mousedrag:1,click:1,doubleclick:1},mouseup:{mouseup:1,mousedrag:1,click:1,doubleclick:1},mousemove:{mousedrag:1,mousemove:1,mouseenter:1,mouseleave:1}};return{_viewEvents:u,_handleMouseEvent:function(t,e,i){var n=this._itemEvents,s=n.native[t],o="mousemove"===t,a=this._scope.tool,l=this;function h(t){return n.virtual[t]||l.responds(t)||a&&a.responds(t)}o&&r&&h("mousedrag")&&(t="mousedrag"),i||(i=this.getEventPoint(e));var u=this.getBounds().contains(i),c=s&&u&&l._project.hitTest(i,{tolerance:0,fill:!0,stroke:!0}),x=c&&c.item||null,S=!1,P={};if(P[t.substr(5)]=!0,s&&x!==g&&(g&&A(g,null,"mouseleave",e,i),x&&A(x,null,"mouseenter",e,i),g=x),C^u&&(A(this,null,u?"mouseenter":"mouseleave",e,i),S=!0),!u&&!P.drag||i.equals(p)||(I(this,x,o?t:"mousemove",e,i,p),S=!0),C=u,P.down&&u||P.up&&d){if(I(this,x,t,e,i,d),P.down){if(_=x===v&&Date.now()-b<300,f=v=x,!w&&x){for(var k=x;k&&!k.responds("mousedrag");)k=k._parent;k&&(m=x)}d=i}else P.up&&(w||x!==f||(b=Date.now(),I(this,x,_?"doubleclick":"click",e,i,d),_=!1),f=m=null);C=!1,S=!0}p=i,S&&a&&(y=a._handleMouseEvent(t,e,i,P)||y),!1!==e.cancelable&&(y&&!P.move||P.down&&h("mouseup"))&&e.preventDefault()},_handleKeyEvent:function(t,e,i,n){var s,r=this._scope,o=r.tool;function a(o){o.responds(t)&&(dt=r,o.emit(t,s=s||new et(t,e,i,n)))}this.isVisible()&&(a(this),o&&o.responds(t)&&a(o))},_countItemEvent:function(t,e){var i=this._itemEvents,n=i.native,s=i.virtual;for(var r in S)n[r]=(n[r]||0)+(S[r][t]||0)*e;s[t]=(s[t]||0)+e},statics:{updateFocus:k,_resetState:function(){r=o=y=C=!1,t=e=d=p=f=g=m=v=b=_=null}}}}function P(t){var e=J.getTarget(t);return e.getAttribute&&Z._viewsById[e.getAttribute("id")]}function k(){var t=Z._focused;if(!t||!t.isVisible())for(var i=0,n=Z._views.length;i<n;i++)if((t=Z._views[i]).isVisible()){Z._focused=e=t;break}}function T(t,e,i){t._handleMouseEvent("mousemove",e,i)}function A(t,e,i,n,s,r,o){var a,l=!1;function h(t,i){if(t.responds(i)){if(a||(a=new nt(i,n,s,e||t,r?s.subtract(r):null)),t.emit(i,a)&&(y=!0,a.prevented&&(w=!0),a.stopped))return l=!0}else{var o=x[i];if(o)return h(t,o)}}for(;t&&t!==o&&!h(t,i);)t=t._parent;return l}function I(t,e,i,n,s,r){return t._project.removeOn(i),w=y=!1,m&&A(m,null,i,n,s,r)||e&&e!==m&&!e.isDescendant(m)&&A(e,null,"mousedrag"===i?"mousemove":i,n,s,r,m)||A(t,m||e||t,i,n,s,r)}}),$=Z.extend({_class:"CanvasView",initialize:function(t,e){if(!(e instanceof l.HTMLCanvasElement)){var i=y.read(arguments,1);if(i.isZero())throw new Error("Cannot create CanvasView with the provided argument: "+u.slice(arguments,1));e=lt.getCanvas(i)}var n=this._context=e.getContext("2d");if(n.save(),this._pixelRatio=1,!/^off|false$/.test(d.getAttribute(e,"hidpi"))){var s=l.devicePixelRatio||1,r=Y.getPrefixed(n,"backingStorePixelRatio")||1;this._pixelRatio=s/r}Z.call(this,t,e),this._needsUpdate=!0},remove:function t(){return this._context.restore(),t.base.call(this)},_setElementSize:function t(e,i){var n=this._pixelRatio;if(t.base.call(this,e*n,i*n),1!==n){var s=this._element,r=this._context;if(!d.hasAttribute(s,"resize")){var o=s.style;o.width=e+"px",o.height=i+"px"}r.restore(),r.save(),r.scale(n,n)}},getContext:function(){return this._context},getPixelSize:function t(e){var i,n=dt.agent;if(n&&n.firefox)i=t.base.call(this,e);else{var s=this._context,r=s.font;s.font=e+" serif",i=parseFloat(s.font),s.font=r}return i},getTextWidth:function(t,e){var i=this._context,n=i.font,s=0;i.font=t;for(var r=0,o=e.length;r<o;r++)s=Math.max(s,i.measureText(e[r]).width);return i.font=n,s},update:function(){if(!this._needsUpdate)return!1;var t=this._project,e=this._context,i=this._viewSize;return e.clearRect(0,0,i.width+1,i.height+1),t&&t.draw(e,this._matrix,this._pixelRatio),this._needsUpdate=!1,!0}}),tt=u.extend({_class:"Event",initialize:function(t){this.event=t,this.type=t&&t.type},prevented:!1,stopped:!1,preventDefault:function(){this.prevented=!0,this.event.preventDefault()},stopPropagation:function(){this.stopped=!0,this.event.stopPropagation()},stop:function(){this.stopPropagation(),this.preventDefault()},getTimeStamp:function(){return this.event.timeStamp},getModifiers:function(){return it.modifiers}}),et=tt.extend({_class:"KeyEvent",initialize:function(t,e,i,n){this.type=t,this.event=e,this.key=i,this.character=n},toString:function(){return"{ type: '"+this.type+"', key: '"+this.key+"', character: '"+this.character+"', modifiers: "+this.getModifiers()+" }"}}),it=new function(){var t,e,i={"\t":"tab"," ":"space","\b":"backspace","":"delete",Spacebar:"space",Del:"delete",Win:"meta",Esc:"escape"},n={tab:"\t",space:" ",enter:"\r"},s={},r={},o=new u({shift:!1,control:!1,alt:!1,meta:!1,capsLock:!1,space:!1}).inject({option:{get:function(){return this.alt}},command:{get:function(){var t=dt&&dt.agent;return t&&t.mac?this.meta:this.control}}});function c(t){var e=t.key||t.keyIdentifier;return e=/^U\+/.test(e)?String.fromCharCode(parseInt(e.substr(2),16)):/^Arrow[A-Z]/.test(e)?e.substr(5):"Unidentified"===e||e===a?String.fromCharCode(t.keyCode):e,i[e]||(e.length>1?u.hyphenate(e):e.toLowerCase())}function d(e,i,n,a){var l,h=Z._focused;if(s[i]=e,e?r[i]=n:delete r[i],i.length>1&&(l=u.camelize(i))in o){o[l]=e;var c=dt&&dt.agent;if("meta"===l&&c&&c.mac)if(e)t={};else{for(var p in t)p in r&&d(!1,p,t[p],a);t=null}}else e&&t&&(t[i]=n);h&&h._handleKeyEvent(e?"keydown":"keyup",a,i,n)}return J.add(h,{keydown:function(t){var i=c(t),s=dt&&dt.agent;i.length>1||s&&s.chrome&&(t.altKey||s.mac&&t.metaKey||!s.mac&&t.ctrlKey)?d(!0,i,n[i]||(i.length>1?"":i),t):e=i},keypress:function(t){if(e){var i=c(t),n=t.charCode,s=n>=32?String.fromCharCode(n):i.length>1?"":i;i!==e&&(i=s.toLowerCase()),d(!0,i,s,t),e=null}},keyup:function(t){var e=c(t);e in r&&d(!1,e,r[e],t)}}),J.add(l,{blur:function(t){for(var e in r)d(!1,e,r[e],t)}}),{modifiers:o,isDown:function(t){return!!s[t]}}},nt=tt.extend({_class:"MouseEvent",initialize:function(t,e,i,n,s){this.type=t,this.event=e,this.point=i,this.target=n,this.delta=s},toString:function(){return"{ type: '"+this.type+"', point: "+this.point+", target: "+this.target+(this.delta?", delta: "+this.delta:"")+", modifiers: "+this.getModifiers()+" }"}}),st=tt.extend({_class:"ToolEvent",_item:null,initialize:function(t,e,i){this.tool=t,this.type=e,this.event=i},_choosePoint:function(t,e){return t||(e?e.clone():null)},getPoint:function(){return this._choosePoint(this._point,this.tool._point)},setPoint:function(t){this._point=t},getLastPoint:function(){return this._choosePoint(this._lastPoint,this.tool._lastPoint)},setLastPoint:function(t){this._lastPoint=t},getDownPoint:function(){return this._choosePoint(this._downPoint,this.tool._downPoint)},setDownPoint:function(t){this._downPoint=t},getMiddlePoint:function(){return!this._middlePoint&&this.tool._lastPoint?this.tool._point.add(this.tool._lastPoint).divide(2):this._middlePoint},setMiddlePoint:function(t){this._middlePoint=t},getDelta:function(){return!this._delta&&this.tool._lastPoint?this.tool._point.subtract(this.tool._lastPoint):this._delta},setDelta:function(t){this._delta=t},getCount:function(){return this.tool[/^mouse(down|up)$/.test(this.type)?"_downCount":"_moveCount"]},setCount:function(t){this.tool[/^mouse(down|up)$/.test(this.type)?"downCount":"count"]=t},getItem:function(){if(!this._item){var t=this.tool._scope.project.hitTest(this.getPoint());if(t){for(var e=t.item,i=e._parent;/^(Group|CompoundPath)$/.test(i._class);)e=i,i=i._parent;this._item=e}}return this._item},setItem:function(t){this._item=t},toString:function(){return"{ type: "+this.type+", point: "+this.getPoint()+", count: "+this.getCount()+", modifiers: "+this.getModifiers()+" }"}}),rt=p.extend({_class:"Tool",_list:"tools",_reference:"tool",_events:["onMouseDown","onMouseUp","onMouseDrag","onMouseMove","onActivate","onDeactivate","onEditOptions","onKeyDown","onKeyUp"],initialize:function(t){p.call(this),this._moveCount=-1,this._downCount=-1,this.set(t)},getMinDistance:function(){return this._minDistance},setMinDistance:function(t){this._minDistance=t,null!=t&&null!=this._maxDistance&&t>this._maxDistance&&(this._maxDistance=t)},getMaxDistance:function(){return this._maxDistance},setMaxDistance:function(t){this._maxDistance=t,null!=this._minDistance&&null!=t&&t<this._minDistance&&(this._minDistance=t)},getFixedDistance:function(){return this._minDistance==this._maxDistance?this._minDistance:null},setFixedDistance:function(t){this._minDistance=this._maxDistance=t},_handleMouseEvent:function(t,e,i,n){dt=this._scope,n.drag&&!this.responds(t)&&(t="mousemove");var s=n.move||n.drag,r=this.responds(t),o=this.minDistance,a=this.maxDistance,l=!1,h=this;function u(t,e){var r=i,o=s?h._point:h._downPoint||r;if(s){if(h._moveCount>=0&&r.equals(o))return!1;if(o&&(null!=t||null!=e)){var a=r.subtract(o),l=a.getLength();if(l<(t||0))return!1;e&&(r=o.add(a.normalize(Math.min(l,e))))}h._moveCount++}return h._point=r,h._lastPoint=o||r,n.down&&(h._moveCount=-1,h._downPoint=r,h._downCount++),!0}function c(){r&&(l=h.emit(t,new st(h,t,e))||l)}if(n.down)u(),c();else if(n.up)u(null,a),c();else if(r)for(;u(o,a);)c();return l}}),ot=u.extend(c,{_class:"Tween",statics:{easings:new u({linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return t*(2-t)},easeInOutQuad:function(t){return t<.5?2*t*t:2*(2-t)*t-1},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return--t*t*t+1},easeInOutCubic:function(t){return t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return 1- --t*t*t*t},easeInOutQuart:function(t){return t<.5?8*t*t*t*t:1-8*--t*t*t*t},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return 1+--t*t*t*t*t},easeInOutQuint:function(t){return t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t}})},initialize:function t(e,i,n,s,r,o){this.object=e;var a=typeof r,l="function"===a;this.type=l?a:"string"===a?r:"linear",this.easing=l?r:t.easings[this.type],this.duration=s,this.running=!1,this._then=null,this._startTime=null;var h=i||n;this._keys=h?Object.keys(h):[],this._parsedKeys=this._parseKeys(this._keys),this._from=h&&this._getState(i),this._to=h&&this._getState(n),!1!==o&&this.start()},then:function(t){return this._then=t,this},start:function(){return this._startTime=null,this.running=!0,this},stop:function(){return this.running=!1,this},update:function(t){if(this.running){t>=1&&(t=1,this.running=!1);for(var e=this.easing(t),i=this._keys,n=function(i){return"function"==typeof i?i(e,t):i},s=0,r=i&&i.length;s<r;s++){var o=i[s],a=n(this._from[o]),l=n(this._to[o]),h=a&&l&&a.__add&&l.__add?l.__subtract(a).__multiply(e).__add(a):(l-a)*e+a;this._setProperty(this._parsedKeys[o],h)}this.responds("update")&&this.emit("update",new u({progress:t,factor:e})),!this.running&&this._then&&this._then(this.object)}return this},_events:{onUpdate:{}},_handleFrame:function(t){var e=this._startTime,i=e?(t-e)/this.duration:0;e||(this._startTime=t),this.update(i)},_getState:function(t){for(var e=this._keys,i={},n=0,s=e.length;n<s;n++){var r,o=e[n],a=this._parsedKeys[o],l=this._getProperty(a);if(t){var h=this._resolveValue(l,t[o]);this._setProperty(a,h),r=(r=this._getProperty(a))&&r.clone?r.clone():r,this._setProperty(a,l)}else r=l&&l.clone?l.clone():l;i[o]=r}return i},_resolveValue:function(t,e){if(e){if(Array.isArray(e)&&2===e.length){var i=e[0];return i&&i.match&&i.match(/^[+\-\*\/]=/)?this._calculate(t,i[0],e[1]):e}if("string"==typeof e){var n=e.match(/^[+\-*/]=(.*)/);if(n){var s=JSON.parse(n[1].replace(/(['"])?([a-zA-Z0-9_]+)(['"])?:/g,'"$2": '));return this._calculate(t,e[0],s)}}}return e},_calculate:function(t,e,i){return dt.PaperScript.calculateBinary(t,e,i)},_parseKeys:function(t){for(var e={},i=0,n=t.length;i<n;i++){var s=t[i],r=s.replace(/\.([^.]*)/g,"/$1").replace(/\[['"]?([^'"\]]*)['"]?\]/g,"/$1");e[s]=r.split("/")}return e},_getProperty:function(t,e){for(var i=this.object,n=0,s=t.length-(e||0);n<s&&i;n++)i=i[t[n]];return i},_setProperty:function(t,e){var i=this._getProperty(t,1);i&&(i[t[t.length-1]]=e)}}),at=function(t){var e=new o.XMLHttpRequest;return e.open((t.method||"get").toUpperCase(),t.url,u.pick(t.async,!0)),t.mimeType&&e.overrideMimeType(t.mimeType),e.onload=function(){var i=e.status;0===i||200===i?t.onLoad&&t.onLoad.call(e,e.responseText):e.onerror()},e.onerror=function(){var i=e.status,n='Could not load "'+t.url+'" (Status: '+i+")";if(!t.onError)throw new Error(n);t.onError(n,i)},e.send(null)},lt=u.exports.CanvasProvider={canvases:[],getCanvas:function(t,e){if(!l)return null;var i,n=!0;"object"==typeof t&&(e=t.height,t=t.width),this.canvases.length?i=this.canvases.pop():(i=h.createElement("canvas"),n=!1);var s=i.getContext("2d");if(!s)throw new Error("Canvas "+i+" is unable to provide a 2D context.");return i.width===t&&i.height===e?n&&s.clearRect(0,0,t+1,e+1):(i.width=t,i.height=e),s.save(),i},getContext:function(t,e){var i=this.getCanvas(t,e);return i?i.getContext("2d"):null},release:function(t){var e=t&&t.canvas?t.canvas:t;e&&e.getContext&&(e.getContext("2d").restore(),this.canvases.push(e))}},ht=new function(){var t,e,i,n,s,r,o,a,l,h,c,d=Math.min,p=Math.max,f=Math.abs;function g(t,e,i){return.2989*t+.587*e+.114*i}function m(t,e,i,n){var s=n-g(t,e,i),r=(n=g(l=t+s,h=e+s,c=i+s),d(l,h,c)),o=p(l,h,c);if(r<0){var a=n-r;l=n+(l-n)*n/a,h=n+(h-n)*n/a,c=n+(c-n)*n/a}if(o>255){var u=255-n,f=o-n;l=n+(l-n)*u/f,h=n+(h-n)*u/f,c=n+(c-n)*u/f}}function v(t,e,i){return p(t,e,i)-d(t,e,i)}function b(t,e,i,n){var s,r=[t,e,i],o=p(t,e,i),a=d(t,e,i);s=0===d(a=a===t?0:a===e?1:2,o=o===t?0:o===e?1:2)?1===p(a,o)?2:1:0,r[o]>r[a]?(r[s]=(r[s]-r[a])*n/(r[o]-r[a]),r[o]=n):r[s]=r[o]=0,r[a]=0,l=r[0],h=r[1],c=r[2]}var _={multiply:function(){l=s*t/255,h=r*e/255,c=o*i/255},screen:function(){l=s+t-s*t/255,h=r+e-r*e/255,c=o+i-o*i/255},overlay:function(){l=s<128?2*s*t/255:255-2*(255-s)*(255-t)/255,h=r<128?2*r*e/255:255-2*(255-r)*(255-e)/255,c=o<128?2*o*i/255:255-2*(255-o)*(255-i)/255},"soft-light":function(){var n=t*s/255;l=n+s*(255-(255-s)*(255-t)/255-n)/255,h=(n=e*r/255)+r*(255-(255-r)*(255-e)/255-n)/255,c=(n=i*o/255)+o*(255-(255-o)*(255-i)/255-n)/255},"hard-light":function(){l=t<128?2*t*s/255:255-2*(255-t)*(255-s)/255,h=e<128?2*e*r/255:255-2*(255-e)*(255-r)/255,c=i<128?2*i*o/255:255-2*(255-i)*(255-o)/255},"color-dodge":function(){l=0===s?0:255===t?255:d(255,255*s/(255-t)),h=0===r?0:255===e?255:d(255,255*r/(255-e)),c=0===o?0:255===i?255:d(255,255*o/(255-i))},"color-burn":function(){l=255===s?255:0===t?0:p(0,255-255*(255-s)/t),h=255===r?255:0===e?0:p(0,255-255*(255-r)/e),c=255===o?255:0===i?0:p(0,255-255*(255-o)/i)},darken:function(){l=s<t?s:t,h=r<e?r:e,c=o<i?o:i},lighten:function(){l=s>t?s:t,h=r>e?r:e,c=o>i?o:i},difference:function(){(l=s-t)<0&&(l=-l),(h=r-e)<0&&(h=-h),(c=o-i)<0&&(c=-c)},exclusion:function(){l=s+t*(255-s-s)/255,h=r+e*(255-r-r)/255,c=o+i*(255-o-o)/255},hue:function(){b(t,e,i,v(s,r,o)),m(l,h,c,g(s,r,o))},saturation:function(){b(s,r,o,v(t,e,i)),m(l,h,c,g(s,r,o))},luminosity:function(){m(s,r,o,g(t,e,i))},color:function(){m(t,e,i,g(s,r,o))},add:function(){l=d(s+t,255),h=d(r+e,255),c=d(o+i,255)},subtract:function(){l=p(s-t,0),h=p(r-e,0),c=p(o-i,0)},average:function(){l=(s+t)/2,h=(r+e)/2,c=(o+i)/2},negation:function(){l=255-f(255-t-s),h=255-f(255-e-r),c=255-f(255-i-o)}},y=this.nativeModes=u.each(["source-over","source-in","source-out","source-atop","destination-over","destination-in","destination-out","destination-atop","lighter","darker","copy","xor"],(function(t){this[t]=!0}),{}),w=lt.getContext(1,1);w&&(u.each(_,(function(t,e){var i="darken"===e,n=!1;w.save();try{w.fillStyle=i?"#300":"#a00",w.fillRect(0,0,1,1),w.globalCompositeOperation=e,w.globalCompositeOperation===e&&(w.fillStyle=i?"#a00":"#300",w.fillRect(0,0,1,1),n=w.getImageData(0,0,1,1).data[0]!==i?170:51)}catch(t){}w.restore(),y[e]=n})),lt.release(w)),this.process=function(u,d,p,f,g){var m=d.canvas,v="normal"===u;if(v||y[u])p.save(),p.setTransform(1,0,0,1,0,0),p.globalAlpha=f,v||(p.globalCompositeOperation=u),p.drawImage(m,g.x,g.y),p.restore();else{var b=_[u];if(!b)return;for(var w=p.getImageData(g.x,g.y,m.width,m.height),x=w.data,C=d.getImageData(0,0,m.width,m.height).data,S=0,P=x.length;S<P;S+=4){t=C[S],s=x[S],e=C[S+1],r=x[S+1],i=C[S+2],o=x[S+2],n=C[S+3],a=x[S+3],b();var k=n*f/255,T=1-k;x[S]=k*l+T*s,x[S+1]=k*h+T*r,x[S+2]=k*c+T*o,x[S+3]=n*f+T*a}p.putImageData(w,g.x,g.y)}}},ut=new function(){var t="http://www.w3.org/2000/svg",e="http://www.w3.org/2000/xmlns",i="http://www.w3.org/1999/xlink",n={href:i,xlink:e,xmlns:e+"/","xmlns:xlink":e+"/"};function s(t,e,i){for(var s in e){var r=e[s],o=n[s];"number"==typeof r&&i&&(r=i.number(r)),o?t.setAttributeNS(o,s,r):t.setAttribute(s,r)}return t}return{svg:t,xmlns:e,xlink:i,create:function(e,i,n){return s(h.createElementNS(t,e),i,n)},get:function(t,e){var i=n[e],s=i?t.getAttributeNS(i,e):t.getAttribute(e);return"null"===s?null:s},set:s}},ct=u.each({fillColor:["fill","color"],fillRule:["fill-rule","string"],strokeColor:["stroke","color"],strokeWidth:["stroke-width","number"],strokeCap:["stroke-linecap","string"],strokeJoin:["stroke-linejoin","string"],strokeScaling:["vector-effect","lookup",{true:"none",false:"non-scaling-stroke"},function(t,e){return!e&&(t instanceof V||t instanceof E||t instanceof H)}],miterLimit:["stroke-miterlimit","number"],dashArray:["stroke-dasharray","array"],dashOffset:["stroke-dashoffset","number"],fontFamily:["font-family","string"],fontWeight:["font-weight","string"],fontSize:["font-size","number"],justification:["text-anchor","lookup",{left:"start",center:"middle",right:"end"}],opacity:["opacity","number"],blendMode:["mix-blend-mode","style"]},(function(t,e){var i=u.capitalize(e),n=t[2];this[e]={type:t[1],property:e,attribute:t[0],toSVG:n,fromSVG:n&&u.each(n,(function(t,e){this[t]=e}),{}),exportFilter:t[3],get:"get"+i,set:"set"+i}}),{});new function(){var t;function e(e,i,n){var s,r=new u,o=e.getTranslation();if(i&&(e.isInvertible()?(s=(e=e._shiftless())._inverseTransform(o),o=null):s=new b,r[n?"cx":"x"]=s.x,r[n?"cy":"y"]=s.y),!e.isIdentity()){var a=e.decompose();if(a){var l=[],h=a.rotation,c=a.scaling,d=a.skewing;o&&!o.isZero()&&l.push("translate("+t.point(o)+")"),h&&l.push("rotate("+t.number(h)+")"),m.isZero(c.x-1)&&m.isZero(c.y-1)||l.push("scale("+t.point(c)+")"),d.x&&l.push("skewX("+t.number(d.x)+")"),d.y&&l.push("skewY("+t.number(d.y)+")"),r.transform=l.join(" ")}else r.transform="matrix("+e.getValues().join(",")+")"}return r}function i(i,n){for(var s=e(i._matrix),r=i._children,o=ut.create("g",s,t),a=0,h=r.length;a<h;a++){var u=r[a],d=c(u,n);if(d)if(u.isClipMask()){var p=ut.create("clipPath");p.appendChild(d),l(u,p,"clip"),ut.set(o,{"clip-path":"url(#"+p.id+")"})}else o.appendChild(d)}return o}function n(i){var n=i._type,s=i._radius,r=e(i._matrix,!0,"rectangle"!==n);if("rectangle"===n){n="rect";var o=i._size,a=o.width,l=o.height;r.x-=a/2,r.y-=l/2,r.width=a,r.height=l,s.isZero()&&(s=null)}return s&&("circle"===n?r.r=s:(r.rx=s.width,r.ry=s.height)),ut.create(n,r,t)}var s,r={Group:i,Layer:i,Raster:function(i,n){var s=e(i._matrix,!0),r=i.getSize(),o=i.getImage();return s.x-=r.width/2,s.y-=r.height/2,s.width=r.width,s.height=r.height,s.href=0==n.embedImages&&o&&o.src||i.toDataURL(),ut.create("image",s,t)},Path:function(i,s){var r=s.matchShapes;if(r){var o=i.toShape(!1);if(o)return n(o)}var a,l=i._segments,h=l.length,u=e(i._matrix);if(r&&h>=2&&!i.hasHandles())if(h>2){a=i._closed?"polygon":"polyline";for(var c=[],d=0;d<h;d++)c.push(t.point(l[d]._point));u.points=c.join(" ")}else{a="line";var p=l[0]._point,f=l[1]._point;u.set({x1:p.x,y1:p.y,x2:f.x,y2:f.y})}else a="path",u.d=i.getPathData(null,s.precision);return ut.create(a,u,t)},Shape:n,CompoundPath:function(i,n){var s=e(i._matrix),r=i.getPathData(null,n.precision);return r&&(s.d=r),ut.create("path",s,t)},SymbolItem:function(i,n){var s=e(i._matrix,!0),r=i._definition,o=a(r,"symbol"),h=r._item,u=h.getStrokeBounds();return o||((o=ut.create("symbol",{viewBox:t.rectangle(u)})).appendChild(c(h,n)),l(r,o,"symbol")),s.href="#"+o.id,s.x+=u.x,s.y+=u.y,s.width=u.width,s.height=u.height,s.overflow="visible",ut.create("use",s,t)},PointText:function(i){var n=ut.create("text",e(i._matrix,!0),t);return n.textContent=i._content,n}};function a(t,e){return s||(s={ids:{},svgs:{}}),t&&s.svgs[e+"-"+(t._id||t.__id||(t.__id=v.get("svg")))]}function l(t,e,i){s||a();var n=s.ids[i]=(s.ids[i]||0)+1;e.id=i+"-"+n,s.svgs[i+"-"+(t._id||t.__id)]=e}function h(t,e){var i=t,n=null;if(s){for(var r in i="svg"===t.nodeName.toLowerCase()&&t,s.svgs)n||(i||(i=ut.create("svg")).appendChild(t),n=i.insertBefore(ut.create("defs"),i.firstChild)),n.appendChild(s.svgs[r]);s=null}return e.asString?(new o.XMLSerializer).serializeToString(i):i}function c(e,i,n){var s=r[e._class],o=s&&s(e,i);if(o){var h=i.onExport;h&&(o=h(e,o,i)||o);var c=JSON.stringify(e._data);c&&"{}"!==c&&"null"!==c&&o.setAttribute("data-paper-data",c)}return o&&function(e,i,n){var s={},r=!n&&e.getParent(),o=[];return null!=e._name&&(s.id=e._name),u.each(ct,(function(i){var n=i.get,h=i.type,c=e[n]();if(i.exportFilter?i.exportFilter(e,c):!r||!u.equals(r[n](),c)){if("color"===h&&null!=c){var d=c.getAlpha();d<1&&(s[i.attribute+"-opacity"]=d)}"style"===h?o.push(i.attribute+": "+c):s[i.attribute]=null==c?"none":"color"===h?c.gradient?function(e){var i=a(e,"color");if(!i){var n,s=e.getGradient(),r=s._radial,o=e.getOrigin(),h=e.getDestination();if(r){n={cx:o.x,cy:o.y,r:o.getDistance(h)};var u=e.getHighlight();u&&(n.fx=u.x,n.fy=u.y)}else n={x1:o.x,y1:o.y,x2:h.x,y2:h.y};n.gradientUnits="userSpaceOnUse",i=ut.create((r?"radial":"linear")+"Gradient",n,t);for(var c=s._stops,d=0,p=c.length;d<p;d++){var f=c[d],g=f._color,m=g.getAlpha(),v=f._offset;n={offset:null==v?d/(p-1):v},g&&(n["stop-color"]=g.toCSS(!0)),m<1&&(n["stop-opacity"]=m),i.appendChild(ut.create("stop",n,t))}l(e,i,"color")}return"url(#"+i.id+")"}(c):c.toCSS(!0):"array"===h?c.join(","):"lookup"===h?i.toSVG[c]:c}})),o.length&&(s.style=o.join(";")),1===s.opacity&&delete s.opacity,e._visible||(s.visibility="hidden"),ut.set(i,s,t)}(e,o,n)}function d(e){return e||(e={}),t=new g(e.precision),e}T.inject({exportSVG:function(t){return h(c(this,t=d(t),!0),t)}}),k.inject({exportSVG:function(i){i=d(i);var n=this._children,s=this.getView(),r=u.pick(i.bounds,"view"),o=i.matrix||"view"===r&&s._matrix,a=o&&S.read([o]),l="view"===r?new x([0,0],s.getViewSize()):"content"===r?T._getBounds(n,a,{stroke:!0}).rect:x.read([r],0,{readNull:!0}),p={version:"1.1",xmlns:ut.svg,"xmlns:xlink":ut.xlink};l&&(p.width=l.width,p.height=l.height,(l.x||0===l.x||l.y||0===l.y)&&(p.viewBox=t.rectangle(l)));var f=ut.create("svg",p,t),g=f;a&&!a.isIdentity()&&(g=f.appendChild(ut.create("g",e(a),t)));for(var m=0,v=n.length;m<v;m++)g.appendChild(c(n[m],i,!0));return h(f,i)}})},new function(){var t,e={};function i(e,i,n,s,r,o){var a=ut.get(e,i)||o,l=null==a?s?null:n?"":0:n?a:parseFloat(a);return/%\s*$/.test(a)?l/100*(r?1:t[/x|^width/.test(i)?"width":"height"]):l}function n(t,e,n,s,r,o,a){return e=i(t,e||"x",!1,s,r,o),n=i(t,n||"y",!1,s,r,a),!s||null!=e&&null!=n?new b(e,n):null}function s(t,e,n,s,r){return e=i(t,e||"width",!1,s,r),n=i(t,n||"height",!1,s,r),!s||null!=e&&null!=n?new y(e,n):null}function r(t,e,i){return"none"===t?null:"number"===e?parseFloat(t):"array"===e?t?t.split(/[\s,]+/g).map(parseFloat):[]:"color"===e?C(t)||t:"lookup"===e?i[t]:t}function c(t,e,i,n){var s=t.childNodes,r="clippath"===e,o="defs"===e,a=new A,l=a._project,h=l._currentStyle,u=[];if(r||o||(a=w(a,t,n),l._currentStyle=a._style.clone()),n)for(var c=t.querySelectorAll("defs"),d=0,p=c.length;d<p;d++)P(c[d],i,!1);for(d=0,p=s.length;d<p;d++){var f,g=s[d];1!==g.nodeType||/^defs$/i.test(g.nodeName)||!(f=P(g,i,!1))||f instanceof L||u.push(f)}return a.addChildren(u),r&&(a=w(a.reduce(),t,n)),l._currentStyle=h,(r||o)&&(a.remove(),a=null),a}function d(t,e){for(var i=t.getAttribute("points").match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g),n=[],s=0,r=i.length;s<r;s+=2)n.push(new b(parseFloat(i[s]),parseFloat(i[s+1])));var o=new j(n);return"polygon"===e&&o.closePath(),o}function p(t,s){var r,o=(i(t,"href",!0)||"").substring(1),a="radialgradient"===s;if(o)(r=e[o].getGradient())._radial^a&&((r=r.clone())._radial=a);else{for(var l=t.childNodes,h=[],u=0,c=l.length;u<c;u++){var d=l[u];1===d.nodeType&&h.push(w(new Q,d))}r=new K(h,a)}var p,f,g,m="userSpaceOnUse"!==i(t,"gradientUnits",!0);return a?(f=(p=n(t,"cx","cy",!1,m,"50%","50%")).add(i(t,"r",!1,!1,m,"50%"),0),g=n(t,"fx","fy",!0,m)):(p=n(t,"x1","y1",!1,m,"0%","0%"),f=n(t,"x2","y2",!1,m,"100%","0%")),w(new W(r,p,f,g),t)._scaleToBounds=m,null}var f={"#document":function(t,e,i,n){for(var s=t.childNodes,r=0,o=s.length;r<o;r++){var a=s[r];if(1===a.nodeType)return P(a,i,n)}},g:c,svg:c,clippath:c,polygon:d,polyline:d,path:function(t){return V.create(t.getAttribute("d"))},lineargradient:p,radialgradient:p,image:function(t){var e=new M(i(t,"href",!0));return e.on("load",(function(){var e=s(t);this.setSize(e);var i=n(t).add(e.divide(2));this._matrix.append((new S).translate(i))})),e},symbol:function(t,e,i,n){return new L(c(t,e,i,n),!0)},defs:c,use:function(t){var s=(i(t,"href",!0)||"").substring(1),r=e[s],o=n(t);return r?r instanceof L?r.place(o):r.clone().translate(o):null},circle:function(t){return new E.Circle(n(t,"cx","cy"),i(t,"r"))},ellipse:function(t){return new E.Ellipse({center:n(t,"cx","cy"),radius:s(t,"rx","ry")})},rect:function(t){return new E.Rectangle(new x(n(t),s(t)),s(t,"rx","ry"))},line:function(t){return new j.Line(n(t,"x1","y1"),n(t,"x2","y2"))},text:function(t){var e=new G(n(t).add(n(t,"dx","dy")));return e.setContent(t.textContent.trim()||""),e},switch:c};function g(t,e,i,n){if(t.transform){for(var s=(n.getAttribute(i)||"").split(/\)\s*/g),r=new S,o=0,a=s.length;o<a;o++){var l=s[o];if(!l)break;for(var h=l.split(/\(\s*/),u=h[0],c=h[1].split(/[\s,]+/g),d=0,p=c.length;d<p;d++)c[d]=parseFloat(c[d]);switch(u){case"matrix":r.append(new S(c[0],c[1],c[2],c[3],c[4],c[5]));break;case"rotate":r.rotate(c[0],c[1]||0,c[2]||0);break;case"translate":r.translate(c[0],c[1]||0);break;case"scale":r.scale(c);break;case"skewX":r.skew(c[0],0);break;case"skewY":r.skew(0,c[0])}}t.transform(r)}}function m(t,e,i){var n="fill-opacity"===i?"getFillColor":"getStrokeColor",s=t[n]&&t[n]();s&&s.setAlpha(parseFloat(e))}var v=u.set(u.each(ct,(function(t){this[t.attribute]=function(e,i){if(e[t.set]&&(e[t.set](r(i,t.type,t.fromSVG)),"color"===t.type)){var n=e[t.get]();if(n&&n._scaleToBounds){var s=e.getBounds();n.transform((new S).translate(s.getPoint()).scale(s.getSize()))}}}}),{}),{id:function(t,i){e[i]=t,t.setName&&t.setName(i)},"clip-path":function(t,e){var i=C(e);if(i){if((i=i.clone()).setClipMask(!0),!(t instanceof A))return new A(i,t);t.insertChild(0,i)}},gradientTransform:g,transform:g,"fill-opacity":m,"stroke-opacity":m,visibility:function(t,e){t.setVisible&&t.setVisible("visible"===e)},display:function(t,e){t.setVisible&&t.setVisible(null!==e)},"stop-color":function(t,e){t.setColor&&t.setColor(e)},"stop-opacity":function(t,e){t._color&&t._color.setAlpha(parseFloat(e))},offset:function(t,e){if(t.setOffset){var i=e.match(/(.*)%$/);t.setOffset(i?i[1]/100:parseFloat(e))}},viewBox:function(t,e,i,n,o){var a,l=new x(r(e,"array")),h=s(n,null,null,!0);if(t instanceof A){var u=h?h.divide(l.getSize()):1,c=(new S).scale(u).translate(l.getPoint().negate());a=t}else t instanceof L&&(h&&l.setSize(h),a=t._item);if(a){if("visible"!==_(n,"overflow",o)){var d=new E.Rectangle(l);d.setClipMask(!0),a.addChild(d)}c&&a.transform(c)}}});function _(t,e,i){var n=t.attributes[e],s=n&&n.value;if(!s&&t.style){var r=u.camelize(e);(s=t.style[r])||i.node[r]===i.parent[r]||(s=i.node[r])}return s?"none"===s?null:s:a}function w(t,e,i){var n=e.parentNode,s={node:Y.getStyles(e)||{},parent:!i&&!/^defs$/i.test(n.tagName)&&Y.getStyles(n)||{}};return u.each(v,(function(i,n){var r=_(e,n,s);t=r!==a&&i(t,r,n,e,s)||t})),t}function C(t){var i=t&&t.match(/\((?:["'#]*)([^"')]+)/),n=i&&i[1],s=n&&e[l?n.replace(l.location.href.split("#")[0]+"#",""):n];return s&&s._scaleToBounds&&((s=s.clone())._scaleToBounds=!0),s}function P(i,n,r){var o,a,l,c=i.nodeName.toLowerCase(),d="#document"!==c,p=h.body;r&&d&&(t=dt.getView().getSize(),t=s(i,null,null,!0)||t,o=ut.create("svg",{style:"stroke-width: 1px; stroke-miterlimit: 10"}),a=i.parentNode,l=i.nextSibling,o.appendChild(i),p.appendChild(o));var g=dt.settings,m=g.applyMatrix,v=g.insertItems;g.applyMatrix=!1,g.insertItems=!1;var b=f[c],_=b&&b(i,c,n,r)||null;if(g.insertItems=v,g.applyMatrix=m,_){!d||_ instanceof A||(_=w(_,i,r));var y=n.onImport,x=d&&i.getAttribute("data-paper-data");y&&(_=y(i,_,n)||_),n.expandShapes&&_ instanceof E&&(_.remove(),_=_.toPath()),x&&(_._data=JSON.parse(x))}return o&&(p.removeChild(o),a&&(l?a.insertBefore(i,l):a.appendChild(i))),r&&(e={},_&&u.pick(n.applyMatrix,m)&&_.matrix.apply(!0,!0)),_}function I(t,e,i){if(!t)return null;e="function"==typeof e?{onLoad:e}:e||{};var n=dt,s=null;function r(r){try{var h="object"==typeof r?r:(new o.DOMParser).parseFromString(r.trim(),"image/svg+xml");if(!h.nodeName)throw h=null,new Error("Unsupported SVG source: "+t);dt=n,s=P(h,e,!0),e&&!1===e.insert||i._insertItem(a,s);var u=e.onLoad;u&&u(s,r)}catch(t){l(t)}}function l(t,i){var n=e.onError;if(!n)throw new Error(t);n(t,i)}if("string"!=typeof t||/^[\s\S]*</.test(t)){if("undefined"!=typeof File&&t instanceof File){var u=new FileReader;return u.onload=function(){r(u.result)},u.onerror=function(){l(u.error)},u.readAsText(t)}r(t)}else{var c=h.getElementById(t);c?r(c):at({url:t,async:!0,onLoad:r,onError:l})}return s}T.inject({importSVG:function(t,e){return I(t,e,this)}}),k.inject({importSVG:function(t,e){return this.activate(),I(t,e,this)}})},u.exports.PaperScript=function(){var t,e,c,p=this,f=p.acorn;if(!f)try{f=i(234)}catch(t){}function g(t,e){return(p.acorn||f).parse(t,e)}f||(f=t=e={},c=function(t){"use strict";var e,i,n,s;t.version="0.5.0",t.parse=function(t,s){return i=String(t),n=i.length,o(s),Wt(),function(t){v=b=a,e.locations&&(_=new Gt),y=x=null,w=[],Jt();var i=t||he(),n=!0;for(t||(i.body=[]);d!==E;){var s=we();i.body.push(s),n&&de(s)&&oe(!0),n=!1}return ce(i,"Program")}(e.program)};var r=t.defaultOptions={ecmaVersion:5,strictSemicolons:!1,allowTrailingCommas:!0,forbidReserved:!1,allowReturnOutsideFunction:!1,locations:!1,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null};function o(t){for(var i in e=t||{},r)Object.prototype.hasOwnProperty.call(e,i)||(e[i]=r[i]);s=e.sourceFile||null}var a,l,h,u,c,d,p,f,g,m,v,b,_,y,w,x,C=t.getLineInfo=function(t,e){for(var i=1,n=0;;){Ut.lastIndex=n;var s=Ut.exec(t);if(!(s&&s.index<e))break;++i,n=s.index+s[0].length}return{line:i,column:e-n}};function S(t,e){var n=C(i,t);e+=" ("+n.line+":"+n.column+")";var s=new SyntaxError(e);throw s.pos=t,s.loc=n,s.raisedAt=a,s}t.tokenize=function(t,s){i=String(t),n=i.length,o(s),Wt();var r={};function v(t){return b=h,Jt(t),r.start=l,r.end=h,r.startLoc=u,r.endLoc=c,r.type=d,r.value=p,r}return v.jumpTo=function(t,n){var s;if(a=t,e.locations)for(g=1,m=Ut.lastIndex=0;(s=Ut.exec(i))&&s.index<t;)++g,m=s.index+s[0].length;f=n,Yt()},v};var P=[],k={type:"num"},T={type:"regexp"},A={type:"string"},I={type:"name"},E={type:"eof"},M={keyword:"break"},D={keyword:"case",beforeExpr:!0},L={keyword:"catch"},N={keyword:"continue"},O={keyword:"debugger"},R={keyword:"default"},F={keyword:"do",isLoop:!0},B={keyword:"else",beforeExpr:!0},V={keyword:"finally"},j={keyword:"for",isLoop:!0},z={keyword:"function"},U={keyword:"if"},q={keyword:"return",beforeExpr:!0},H={keyword:"switch"},G={keyword:"throw",beforeExpr:!0},W={keyword:"try"},K={keyword:"var"},Q={keyword:"while",isLoop:!0},X={keyword:"with"},Y={keyword:"new",beforeExpr:!0},J={keyword:"this"},Z={keyword:"null",atomValue:null},$={keyword:"true",atomValue:!0},tt={keyword:"false",atomValue:!1},et={keyword:"in",binop:7,beforeExpr:!0},it={break:M,case:D,catch:L,continue:N,debugger:O,default:R,do:F,else:B,finally:V,for:j,function:z,if:U,return:q,switch:H,throw:G,try:W,var:K,while:Q,with:X,null:Z,true:$,false:tt,new:Y,in:et,instanceof:{keyword:"instanceof",binop:7,beforeExpr:!0},this:J,typeof:{keyword:"typeof",prefix:!0,beforeExpr:!0},void:{keyword:"void",prefix:!0,beforeExpr:!0},delete:{keyword:"delete",prefix:!0,beforeExpr:!0}},nt={type:"[",beforeExpr:!0},st={type:"]"},rt={type:"{",beforeExpr:!0},ot={type:"}"},at={type:"(",beforeExpr:!0},lt={type:")"},ht={type:",",beforeExpr:!0},ut={type:";",beforeExpr:!0},ct={type:":",beforeExpr:!0},dt={type:"."},pt={type:"?",beforeExpr:!0},ft={binop:10,beforeExpr:!0},gt={isAssign:!0,beforeExpr:!0},mt={isAssign:!0,beforeExpr:!0},vt={postfix:!0,prefix:!0,isUpdate:!0},bt={prefix:!0,beforeExpr:!0},_t={binop:1,beforeExpr:!0},yt={binop:2,beforeExpr:!0},wt={binop:3,beforeExpr:!0},xt={binop:4,beforeExpr:!0},Ct={binop:5,beforeExpr:!0},St={binop:6,beforeExpr:!0},Pt={binop:7,beforeExpr:!0},kt={binop:8,beforeExpr:!0},Tt={binop:9,prefix:!0,beforeExpr:!0},At={binop:10,beforeExpr:!0};for(var It in t.tokTypes={bracketL:nt,bracketR:st,braceL:rt,braceR:ot,parenL:at,parenR:lt,comma:ht,semi:ut,colon:ct,dot:dt,question:pt,slash:ft,eq:gt,name:I,eof:E,num:k,regexp:T,string:A},it)t.tokTypes["_"+It]=it[It];function Et(t){t=t.split(" ");var e="",i=[];t:for(var n=0;n<t.length;++n){for(var s=0;s<i.length;++s)if(i[s][0].length==t[n].length){i[s].push(t[n]);continue t}i.push([t[n]])}function r(t){if(1==t.length)return e+="return str === "+JSON.stringify(t[0])+";";e+="switch(str){";for(var i=0;i<t.length;++i)e+="case "+JSON.stringify(t[i])+":";e+="return true}return false;"}if(i.length>3){for(i.sort((function(t,e){return e.length-t.length})),e+="switch(str.length){",n=0;n<i.length;++n){var o=i[n];e+="case "+o[0].length+":",r(o)}e+="}"}else r(t);return new Function("str",e)}var Mt,Dt=Et("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile"),Lt=Et("class enum extends super const export import"),Nt=Et("implements interface let package private protected public static yield"),Ot=Et("eval arguments"),Rt=Et("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this"),Ft=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/,Bt="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",Vt=new RegExp("["+Bt+"]"),jt=new RegExp("["+Bt+"̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿]"),zt=/[\n\r\u2028\u2029]/,Ut=/\r\n|[\n\r\u2028\u2029]/g,qt=t.isIdentifierStart=function(t){return t<65?36===t:t<91||(t<97?95===t:t<123||t>=170&&Vt.test(String.fromCharCode(t)))},Ht=t.isIdentifierChar=function(t){return t<48?36===t:t<58||!(t<65)&&(t<91||(t<97?95===t:t<123||t>=170&&jt.test(String.fromCharCode(t))))};function Gt(){this.line=g,this.column=a-m}function Wt(){g=1,a=m=0,f=!0,Yt()}function Kt(t,i){h=a,e.locations&&(c=new Gt),d=t,Yt(),p=i,f=t.beforeExpr}function Qt(){var t,n=e.onComment&&e.locations&&new Gt,s=a,r=i.indexOf("*/",a+=2);if(-1===r&&S(a-2,"Unterminated comment"),a=r+2,e.locations)for(Ut.lastIndex=s;(t=Ut.exec(i))&&t.index<a;)++g,m=t.index+t[0].length;e.onComment&&e.onComment(!0,i.slice(s+2,r),s,a,n,e.locations&&new Gt)}function Xt(){for(var t=a,s=e.onComment&&e.locations&&new Gt,r=i.charCodeAt(a+=2);a<n&&10!==r&&13!==r&&8232!==r&&8233!==r;)++a,r=i.charCodeAt(a);e.onComment&&e.onComment(!1,i.slice(t+2,a),t,a,s,e.locations&&new Gt)}function Yt(){for(;a<n;){var t=i.charCodeAt(a);if(32===t)++a;else if(13===t)++a,10===(s=i.charCodeAt(a))&&++a,e.locations&&(++g,m=a);else if(10===t||8232===t||8233===t)++a,e.locations&&(++g,m=a);else if(t>8&&t<14)++a;else if(47===t){var s;if(42===(s=i.charCodeAt(a+1)))Qt();else{if(47!==s)break;Xt()}}else if(160===t)++a;else{if(!(t>=5760&&Ft.test(String.fromCharCode(t))))break;++a}}}function Jt(t){if(t?a=l+1:l=a,e.locations&&(u=new Gt),t)return $t();if(a>=n)return Kt(E);var s=i.charCodeAt(a);if(qt(s)||92===s)return se();var r=function(t){switch(t){case 46:return function(){var t=i.charCodeAt(a+1);return t>=48&&t<=57?ee(!0):(++a,Kt(dt))}();case 40:return++a,Kt(at);case 41:return++a,Kt(lt);case 59:return++a,Kt(ut);case 44:return++a,Kt(ht);case 91:return++a,Kt(nt);case 93:return++a,Kt(st);case 123:return++a,Kt(rt);case 125:return++a,Kt(ot);case 58:return++a,Kt(ct);case 63:return++a,Kt(pt);case 48:var s=i.charCodeAt(a+1);if(120===s||88===s)return function(){a+=2;var t=te(16);return null==t&&S(l+2,"Expected hexadecimal number"),qt(i.charCodeAt(a))&&S(a,"Identifier directly after number"),Kt(k,t)}();case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return ee(!1);case 34:case 39:return function(t){a++;for(var s="";;){a>=n&&S(l,"Unterminated string constant");var r=i.charCodeAt(a);if(r===t)return++a,Kt(A,s);if(92===r){r=i.charCodeAt(++a);var o=/^[0-7]+/.exec(i.slice(a,a+3));for(o&&(o=o[0]);o&&parseInt(o,8)>255;)o=o.slice(0,-1);if("0"===o&&(o=null),++a,o)x&&S(a-2,"Octal literal in strict mode"),s+=String.fromCharCode(parseInt(o,8)),a+=o.length-1;else switch(r){case 110:s+="\n";break;case 114:s+="\r";break;case 120:s+=String.fromCharCode(ie(2));break;case 117:s+=String.fromCharCode(ie(4));break;case 85:s+=String.fromCharCode(ie(8));break;case 116:s+="\t";break;case 98:s+="\b";break;case 118:s+="\v";break;case 102:s+="\f";break;case 48:s+="\0";break;case 13:10===i.charCodeAt(a)&&++a;case 10:e.locations&&(m=a,++g);break;default:s+=String.fromCharCode(r)}}else 13!==r&&10!==r&&8232!==r&&8233!==r||S(l,"Unterminated string constant"),s+=String.fromCharCode(r),++a}}(t);case 47:return function(){var t=i.charCodeAt(a+1);return f?(++a,$t()):61===t?Zt(mt,2):Zt(ft,1)}();case 37:case 42:return 61===i.charCodeAt(a+1)?Zt(mt,2):Zt(At,1);case 124:case 38:return function(t){var e=i.charCodeAt(a+1);return e===t?Zt(124===t?_t:yt,2):61===e?Zt(mt,2):Zt(124===t?wt:Ct,1)}(t);case 94:return 61===i.charCodeAt(a+1)?Zt(mt,2):Zt(xt,1);case 43:case 45:return function(t){var e=i.charCodeAt(a+1);return e===t?45==e&&62==i.charCodeAt(a+2)&&zt.test(i.slice(b,a))?(a+=3,Xt(),Yt(),Jt()):Zt(vt,2):61===e?Zt(mt,2):Zt(Tt,1)}(t);case 60:case 62:return function(t){var e=i.charCodeAt(a+1),n=1;return e===t?(n=62===t&&62===i.charCodeAt(a+2)?3:2,61===i.charCodeAt(a+n)?Zt(mt,n+1):Zt(kt,n)):33==e&&60==t&&45==i.charCodeAt(a+2)&&45==i.charCodeAt(a+3)?(a+=4,Xt(),Yt(),Jt()):(61===e&&(n=61===i.charCodeAt(a+2)?3:2),Zt(Pt,n))}(t);case 61:case 33:return function(t){return 61===i.charCodeAt(a+1)?Zt(St,61===i.charCodeAt(a+2)?3:2):Zt(61===t?gt:bt,1)}(t);case 126:return Zt(bt,1)}return!1}(s);if(!1===r){var o=String.fromCharCode(s);if("\\"===o||Vt.test(o))return se();S(a,"Unexpected character '"+o+"'")}return r}function Zt(t,e){var n=i.slice(a,a+e);a+=e,Kt(t,n)}function $t(){for(var t,e,s=a;;){a>=n&&S(s,"Unterminated regular expression");var r=i.charAt(a);if(zt.test(r)&&S(s,"Unterminated regular expression"),t)t=!1;else{if("["===r)e=!0;else if("]"===r&&e)e=!1;else if("/"===r&&!e)break;t="\\"===r}++a}var o=i.slice(s,a);++a;var l=ne();l&&!/^[gmsiy]*$/.test(l)&&S(s,"Invalid regexp flag");try{var h=new RegExp(o,l)}catch(t){t instanceof SyntaxError&&S(s,t.message),S(t)}return Kt(T,h)}function te(t,e){for(var n=a,s=0,r=0,o=null==e?1/0:e;r<o;++r){var l,h=i.charCodeAt(a);if((l=h>=97?h-97+10:h>=65?h-65+10:h>=48&&h<=57?h-48:1/0)>=t)break;++a,s=s*t+l}return a===n||null!=e&&a-n!==e?null:s}function ee(t){var e=a,n=!1,s=48===i.charCodeAt(a);t||null!==te(10)||S(e,"Invalid number"),46===i.charCodeAt(a)&&(++a,te(10),n=!0);var r=i.charCodeAt(a);69!==r&&101!==r||(43!==(r=i.charCodeAt(++a))&&45!==r||++a,null===te(10)&&S(e,"Invalid number"),n=!0),qt(i.charCodeAt(a))&&S(a,"Identifier directly after number");var o,l=i.slice(e,a);return n?o=parseFloat(l):s&&1!==l.length?/[89]/.test(l)||x?S(e,"Invalid number"):o=parseInt(l,8):o=parseInt(l,10),Kt(k,o)}function ie(t){var e=te(16,t);return null===e&&S(l,"Bad character escape sequence"),e}function ne(){Mt=!1;for(var t,e=!0,n=a;;){var s=i.charCodeAt(a);if(Ht(s))Mt&&(t+=i.charAt(a)),++a;else{if(92!==s)break;Mt||(t=i.slice(n,a)),Mt=!0,117!=i.charCodeAt(++a)&&S(a,"Expecting Unicode escape sequence \\uXXXX"),++a;var r=ie(4),o=String.fromCharCode(r);o||S(a-1,"Invalid Unicode escape"),(e?qt(r):Ht(r))||S(a-4,"Invalid Unicode escape"),t+=o}e=!1}return Mt?t:i.slice(n,a)}function se(){var t=ne(),e=I;return!Mt&&Rt(t)&&(e=it[t]),Kt(e,t)}function re(){v=l,b=h,_=c,Jt()}function oe(t){if(x=t,a=l,e.locations)for(;a<m;)m=i.lastIndexOf("\n",m-2)+1,--g;Yt(),Jt()}function ae(){this.type=null,this.start=l,this.end=null}function le(){this.start=u,this.end=null,null!==s&&(this.source=s)}function he(){var t=new ae;return e.locations&&(t.loc=new le),e.directSourceFile&&(t.sourceFile=e.directSourceFile),e.ranges&&(t.range=[l,0]),t}function ue(t){var i=new ae;return i.start=t.start,e.locations&&(i.loc=new le,i.loc.start=t.loc.start),e.ranges&&(i.range=[t.range[0],0]),i}function ce(t,i){return t.type=i,t.end=b,e.locations&&(t.loc.end=_),e.ranges&&(t.range[1]=b),t}function de(t){return e.ecmaVersion>=5&&"ExpressionStatement"===t.type&&"Literal"===t.expression.type&&"use strict"===t.expression.value}function pe(t){if(d===t)return re(),!0}function fe(){return!e.strictSemicolons&&(d===E||d===ot||zt.test(i.slice(b,l)))}function ge(){pe(ut)||fe()||ve()}function me(t){d===t?re():ve()}function ve(){S(l,"Unexpected token")}function be(t){"Identifier"!==t.type&&"MemberExpression"!==t.type&&S(t.start,"Assigning to rvalue"),x&&"Identifier"===t.type&&Ot(t.name)&&S(t.start,"Assigning to "+t.name+" in strict mode")}var _e={kind:"loop"},ye={kind:"switch"};function we(){(d===ft||d===mt&&"/="==p)&&Jt(!0);var t=d,n=he();switch(t){case M:case N:re();var s=t===M;pe(ut)||fe()?n.label=null:d!==I?ve():(n.label=Re(),ge());for(var r=0;r<w.length;++r){var o=w[r];if(null==n.label||o.name===n.label.name){if(null!=o.kind&&(s||"loop"===o.kind))break;if(n.label&&s)break}}return r===w.length&&S(n.start,"Unsyntactic "+t.keyword),ce(n,s?"BreakStatement":"ContinueStatement");case O:return re(),ge(),ce(n,"DebuggerStatement");case F:return re(),w.push(_e),n.body=we(),w.pop(),me(Q),n.test=xe(),ge(),ce(n,"DoWhileStatement");case j:if(re(),w.push(_e),me(at),d===ut)return Se(n,null);if(d===K){var a=he();return re(),ke(a,!0),ce(a,"VariableDeclaration"),1===a.declarations.length&&pe(et)?Pe(n,a):Se(n,a)}return a=Te(!1,!0),pe(et)?(be(a),Pe(n,a)):Se(n,a);case z:return re(),Ne(n,!0);case U:return re(),n.test=xe(),n.consequent=we(),n.alternate=pe(B)?we():null,ce(n,"IfStatement");case q:return y||e.allowReturnOutsideFunction||S(l,"'return' outside of function"),re(),pe(ut)||fe()?n.argument=null:(n.argument=Te(),ge()),ce(n,"ReturnStatement");case H:re(),n.discriminant=xe(),n.cases=[],me(rt),w.push(ye);for(var h,u;d!=ot;)if(d===D||d===R){var c=d===D;h&&ce(h,"SwitchCase"),n.cases.push(h=he()),h.consequent=[],re(),c?h.test=Te():(u&&S(v,"Multiple default clauses"),u=!0,h.test=null),me(ct)}else h||ve(),h.consequent.push(we());return h&&ce(h,"SwitchCase"),re(),w.pop(),ce(n,"SwitchStatement");case G:return re(),zt.test(i.slice(b,l))&&S(b,"Illegal newline after throw"),n.argument=Te(),ge(),ce(n,"ThrowStatement");case W:if(re(),n.block=Ce(),n.handler=null,d===L){var f=he();re(),me(at),f.param=Re(),x&&Ot(f.param.name)&&S(f.param.start,"Binding "+f.param.name+" in strict mode"),me(lt),f.guard=null,f.body=Ce(),n.handler=ce(f,"CatchClause")}return n.guardedHandlers=P,n.finalizer=pe(V)?Ce():null,n.handler||n.finalizer||S(n.start,"Missing catch or finally clause"),ce(n,"TryStatement");case K:return re(),ke(n),ge(),ce(n,"VariableDeclaration");case Q:return re(),n.test=xe(),w.push(_e),n.body=we(),w.pop(),ce(n,"WhileStatement");case X:return x&&S(l,"'with' in strict mode"),re(),n.object=xe(),n.body=we(),ce(n,"WithStatement");case rt:return Ce();case ut:return re(),ce(n,"EmptyStatement");default:var g=p,m=Te();if(t===I&&"Identifier"===m.type&&pe(ct)){for(r=0;r<w.length;++r)w[r].name===g&&S(m.start,"Label '"+g+"' is already declared");var _=d.isLoop?"loop":d===H?"switch":null;return w.push({name:g,kind:_}),n.body=we(),w.pop(),n.label=m,ce(n,"LabeledStatement")}return n.expression=m,ge(),ce(n,"ExpressionStatement")}}function xe(){me(at);var t=Te();return me(lt),t}function Ce(t){var e,i=he(),n=!0,s=!1;for(i.body=[],me(rt);!pe(ot);){var r=we();i.body.push(r),n&&t&&de(r)&&(e=s,oe(s=!0)),n=!1}return s&&!e&&oe(!1),ce(i,"BlockStatement")}function Se(t,e){return t.init=e,me(ut),t.test=d===ut?null:Te(),me(ut),t.update=d===lt?null:Te(),me(lt),t.body=we(),w.pop(),ce(t,"ForStatement")}function Pe(t,e){return t.left=e,t.right=Te(),me(lt),t.body=we(),w.pop(),ce(t,"ForInStatement")}function ke(t,e){for(t.declarations=[],t.kind="var";;){var i=he();if(i.id=Re(),x&&Ot(i.id.name)&&S(i.id.start,"Binding "+i.id.name+" in strict mode"),i.init=pe(gt)?Te(!0,e):null,t.declarations.push(ce(i,"VariableDeclarator")),!pe(ht))break}return t}function Te(t,e){var i=Ae(e);if(!t&&d===ht){var n=ue(i);for(n.expressions=[i];pe(ht);)n.expressions.push(Ae(e));return ce(n,"SequenceExpression")}return i}function Ae(t){var e=function(t){var e=function(t){return Ie(Ee(),-1,t)}(t);if(pe(pt)){var i=ue(e);return i.test=e,i.consequent=Te(!0),me(ct),i.alternate=Te(!0,t),ce(i,"ConditionalExpression")}return e}(t);if(d.isAssign){var i=ue(e);return i.operator=p,i.left=e,re(),i.right=Ae(t),be(e),ce(i,"AssignmentExpression")}return e}function Ie(t,e,i){var n=d.binop;if(null!=n&&(!i||d!==et)&&n>e){var s=ue(t);s.left=t,s.operator=p;var r=d;return re(),s.right=Ie(Ee(),n,i),Ie(ce(s,r===_t||r===yt?"LogicalExpression":"BinaryExpression"),e,i)}return t}function Ee(){if(d.prefix){var t=he(),e=d.isUpdate;return t.operator=p,t.prefix=!0,f=!0,re(),t.argument=Ee(),e?be(t.argument):x&&"delete"===t.operator&&"Identifier"===t.argument.type&&S(t.start,"Deleting local variable in strict mode"),ce(t,e?"UpdateExpression":"UnaryExpression")}for(var i=Me(De());d.postfix&&!fe();)(t=ue(i)).operator=p,t.prefix=!1,t.argument=i,be(i),re(),i=ce(t,"UpdateExpression");return i}function Me(t,e){var i;return pe(dt)?((i=ue(t)).object=t,i.property=Re(!0),i.computed=!1,Me(ce(i,"MemberExpression"),e)):pe(nt)?((i=ue(t)).object=t,i.property=Te(),i.computed=!0,me(st),Me(ce(i,"MemberExpression"),e)):!e&&pe(at)?((i=ue(t)).callee=t,i.arguments=Oe(lt,!1),Me(ce(i,"CallExpression"),e)):t}function De(){switch(d){case J:var t=he();return re(),ce(t,"ThisExpression");case I:return Re();case k:case A:case T:return(t=he()).value=p,t.raw=i.slice(l,h),re(),ce(t,"Literal");case Z:case $:case tt:return(t=he()).value=d.atomValue,t.raw=d.keyword,re(),ce(t,"Literal");case at:var n=u,s=l;re();var r=Te();return r.start=s,r.end=h,e.locations&&(r.loc.start=n,r.loc.end=c),e.ranges&&(r.range=[s,h]),me(lt),r;case nt:return t=he(),re(),t.elements=Oe(st,!0,!0),ce(t,"ArrayExpression");case rt:return function(){var t=he(),i=!0,n=!1;for(t.properties=[],re();!pe(ot);){if(i)i=!1;else if(me(ht),e.allowTrailingCommas&&pe(ot))break;var s,r={key:Le()},o=!1;if(pe(ct)?(r.value=Te(!0),s=r.kind="init"):e.ecmaVersion>=5&&"Identifier"===r.key.type&&("get"===r.key.name||"set"===r.key.name)?(o=n=!0,s=r.kind=r.key.name,r.key=Le(),d!==at&&ve(),r.value=Ne(he(),!1)):ve(),"Identifier"===r.key.type&&(x||n))for(var a=0;a<t.properties.length;++a){var l=t.properties[a];if(l.key.name===r.key.name){var h=s==l.kind||o&&"init"===l.kind||"init"===s&&("get"===l.kind||"set"===l.kind);h&&!x&&"init"===s&&"init"===l.kind&&(h=!1),h&&S(r.key.start,"Redefinition of property")}}t.properties.push(r)}return ce(t,"ObjectExpression")}();case z:return t=he(),re(),Ne(t,!1);case Y:return function(){var t=he();return re(),t.callee=Me(De(),!0),pe(at)?t.arguments=Oe(lt,!1):t.arguments=P,ce(t,"NewExpression")}();default:ve()}}function Le(){return d===k||d===A?De():Re(!0)}function Ne(t,e){d===I?t.id=Re():e?ve():t.id=null,t.params=[];var i=!0;for(me(at);!pe(lt);)i?i=!1:me(ht),t.params.push(Re());var n=y,s=w;if(y=!0,w=[],t.body=Ce(!0),y=n,w=s,x||t.body.body.length&&de(t.body.body[0]))for(var r=t.id?-1:0;r<t.params.length;++r){var o=r<0?t.id:t.params[r];if((Nt(o.name)||Ot(o.name))&&S(o.start,"Defining '"+o.name+"' in strict mode"),r>=0)for(var a=0;a<r;++a)o.name===t.params[a].name&&S(o.start,"Argument name clash in strict mode")}return ce(t,e?"FunctionDeclaration":"FunctionExpression")}function Oe(t,i,n){for(var s=[],r=!0;!pe(t);){if(r)r=!1;else if(me(ht),i&&e.allowTrailingCommas&&pe(t))break;n&&d===ht?s.push(null):s.push(Te(!0))}return s}function Re(t){var n=he();return t&&"everywhere"==e.forbidReserved&&(t=!1),d===I?(!t&&(e.forbidReserved&&(3===e.ecmaVersion?Dt:Lt)(p)||x&&Nt(p))&&-1==i.slice(l,h).indexOf("\\")&&S(l,"The keyword '"+p+"' is reserved"),n.name=p):t&&d.keyword?n.name=d.keyword:ve(),f=!1,re(),ce(n,"Identifier")}},"object"==typeof t&&"object"==typeof e?c(t):(n=[t],(r="function"==typeof(s=c)?s.apply(t,n):s)===a||(e.exports=r)),f.version||(f=null));var m={"+":"__add","-":"__subtract","*":"__multiply","/":"__divide","%":"__modulo","==":"__equals","!=":"__equals"},v={"-":"__negate","+":"__self"},_=u.each(["add","subtract","multiply","divide","modulo","equals","negate"],(function(t){this["__"+t]="#"+t}),{__self:function(){return this}});function w(t,e,i){var n=m[e];if(t&&t[n]){var s=t[n](i);return"!="===e?!s:s}switch(e){case"+":return t+i;case"-":return t-i;case"*":return t*i;case"/":return t/i;case"%":return t%i;case"==":return t==i;case"!=":return t!=i}}function x(t,e){var i=v[t];if(e&&e[i])return e[i]();switch(t){case"+":return+e;case"-":return-e}}function C(t,e){if(!t)return"";var i=[];function n(t){for(var e=0,n=i.length;e<n;e++){var s=i[e];if(s[0]>=t)break;t+=s[1]}return t}function s(e){return t.substring(n(e.range[0]),n(e.range[1]))}function r(e,s){for(var r=n(e.range[0]),o=n(e.range[1]),a=0,l=i.length-1;l>=0;l--)if(r>i[l][0]){a=l+1;break}i.splice(a,0,[r,s.length-o+r]),t=t.substring(0,r)+s+t.substring(o)}var a,u=(e=e||{}).url||"",c=e.sourceMaps,d=e.paperFeatures||{},p=e.source||t,f=e.offset||0,b=dt.agent,_=b.versionNumber,y=!1,w=/\r\n|\n|\r/gm;if(c&&(b.chrome&&_>=30||b.webkit&&_>=537.76||b.firefox&&_>=23||b.node)){if(b.node)f-=2;else if(l&&u&&!l.location.href.indexOf(u)){var x=h.getElementsByTagName("html")[0].innerHTML;f=x.substr(0,x.indexOf(t)+1).match(w).length+1}var C=["AA"+function(t){var e="";for(t=(Math.abs(t)<<1)+(t<0?1:0);t||!e;){var i=31&t;(t>>=5)&&(i|=32),e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[i]}return e}((y=f>0&&!(b.chrome&&_>=36||b.safari&&_>=600||b.firefox&&_>=40||b.node))?0:f)+"A"];C.length=(t.match(w)||[]).length+1+(y?f:0),a={version:3,file:u,names:[],mappings:C.join(";AACA"),sourceRoot:"",sources:[u],sourcesContent:[p]}}return!1===d.operatorOverloading&&!1===d.moduleExports||function e(i,o,a){if(i){for(var l in i)if("range"!==l&&"loc"!==l){var h=i[l];if(Array.isArray(h))for(var u=0,c=h.length;u<c;u++)e(h[u],i,a);else h&&"object"==typeof h&&e(h,i,a)}!1!==a.operatorOverloading&&function(e,i){switch(e.type){case"UnaryExpression":if(e.operator in v&&"Literal"!==e.argument.type){var o=s(e.argument);r(e,'$__("'+e.operator+'", '+o+")")}break;case"BinaryExpression":if(e.operator in m&&"Literal"!==e.left.type){var a=s(e.left),l=s(e.right),h=function(e,i){return t.substring(n(e.range[1]),n(i.range[0]))}(e.left,e.right),u=e.operator;r(e,"__$__("+a+","+h.replace(new RegExp("\\"+u),'"'+u+'"')+", "+l+")")}break;case"UpdateExpression":case"AssignmentExpression":var c=i&&i.type;if(!("ForStatement"===c||"BinaryExpression"===c&&/^[=!<>]/.test(i.operator)||"MemberExpression"===c&&i.computed))if("UpdateExpression"===e.type){var d=(o=s(e.argument))+" = "+(p="__$__("+o+', "'+e.operator[0]+'", 1)');e.prefix?d="("+d+")":"AssignmentExpression"!==c&&"VariableDeclarator"!==c&&"BinaryExpression"!==c||(s(i.left||i.id)===o&&(d=p),d=o+"; "+d),r(e,d)}else if(/^.=$/.test(e.operator)&&"Literal"!==e.left.type){a=s(e.left),l=s(e.right);var p=a+" = __$__("+a+', "'+e.operator[0]+'", '+l+")";r(e,/^\(.*\)$/.test(s(e))?"("+p+")":p)}}}(i,o),!1!==a.moduleExports&&function(t){switch(t.type){case"ExportDefaultDeclaration":r({range:[t.start,t.declaration.start]},"module.exports = ");break;case"ExportNamedDeclaration":var e=t.declaration,i=t.specifiers;if(e){var n=e.declarations;n&&(n.forEach((function(t){r(t,"module.exports."+s(t))})),r({range:[t.start,e.start+e.kind.length]},""))}else if(i){var o=i.map((function(t){var e=s(t);return"module.exports."+e+" = "+e+"; "})).join("");o&&r(t,o)}}}(i)}}(g(t,{ranges:!0,preserveParens:!0,sourceType:"module"}),null,d),a&&(y&&(t=new Array(f+1).join("\n")+t),/^(inline|both)$/.test(c)&&(t+="\n//# sourceMappingURL=data:application/json;base64,"+o.btoa(unescape(encodeURIComponent(JSON.stringify(a))))),t+="\n//# sourceURL="+(u||"paperscript")),{url:u,source:p,code:t,map:a}}function S(t,e,i){dt=e;var n,s=e.getView(),r=/\btool\.\w+|\s+on(?:Key|Mouse)(?:Up|Down|Move|Drag)\b/.test(t)&&!/\bnew\s+Tool\b/.test(t)?new rt:null,o=r?r._events:[],a=["onFrame","onResize"].concat(o),l=[],c=[],d="object"==typeof t?t:C(t,i);function p(e,i){for(var n in e)!i&&/^_/.test(n)||!new RegExp("([\\b\\s\\W]|^)"+n.replace(/\$/g,"\\$")+"\\b").test(t)||(l.push(n),c.push(e[n]))}t=d.code,p({__$__:w,$__:x,paper:e,tool:r},!0),p(e),t="var module = { exports: {} }; "+t,(v=u.each(a,(function(e){new RegExp("\\s+"+e+"\\b").test(t)&&(l.push(e),this.push("module.exports."+e+" = "+e+";"))}),[]).join("\n"))&&(t+="\n"+v),t+="\nreturn module.exports;";var f=dt.agent;if(h&&(f.chrome||f.firefox&&f.versionNumber<40)){var g=h.createElement("script"),m=h.head||h.getElementsByTagName("head")[0];f.firefox&&(t="\n"+t),g.appendChild(h.createTextNode("document.__paperscript__ = function("+l+") {"+t+"\n}")),m.appendChild(g),n=h.__paperscript__,delete h.__paperscript__,m.removeChild(g)}else n=Function(l,t);var v,_=(v=n&&n.apply(e,c))||{};return u.each(o,(function(t){var e=_[t];e&&(r[t]=e)})),s&&(_.onResize&&s.setOnResize(_.onResize),s.emit("resize",{size:s.size,delta:new b}),_.onFrame&&s.setOnFrame(_.onFrame),s.requestUpdate()),v}function P(t){if(/^text\/(?:x-|)paperscript$/.test(t.type)&&"true"!==d.getAttribute(t,"ignore")){var e=d.getAttribute(t,"canvas"),i=h.getElementById(e),n=t.src||t.getAttribute("data-src"),s=d.hasAttribute(t,"async"),r="data-paper-scope";if(!i)throw new Error('Unable to find canvas with id "'+e+'"');var o=d.get(i.getAttribute(r))||(new d).setup(i);return i.setAttribute(r,o._id),n?at({url:n,async:s,mimeType:"text/plain",onLoad:function(t){S(t,o,n)}}):S(t.innerHTML,o,t.baseURI),t.setAttribute("data-paper-ignore","true"),o}}function k(){u.each(h&&h.getElementsByTagName("script"),P)}return b.inject(_),y.inject(_),W.inject(_),l&&("complete"===h.readyState?setTimeout(k):J.add(l,{load:k})),{compile:C,execute:S,load:function(t){return t?P(t):k()},parse:g,calculateBinary:w,calculateUnary:x}}.call(this);var dt=new(d.inject(u.exports,{Base:u,Numerical:m,Key:it,DomEvent:J,DomElement:Y,document:h,window:l,Symbol:L,PlacedSymbol:D}));return dt.agent.node&&i(858)(dt),(r="function"==typeof(s=dt)?s.call(e,i,e,t):s)===a||(t.exports=r),dt}).call(this,"object"==typeof self?self:null)},884:function(t){!function(t){if(!t.numeric){var e={dim:function(t){var i;return"object"==typeof t?"object"==typeof(i=t[0])?"object"==typeof i[0]?e._dim(t):[t.length,i.length]:[t.length]:[]},_foreach2:function t(e,i,n,s){if(n===i.length-1)return s(e);var r,o=i[n],a=Array(o);for(r=o-1;r>=0;r--)a[r]=t(e[r],i,n+1,s);return a},cloneV:function(t){var e,i=t.length,n=Array(i);for(e=i-1;-1!==e;--e)n[e]=t[e];return n},clone:function(t){if("object"!=typeof t)return t;var i=e.cloneV,n=e.dim(t);return e._foreach2(t,n,0,i)},diag:function(t){var e,i,n,s,r=t.length,o=Array(r);for(e=r-1;e>=0;e--){for(s=Array(r),i=e+2,n=r-1;n>=i;n-=2)s[n]=0,s[n-1]=0;for(n>e&&(s[n]=0),s[e]=t[e],n=e-1;n>=1;n-=2)s[n]=0,s[n-1]=0;0===n&&(s[0]=0),o[e]=s}return o},rep:function(t,i,n){void 0===n&&(n=0);var s,r=t[n],o=Array(r);if(n===t.length-1){for(s=r-2;s>=0;s-=2)o[s+1]=i,o[s]=i;return-1===s&&(o[0]=i),o}for(s=r-1;s>=0;s--)o[s]=e.rep(t,i,n+1);return o},identity:function(t){return e.diag(e.rep([t],1))},inv:function(t){var i,n,s,r,o,a,l,h,u=e.dim(t),c=Math.abs,d=u[0],p=u[1],f=e.clone(t),g=e.identity(d);for(a=0;a<p;++a){var m=-1,v=-1;for(o=a;o!==d;++o)(l=c(f[o][a]))>v&&(m=o,v=l);for(n=f[m],f[m]=f[a],f[a]=n,r=g[m],g[m]=g[a],g[a]=r,h=n[a],l=a;l!==p;++l)n[l]/=h;for(l=p-1;-1!==l;--l)r[l]/=h;for(o=d-1;-1!==o;--o)if(o!==a){for(i=f[o],s=g[o],h=i[a],l=a+1;l!==p;++l)i[l]-=n[l]*h;for(l=p-1;l>0;--l)s[l]-=r[l]*h,s[--l]-=r[l]*h;0===l&&(s[0]-=r[0]*h)}}return g},dotMMsmall:function(t,e){var i,n,s,r,o,a,l,h,u,c,d;for(r=t.length,o=e.length,a=e[0].length,l=Array(r),i=r-1;i>=0;i--){for(h=Array(a),u=t[i],s=a-1;s>=0;s--){for(c=u[o-1]*e[o-1][s],n=o-2;n>=1;n-=2)d=n-1,c+=u[n]*e[n][s]+u[d]*e[d][s];0===n&&(c+=u[0]*e[0][s]),h[s]=c}l[i]=h}return l},dotMV:function(t,i){var n,s=t.length,r=Array(s),o=e.dotVV;for(n=s-1;n>=0;n--)r[n]=o(t[n],i);return r},dotVV:function(t,e){var i,n,s=t.length,r=t[s-1]*e[s-1];for(i=s-2;i>=1;i-=2)n=i-1,r+=t[i]*e[i]+t[n]*e[n];return 0===i&&(r+=t[0]*e[0]),r},transpose:function(t){var e,i,n,s,r,o=t.length,a=t[0].length,l=Array(a);for(i=0;i<a;i++)l[i]=Array(o);for(e=o-1;e>=1;e-=2){for(s=t[e],n=t[e-1],i=a-1;i>=1;--i)(r=l[i])[e]=s[i],r[e-1]=n[i],(r=l[--i])[e]=s[i],r[e-1]=n[i];0===i&&((r=l[0])[e]=s[0],r[e-1]=n[0])}if(0===e){for(n=t[0],i=a-1;i>=1;--i)l[i][0]=n[i],l[--i][0]=n[i];0===i&&(l[0][0]=n[0])}return l}};this.numeric=e,t.numeric=e}}(this),t.exports=function(){"use strict";function t(t,e,i){if(i){var n=e;e=t,t=n}var s,r,o=[[t[0],t[1],1,0,0,0,-1*e[0]*t[0],-1*e[0]*t[1]],[0,0,0,t[0],t[1],1,-1*e[1]*t[0],-1*e[1]*t[1]],[t[2],t[3],1,0,0,0,-1*e[2]*t[2],-1*e[2]*t[3]],[0,0,0,t[2],t[3],1,-1*e[3]*t[2],-1*e[3]*t[3]],[t[4],t[5],1,0,0,0,-1*e[4]*t[4],-1*e[4]*t[5]],[0,0,0,t[4],t[5],1,-1*e[5]*t[4],-1*e[5]*t[5]],[t[6],t[7],1,0,0,0,-1*e[6]*t[6],-1*e[6]*t[7]],[0,0,0,t[6],t[7],1,-1*e[7]*t[6],-1*e[7]*t[7]]],a=e;try{s=numeric.inv(numeric.dotMMsmall(numeric.transpose(o),o))}catch(t){return console.log(t),[1,0,0,0,1,0,0,0]}for(var l=numeric.dotMMsmall(s,numeric.transpose(o)),h=numeric.dotMV(l,a),u=0;u<h.length;u++)h[u]=(r=h[u],Math.round(1e10*r)/1e10);return h[8]=1,h}function e(i,n){return"undefined"!=typeof window&&window===this||void 0===this?new e(i,n):(this.srcPts=i,this.dstPts=n,this.coeffs=t(this.srcPts,this.dstPts,!1),this.coeffsInv=t(this.srcPts,this.dstPts,!0),this)}return e.prototype={transform:function(t,e){var i=[];return i[0]=(this.coeffs[0]*t+this.coeffs[1]*e+this.coeffs[2])/(this.coeffs[6]*t+this.coeffs[7]*e+1),i[1]=(this.coeffs[3]*t+this.coeffs[4]*e+this.coeffs[5])/(this.coeffs[6]*t+this.coeffs[7]*e+1),i},transformInverse:function(t,e){var i=[];return i[0]=(this.coeffsInv[0]*t+this.coeffsInv[1]*e+this.coeffsInv[2])/(this.coeffsInv[6]*t+this.coeffsInv[7]*e+1),i[1]=(this.coeffsInv[3]*t+this.coeffsInv[4]*e+this.coeffsInv[5])/(this.coeffsInv[6]*t+this.coeffsInv[7]*e+1),i}},e}()},86:function(t){t.exports=function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/",i(i.s=0)}([function(t,e,i){t.exports=i(1)},function(t,e,i){"use strict";function n(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}function s(t){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}i.r(e);var o,a,l,h=function(){function t(e){var i=e.getOptions,n=e.getCaretPosition,s=e.getCaretPositionEnd,r=e.dispatch;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.getOptions=i,this.getCaretPosition=n,this.getCaretPositionEnd=s,this.dispatch=r,t.bindMethods(t,this)}var e,i,o;return e=t,o=[{key:"bindMethods",value:function(t,e){var i,s=function(t,e){var i;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(i=function(t,e){if(t){if("string"==typeof t)return n(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?n(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var s=0,r=function(){};return{s:r,n:function(){return s>=t.length?{done:!0}:{done:!1,value:t[s++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,l=!1;return{s:function(){i=t[Symbol.iterator]()},n:function(){var t=i.next();return a=t.done,t},e:function(t){l=!0,o=t},f:function(){try{a||null==i.return||i.return()}finally{if(l)throw o}}}}(Object.getOwnPropertyNames(t.prototype));try{for(s.s();!(i=s.n()).done;){var r=i.value;"constructor"===r||"bindMethods"===r||(e[r]=e[r].bind(e))}}catch(t){s.e(t)}finally{s.f()}}}],(i=[{key:"getButtonClass",value:function(t){var e=t.includes("{")&&t.includes("}")&&"{//}"!==t?"functionBtn":"standardBtn",i=t.replace("{","").replace("}",""),n="";return"standardBtn"!==e&&(n=" hg-button-".concat(i)),"hg-".concat(e).concat(n)}},{key:"getDefaultDiplay",value:function(){return{"{bksp}":"backspace","{backspace}":"backspace","{enter}":"< enter","{shift}":"shift","{shiftleft}":"shift","{shiftright}":"shift","{alt}":"alt","{s}":"shift","{tab}":"tab","{lock}":"caps","{capslock}":"caps","{accept}":"Submit","{space}":" ","{//}":" ","{esc}":"esc","{escape}":"esc","{f1}":"f1","{f2}":"f2","{f3}":"f3","{f4}":"f4","{f5}":"f5","{f6}":"f6","{f7}":"f7","{f8}":"f8","{f9}":"f9","{f10}":"f10","{f11}":"f11","{f12}":"f12","{numpaddivide}":"/","{numlock}":"lock","{arrowup}":"↑","{arrowleft}":"←","{arrowdown}":"↓","{arrowright}":"→","{prtscr}":"print","{scrolllock}":"scroll","{pause}":"pause","{insert}":"ins","{home}":"home","{pageup}":"up","{delete}":"del","{end}":"end","{pagedown}":"down","{numpadmultiply}":"*","{numpadsubtract}":"-","{numpadadd}":"+","{numpadenter}":"enter","{period}":".","{numpaddecimal}":".","{numpad0}":"0","{numpad1}":"1","{numpad2}":"2","{numpad3}":"3","{numpad4}":"4","{numpad5}":"5","{numpad6}":"6","{numpad7}":"7","{numpad8}":"8","{numpad9}":"9"}}},{key:"getButtonDisplayName",value:function(t,e,i){return(e=i?Object.assign({},this.getDefaultDiplay(),e):e||this.getDefaultDiplay())[t]||t}},{key:"getUpdatedInput",value:function(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:i,s=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=this.getOptions(),o=[i,n,s],a=e;return("{bksp}"===t||"{backspace}"===t)&&a.length>0?a=this.removeAt.apply(this,[a].concat(o)):"{space}"===t?a=this.addStringAt.apply(this,[a," "].concat(o)):"{tab}"!==t||"boolean"==typeof r.tabCharOnTab&&!1===r.tabCharOnTab?"{enter}"!==t&&"{numpadenter}"!==t||!r.newLineOnEnter?t.includes("numpad")&&Number.isInteger(Number(t[t.length-2]))?a=this.addStringAt.apply(this,[a,t[t.length-2]].concat(o)):"{numpaddivide}"===t?a=this.addStringAt.apply(this,[a,"/"].concat(o)):"{numpadmultiply}"===t?a=this.addStringAt.apply(this,[a,"*"].concat(o)):"{numpadsubtract}"===t?a=this.addStringAt.apply(this,[a,"-"].concat(o)):"{numpadadd}"===t?a=this.addStringAt.apply(this,[a,"+"].concat(o)):"{numpaddecimal}"===t?a=this.addStringAt.apply(this,[a,"."].concat(o)):"{"===t||"}"===t?a=this.addStringAt.apply(this,[a,t].concat(o)):t.includes("{")||t.includes("}")||(a=this.addStringAt.apply(this,[a,t].concat(o))):a=this.addStringAt.apply(this,[a,"\n"].concat(o)):a=this.addStringAt.apply(this,[a,"\t"].concat(o)),a}},{key:"updateCaretPos",value:function(t,e){var i=this.updateCaretPosAction(t,e);this.dispatch((function(t){t.setCaretPosition(i)}))}},{key:"updateCaretPosAction",value:function(t,e){var i=this.getOptions(),n=this.getCaretPosition();return e?n>0&&(n-=t):n+=t,i.debug&&console.log("Caret at:",n,"(".concat(this.keyboardDOMClass,")")),n}},{key:"addStringAt",value:function(t,e){var i,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.length,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.length,r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];return n||0===n?(i=[t.slice(0,n),e,t.slice(s)].join(""),this.isMaxLengthReached()||r&&this.updateCaretPos(e.length)):i=t+e,i}},{key:"removeAt",value:function(t){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.length,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.length,s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(0===i&&0===n)return t;if(i===n){var r=/([\uD800-\uDBFF][\uDC00-\uDFFF])/g;i&&i>=0?t.substring(i-2,i).match(r)?(e=t.substr(0,i-2)+t.substr(i),s&&this.updateCaretPos(2,!0)):(e=t.substr(0,i-1)+t.substr(i),s&&this.updateCaretPos(1,!0)):t.slice(-2).match(r)?(e=t.slice(0,-2),s&&this.updateCaretPos(2,!0)):(e=t.slice(0,-1),s&&this.updateCaretPos(1,!0))}else e=t.slice(0,i)+t.slice(n),s&&this.dispatch((function(t){t.setCaretPosition(i)}));return e}},{key:"handleMaxLength",value:function(t,e){var i=this.getOptions(),n=i.maxLength,r=t[i.inputName],o=e.length-1>=n;if(e.length<=r.length)return!1;if(Number.isInteger(n))return i.debug&&console.log("maxLength (num) reached:",o),o?(this.maxLengthReached=!0,!0):(this.maxLengthReached=!1,!1);if("object"===s(n)){var a=e.length-1>=n[i.inputName];return i.debug&&console.log("maxLength (obj) reached:",a),a?(this.maxLengthReached=!0,!0):(this.maxLengthReached=!1,!1)}}},{key:"isMaxLengthReached",value:function(){return Boolean(this.maxLengthReached)}},{key:"isTouchDevice",value:function(){return"ontouchstart"in window||navigator.maxTouchPoints}},{key:"pointerEventsSupported",value:function(){return window.PointerEvent}},{key:"camelCase",value:function(t){return!!t&&t.toLowerCase().trim().split(/[.\-_\s]/g).reduce((function(t,e){return e.length?t+e[0].toUpperCase()+e.slice(1):t}))}}])&&r(e.prototype,i),o&&r(e,o),t}();l=function(){},(a="noop")in(o=h)?Object.defineProperty(o,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):o[a]=l;var u=h;function c(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var d=function(){function t(e){var i=e.dispatch,n=e.getOptions;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.dispatch=i,this.getOptions=n,u.bindMethods(t,this)}var e,i;return e=t,(i=[{key:"handleHighlightKeyDown",value:function(t){var e=this.getOptions(),i=this.getSimpleKeyboardLayoutKey(t);this.dispatch((function(t){var n=t.getButtonElement(i)||t.getButtonElement("{".concat(i,"}"));n&&(n.style.backgroundColor=e.physicalKeyboardHighlightBgColor||"#dadce4",n.style.color=e.physicalKeyboardHighlightTextColor||"black",e.physicalKeyboardHighlightPress&&(n.onpointerdown||n.onmousedown||n.ontouchstart||u.noop)())}))}},{key:"handleHighlightKeyUp",value:function(t){var e=this.getOptions(),i=this.getSimpleKeyboardLayoutKey(t);this.dispatch((function(t){var n=t.getButtonElement(i)||t.getButtonElement("{".concat(i,"}"));n&&n.removeAttribute&&(n.removeAttribute("style"),e.physicalKeyboardHighlightPress&&(n.onpointerup||n.onmouseup||n.ontouchend||u.noop)())}))}},{key:"getSimpleKeyboardLayoutKey",value:function(t){var e;return((e=t.code.includes("Numpad")||t.code.includes("Shift")||t.code.includes("Space")||t.code.includes("Backspace")||t.code.includes("Control")||t.code.includes("Alt")||t.code.includes("Meta")?t.code:t.key)&&e!==e.toUpperCase()||"F"===t.code[0]&&Number.isInteger(Number(t.code[1]))&&t.code.length<=3)&&(e=e?e.toLowerCase():e),e}}])&&c(e.prototype,i),t}();function p(t){return function(t){if(Array.isArray(t))return f(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return f(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?f(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}function g(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function m(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function v(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}var b=function(){function t(){var e=this;g(this,t),v(this,"handleParams",(function(t){var e,i,n;if("string"==typeof t[0])e=t[0].split(".").join(""),i=document.querySelector(".".concat(e)),n=t[1];else if(t[0]instanceof HTMLDivElement){if(!t[0].className)throw console.warn("Any DOM element passed as parameter must have a class."),new Error("KEYBOARD_DOM_CLASS_ERROR");e=t[0].className.split(" ")[0],i=t[0],n=t[1]}else e="simple-keyboard",i=document.querySelector(".".concat(e)),n=t[0];return{keyboardDOMClass:e,keyboardDOM:i,options:n}})),v(this,"getOptions",(function(){return e.options})),v(this,"getCaretPosition",(function(){return e.caretPosition})),v(this,"getCaretPositionEnd",(function(){return e.caretPositionEnd})),v(this,"registerModule",(function(t,i){e.modules[t]||(e.modules[t]={}),i(e.modules[t])})),v(this,"getKeyboardClassString",(function(){for(var t=arguments.length,i=new Array(t),n=0;n<t;n++)i[n]=arguments[n];return[e.keyboardDOMClass].concat(i).filter((function(t){return!!t})).join(" ")}));for(var i=arguments.length,n=new Array(i),s=0;s<i;s++)n[s]=arguments[s];var r=this.handleParams(n),o=r.keyboardDOMClass,a=r.keyboardDOM,l=r.options,h=void 0===l?{}:l;if(this.utilities=new u({getOptions:this.getOptions,getCaretPosition:this.getCaretPosition,getCaretPositionEnd:this.getCaretPositionEnd,dispatch:this.dispatch}),this.caretPosition=null,this.caretPositionEnd=null,this.keyboardDOM=a,this.options=h,this.options.layoutName=this.options.layoutName||"default",this.options.theme=this.options.theme||"hg-theme-default",this.options.inputName=this.options.inputName||"default",this.options.preventMouseDownDefault=this.options.preventMouseDownDefault||!1,this.keyboardPluginClasses="",u.bindMethods(t,this),this.input={},this.input[this.options.inputName]="",this.keyboardDOMClass=o,this.buttonElements={},window.SimpleKeyboardInstances||(window.SimpleKeyboardInstances={}),this.currentInstanceName=this.utilities.camelCase(this.keyboardDOMClass),window.SimpleKeyboardInstances[this.currentInstanceName]=this,this.allKeyboardInstances=window.SimpleKeyboardInstances,this.keyboardInstanceNames=Object.keys(window.SimpleKeyboardInstances),this.isFirstKeyboardInstance=this.keyboardInstanceNames[0]===this.currentInstanceName,this.physicalKeyboard=new d({dispatch:this.dispatch,getOptions:this.getOptions}),!this.keyboardDOM)throw console.warn('".'.concat(o,'" was not found in the DOM.')),new Error("KEYBOARD_DOM_ERROR");this.render(),this.modules={},this.loadModules()}var e,i;return e=t,(i=[{key:"setCaretPosition",value:function(t,e){this.caretPosition=t,this.caretPositionEnd=e||t}},{key:"handleButtonClicked",value:function(t){var e=this.options.debug;if("{//}"===t)return!1;"function"==typeof this.options.onKeyPress&&this.options.onKeyPress(t),this.input[this.options.inputName]||(this.input[this.options.inputName]="");var i=this.utilities.getUpdatedInput(t,this.input[this.options.inputName],this.caretPosition,this.caretPositionEnd);if(this.input[this.options.inputName]!==i&&(!this.options.inputPattern||this.options.inputPattern&&this.inputPatternIsValid(i))){if(this.options.maxLength&&this.utilities.handleMaxLength(this.input,i))return!1;this.input[this.options.inputName]=this.utilities.getUpdatedInput(t,this.input[this.options.inputName],this.caretPosition,this.caretPositionEnd,!0),e&&console.log("Input changed:",this.getAllInputs()),this.options.debug&&console.log("Caret at: ",this.getCaretPosition(),this.getCaretPositionEnd(),"(".concat(this.keyboardDOMClass,")")),this.options.syncInstanceInputs&&this.syncInstanceInputs(),"function"==typeof this.options.onChange&&this.options.onChange(this.getInput(this.options.inputName,!0)),"function"==typeof this.options.onChangeAll&&this.options.onChangeAll(this.getAllInputs())}e&&console.log("Key pressed:",t)}},{key:"handleButtonMouseDown",value:function(t,e){var i=this;e&&(this.options.preventMouseDownDefault&&e.preventDefault(),this.options.stopMouseDownPropagation&&e.stopPropagation(),e.target.classList.add(this.activeButtonClass)),this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),this.holdTimeout&&clearTimeout(this.holdTimeout),this.isMouseHold=!0,this.options.disableButtonHold||(this.holdTimeout=setTimeout((function(){(i.isMouseHold&&(!t.includes("{")&&!t.includes("}")||"{delete}"===t||"{backspace}"===t||"{bksp}"===t||"{space}"===t||"{tab}"===t)||"{arrowright}"===t||"{arrowleft}"===t||"{arrowup}"===t||"{arrowdown}"===t)&&(i.options.debug&&console.log("Button held:",t),i.handleButtonHold(t,e)),clearTimeout(i.holdTimeout)}),500))}},{key:"handleButtonMouseUp",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;i&&(this.options.preventMouseUpDefault&&i.preventDefault(),this.options.stopMouseUpPropagation&&i.stopPropagation()),this.recurseButtons((function(e){e.classList.remove(t.activeButtonClass)})),this.isMouseHold=!1,this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),e&&"function"==typeof this.options.onKeyReleased&&this.options.onKeyReleased(e)}},{key:"handleKeyboardContainerMouseDown",value:function(t){this.options.preventMouseDownDefault&&t.preventDefault()}},{key:"handleButtonHold",value:function(t){var e=this;this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),this.holdInteractionTimeout=setTimeout((function(){e.isMouseHold?(e.handleButtonClicked(t),e.handleButtonHold(t)):clearTimeout(e.holdInteractionTimeout)}),100)}},{key:"syncInstanceInputs",value:function(){var t=this;this.dispatch((function(e){e.replaceInput(t.input),e.setCaretPosition(t.caretPosition,t.caretPositionEnd)}))}},{key:"clearInput",value:function(t){t=t||this.options.inputName,this.input[t]="",this.setCaretPosition(0),this.options.syncInstanceInputs&&this.syncInstanceInputs()}},{key:"getInput",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t=t||this.options.inputName,this.options.syncInstanceInputs&&!e&&this.syncInstanceInputs(),this.options.rtl?"‫"+this.input[t].replace("‫","").replace("‬","")+"‬":this.input[t]}},{key:"getAllInputs",value:function(){var t=this,e={};return Object.keys(this.input).forEach((function(i){e[i]=t.getInput(i,!0)})),e}},{key:"setInput",value:function(t,e){e=e||this.options.inputName,this.input[e]=t,this.options.syncInstanceInputs&&this.syncInstanceInputs()}},{key:"replaceInput",value:function(t){this.input=t}},{key:"setOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=this.changedOptions(t);this.options=Object.assign(this.options,t),e.length&&(this.options.debug&&console.log("changedOptions",e),this.onSetOptions(t),this.render())}},{key:"changedOptions",value:function(t){var e=this;return Object.keys(t).filter((function(i){return JSON.stringify(t[i])!==JSON.stringify(e.options[i])}))}},{key:"onSetOptions",value:function(t){t.inputName&&(this.options.debug&&console.log("inputName changed. caretPosition reset."),this.setCaretPosition(null))}},{key:"clear",value:function(){this.keyboardDOM.innerHTML="",this.keyboardDOM.className=this.keyboardDOMClass,this.buttonElements={}}},{key:"dispatch",value:function(t){if(!window.SimpleKeyboardInstances)throw console.warn("SimpleKeyboardInstances is not defined. Dispatch cannot be called."),new Error("INSTANCES_VAR_ERROR");return Object.keys(window.SimpleKeyboardInstances).forEach((function(e){t(window.SimpleKeyboardInstances[e],e)}))}},{key:"addButtonTheme",value:function(t,e){var i=this;if(!e||!t)return!1;t.split(" ").forEach((function(n){e.split(" ").forEach((function(e){i.options.buttonTheme||(i.options.buttonTheme=[]);var s=!1;i.options.buttonTheme.map((function(t){if(t.class.split(" ").includes(e)){s=!0;var i=t.buttons.split(" ");i.includes(n)||(s=!0,i.push(n),t.buttons=i.join(" "))}return t})),s||i.options.buttonTheme.push({class:e,buttons:t})}))})),this.render()}},{key:"removeButtonTheme",value:function(t,e){var i=this;if(!t&&!e)return this.options.buttonTheme=[],this.render(),!1;t&&Array.isArray(this.options.buttonTheme)&&this.options.buttonTheme.length&&(t.split(" ").forEach((function(t){i.options.buttonTheme.map((function(n,s){if(e&&e.includes(n.class)||!e){var r=n.buttons.split(" ").filter((function(e){return e!==t}));r.length?n.buttons=r.join(" "):(i.options.buttonTheme.splice(s,1),n=null)}return n}))})),this.render())}},{key:"getButtonElement",value:function(t){var e,i=this.buttonElements[t];return i&&(e=i.length>1?i:i[0]),e}},{key:"inputPatternIsValid",value:function(t){var e,i=this.options.inputPattern;if((e=i instanceof RegExp?i:i[this.options.inputName])&&t){var n=e.test(t);return this.options.debug&&console.log('inputPattern ("'.concat(e,'"): ').concat(n?"passed":"did not pass!")),n}return!0}},{key:"setEventListeners",value:function(){!this.isFirstKeyboardInstance&&this.allKeyboardInstances||(this.options.debug&&console.log("Caret handling started (".concat(this.keyboardDOMClass,")")),document.addEventListener("keyup",this.handleKeyUp),document.addEventListener("keydown",this.handleKeyDown),document.addEventListener("mouseup",this.handleMouseUp),document.addEventListener("touchend",this.handleTouchEnd))}},{key:"handleKeyUp",value:function(t){this.caretEventHandler(t),this.options.physicalKeyboardHighlight&&this.physicalKeyboard.handleHighlightKeyUp(t)}},{key:"handleKeyDown",value:function(t){this.options.physicalKeyboardHighlight&&this.physicalKeyboard.handleHighlightKeyDown(t)}},{key:"handleMouseUp",value:function(t){this.caretEventHandler(t)}},{key:"handleTouchEnd",value:function(t){this.caretEventHandler(t)}},{key:"caretEventHandler",value:function(t){var e;t.target.tagName&&(e=t.target.tagName.toLowerCase()),this.dispatch((function(i){var n=t.target===i.keyboardDOM||t.target&&i.keyboardDOM.contains(t.target);i.isMouseHold&&(i.isMouseHold=!1),"textarea"!==e&&"input"!==e||i.options.disableCaretPositioning?!i.options.disableCaretPositioning&&n||i.setCaretPosition(null):(i.setCaretPosition(t.target.selectionStart,t.target.selectionEnd),i.options.debug&&console.log("Caret at: ",i.getCaretPosition(),i.getCaretPositionEnd(),t&&t.target.tagName.toLowerCase(),"(".concat(i.keyboardDOMClass,")")))}))}},{key:"recurseButtons",value:function(t){var e=this;t&&Object.keys(this.buttonElements).forEach((function(i){return e.buttonElements[i].forEach(t)}))}},{key:"destroy",value:function(){this.options.debug&&console.log("Destroying simple-keyboard instance: ".concat(this.currentInstanceName)),document.removeEventListener("keyup",this.handleKeyUp),document.removeEventListener("keydown",this.handleKeyDown),document.removeEventListener("mouseup",this.handleMouseUp),document.removeEventListener("touchend",this.handleTouchEnd),document.onpointerup=null,document.ontouchend=null,document.ontouchcancel=null,document.onmouseup=null;var t=function(t){t.onpointerdown=null,t.onpointerup=null,t.onpointercancel=null,t.ontouchstart=null,t.ontouchend=null,t.ontouchcancel=null,t.onclick=null,t.onmousedown=null,t.onmouseup=null,t.remove(),t=null};this.recurseButtons(t),this.recurseButtons=null,t=null,this.keyboardDOM.onpointerdown=null,this.keyboardDOM.ontouchstart=null,this.keyboardDOM.onmousedown=null,this.clear(),window.SimpleKeyboardInstances[this.currentInstanceName]=null,delete window.SimpleKeyboardInstances[this.currentInstanceName],this.initialized=!1}},{key:"getButtonThemeClasses",value:function(t){var e=this.options.buttonTheme,i=[];return Array.isArray(e)&&e.forEach((function(e){if(e.class&&"string"==typeof e.class&&e.buttons&&"string"==typeof e.buttons){var n=e.class.split(" ");e.buttons.split(" ").includes(t)&&(i=[].concat(p(i),p(n)))}else console.warn('Incorrect "buttonTheme". Please check the documentation.',e)})),i}},{key:"setDOMButtonAttributes",value:function(t,e){var i=this.options.buttonAttributes;Array.isArray(i)&&i.forEach((function(i){i.attribute&&"string"==typeof i.attribute&&i.value&&"string"==typeof i.value&&i.buttons&&"string"==typeof i.buttons?i.buttons.split(" ").includes(t)&&e(i.attribute,i.value):console.warn('Incorrect "buttonAttributes". Please check the documentation.',i)}))}},{key:"onTouchDeviceDetected",value:function(){this.processAutoTouchEvents(),this.disableContextualWindow()}},{key:"disableContextualWindow",value:function(){window.oncontextmenu=function(t){if(t.target.classList.contains("hg-button"))return t.preventDefault(),t.stopPropagation(),!1}}},{key:"processAutoTouchEvents",value:function(){this.options.autoUseTouchEvents&&(this.options.useTouchEvents=!0,this.options.debug&&console.log("autoUseTouchEvents: Touch device detected, useTouchEvents enabled."))}},{key:"onInit",value:function(){this.options.debug&&console.log("".concat(this.keyboardDOMClass," Initialized")),this.setEventListeners(),"function"==typeof this.options.onInit&&this.options.onInit()}},{key:"beforeFirstRender",value:function(){this.utilities.isTouchDevice()&&this.onTouchDeviceDetected(),"function"==typeof this.options.beforeFirstRender&&this.options.beforeFirstRender(),this.isFirstKeyboardInstance&&this.utilities.pointerEventsSupported()&&!this.options.useTouchEvents&&!this.options.useMouseEvents&&this.options.debug&&console.log("Using PointerEvents as it is supported by this browser"),this.options.useTouchEvents&&this.options.debug&&console.log("useTouchEvents has been enabled. Only touch events will be used.")}},{key:"beforeRender",value:function(){"function"==typeof this.options.beforeRender&&this.options.beforeRender()}},{key:"onRender",value:function(){"function"==typeof this.options.onRender&&this.options.onRender()}},{key:"onModulesLoaded",value:function(){"function"==typeof this.options.onModulesLoaded&&this.options.onModulesLoaded(this)}},{key:"loadModules",value:function(){var t=this;Array.isArray(this.options.modules)&&(this.options.modules.forEach((function(e){(new e).init(t)})),this.keyboardPluginClasses="modules-loaded",this.render(),this.onModulesLoaded())}},{key:"getModuleProp",value:function(t,e){return!!this.modules[t]&&this.modules[t][e]}},{key:"getModulesList",value:function(){return Object.keys(this.modules)}},{key:"parseRowDOMContainers",value:function(t,e,i,n){var s=this,r=Array.from(t.children),o=0;return r.length&&i.forEach((function(i,a){var l=n[a];if(!(l&&l>i))return!1;var h=i-o,u=l-o,c=document.createElement("div");c.className+="hg-button-container";var d="".concat(s.options.layoutName,"-r").concat(e,"c").concat(a);c.setAttribute("data-skUID",d);var p=r.splice(h,u-h+1);o=u-h,p.forEach((function(t){return c.appendChild(t)})),r.splice(h,0,c),t.innerHTML="",r.forEach((function(e){return t.appendChild(e)})),s.options.debug&&console.log("rowDOMContainer",p,h,u,o+1)})),t}},{key:"render",value:function(){var t=this;this.clear(),this.initialized||this.beforeFirstRender(),this.beforeRender();var e="hg-layout-".concat(this.options.layoutName),i=this.options.layout||{default:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w e r t y u i o p [ ] \\","{lock} a s d f g h j k l ; ' {enter}","{shift} z x c v b n m , . / {shift}",".com @ {space}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W E R T Y U I O P { } |",'{lock} A S D F G H J K L : " {enter}',"{shift} Z X C V B N M < > ? {shift}",".com @ {space}"]},n=this.options.useTouchEvents||!1,s=n?"hg-touch-events":"",r=this.options.useMouseEvents||!1,o=this.options.disableRowButtonContainers;this.keyboardDOM.className=this.getKeyboardClassString(this.options.theme,e,this.keyboardPluginClasses,s),i[this.options.layoutName].forEach((function(e,i){var s=e.split(" "),a=document.createElement("div");a.className+="hg-row";var l=[],h=[];s.forEach((function(e,s){var u,c=!o&&"string"==typeof e&&e.length>1&&0===e.indexOf("["),d=!o&&"string"==typeof e&&e.length>1&&e.indexOf("]")===e.length-1;c&&(l.push(s),e=e.replace(/\[/g,"")),d&&(h.push(s),e=e.replace(/\]/g,""));var f=t.utilities.getButtonClass(e),g=t.utilities.getButtonDisplayName(e,t.options.display,t.options.mergeDisplay),m=t.options.useButtonTag?"button":"div",v=document.createElement(m);v.className+="hg-button ".concat(f),(u=v.classList).add.apply(u,p(t.getButtonThemeClasses(e))),t.setDOMButtonAttributes(e,(function(t,e){v.setAttribute(t,e)})),t.activeButtonClass="hg-activeButton",!t.utilities.pointerEventsSupported()||n||r?n?(v.ontouchstart=function(i){t.handleButtonClicked(e),t.handleButtonMouseDown(e,i)},v.ontouchend=function(i){t.handleButtonMouseUp(e,i)},v.ontouchcancel=function(i){t.handleButtonMouseUp(e,i)}):(v.onclick=function(){t.isMouseHold=!1,t.handleButtonClicked(e)},v.onmousedown=function(i){t.handleButtonMouseDown(e,i)},v.onmouseup=function(i){t.handleButtonMouseUp(e,i)}):(v.onpointerdown=function(i){t.handleButtonClicked(e),t.handleButtonMouseDown(e,i)},v.onpointerup=function(i){t.handleButtonMouseUp(e,i)},v.onpointercancel=function(i){t.handleButtonMouseUp(e,i)}),v.setAttribute("data-skBtn",e);var b="".concat(t.options.layoutName,"-r").concat(i,"b").concat(s);v.setAttribute("data-skBtnUID",b);var _=document.createElement("span");_.innerHTML=g,v.appendChild(_),t.buttonElements[e]||(t.buttonElements[e]=[]),t.buttonElements[e].push(v),a.appendChild(v)})),a=t.parseRowDOMContainers(a,i,l,h),t.keyboardDOM.appendChild(a)})),this.onRender(),this.initialized||(this.initialized=!0,!this.utilities.pointerEventsSupported()||n||r?n?(document.ontouchend=function(){return t.handleButtonMouseUp()},document.ontouchcancel=function(){return t.handleButtonMouseUp()},this.keyboardDOM.ontouchstart=function(e){return t.handleKeyboardContainerMouseDown(e)}):n||(document.onmouseup=function(){return t.handleButtonMouseUp()},this.keyboardDOM.onmousedown=function(e){return t.handleKeyboardContainerMouseDown(e)}):(document.onpointerup=function(){return t.handleButtonMouseUp()},this.keyboardDOM.onpointerdown=function(e){return t.handleKeyboardContainerMouseDown(e)}),this.onInit())}}])&&m(e.prototype,i),t}();e.default=b}])},23:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>o});var n=i(379),s=i.n(n),r=i(634);s()(r.Z,{insert:"head",singleton:!1});const o=r.Z.locals||{}},379:(t,e,i)=>{"use strict";var n,s=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}(),r=[];function o(t){for(var e=-1,i=0;i<r.length;i++)if(r[i].identifier===t){e=i;break}return e}function a(t,e){for(var i={},n=[],s=0;s<t.length;s++){var a=t[s],l=e.base?a[0]+e.base:a[0],h=i[l]||0,u="".concat(l," ").concat(h);i[l]=h+1;var c=o(u),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==c?(r[c].references++,r[c].updater(d)):r.push({identifier:u,updater:g(d,e),references:1}),n.push(u)}return n}function l(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var r=i.nc;r&&(n.nonce=r)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var o=s(t.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}return e}var h,u=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function c(t,e,i,n){var s=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=u(e,s);else{var r=document.createTextNode(s),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(r,o[e]):t.appendChild(r)}}function d(t,e,i){var n=i.css,s=i.media,r=i.sourceMap;if(s?t.setAttribute("media",s):t.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var p=null,f=0;function g(t,e){var i,n,s;if(e.singleton){var r=f++;i=p||(p=l(e)),n=c.bind(null,i,r,!1),s=c.bind(null,i,r,!0)}else i=l(e),n=d.bind(null,i,e),s=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else s()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var i=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<i.length;n++){var s=o(i[n]);r[s].references--}for(var l=a(t,e),h=0;h<i.length;h++){var u=o(i[h]);0===r[u].references&&(r[u].updater(),r.splice(u,1))}i=l}}}},673:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CalibrationInteractive=void 0;const n=i(229),s=i(921),r=i(930);class o extends r.Calibration{constructor(t){super(),this.createGUI(t)}static initialize(t=null){r.Calibration.calibration=new o(t)}createGUI(t){this.gui=t.addFolder("Calibration"),this.gui.addButton("Set top left",(()=>this.updateTransform(0))),this.gui.addButton("Set top right",(()=>this.updateTransform(1))),this.gui.addButton("Set bottom right",(()=>this.updateTransform(2))),this.gui.addButton("Set bottom left",(()=>this.updateTransform(3))),this.gui.addButton("Reset transform",(()=>this.resetTransform())),this.previewTransformController=this.gui.add(this,"previewTransform").name("Preview transform").onFinishChange((()=>this.togglePreviewTransform())),this.gui.add(this,"applyTransform").name("Apply transform").onFinishChange((t=>{n.Settings.transformMatrix.apply=this.applyTransform,s.settingsManager.save(!1)}));let e=this.gui.addFolder("Rectangle test");e.add(this,"width",0,5e3,1).name("Width").onChange((()=>this.updatePreviewRectangle())),e.add(this,"height",0,5e3,1).name("Height").onChange((()=>this.updatePreviewRectangle())),e.add(this,"previewRectangle").name("Preview rectangle").onFinishChange((()=>this.togglePreviewRectangle())),e.add(this,"cornersOnly").name("Corners only").onFinishChange((()=>this.updatePreviewRectangle())),e.addButton("Draw rectangle",(()=>this.drawRectangle()));let i=e.addFolder("Parameter calibration");i.add(this,"amount",0,100,1).name("Amount"),i.addButton("Calibrate Y",(()=>this.calibrateY())),i.addButton("Calibrate Width",(()=>this.calibrateWidth()))}updateTransform(t){super.updateTransform(t),s.settingsManager.save(!1),this.previewTransformController.setValue(!0,!0)}}e.CalibrationInteractive=o},930:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Calibration=void 0;const n=i(229),s=i(922),r=i(884);class o{constructor(){this.amount=10,this.width=200,this.height=287,this.applyTransform=!1,this.previewTransform=!1,this.previewRectangle=!1,this.previewRectangleItem=null,this.previewTransformItem=null,this.cornersOnly=!1,this.points=[],this.transformMatrix=null,this.loadPoints()}static initialize(){o.calibration=new o}loadPoints(){if(null==n.Settings.transformMatrix||null==n.Settings.transformMatrix.destinationPoints||n.Settings.transformMatrix.destinationPoints.length<8)return this.points=this.getDrawAreaPoints(),void(n.Settings.transformMatrix.destinationPoints=this.points.slice());this.points=n.Settings.transformMatrix.destinationPoints,this.applyTransform=n.Settings.transformMatrix.apply,this.updateTransformMatrix()}getDrawAreaPoints(){let t=s.Tipibot.tipibot.computeDrawArea(),e=[];return e.push(t.topLeft.x),e.push(t.topLeft.y),e.push(t.topRight.x),e.push(t.topRight.y),e.push(t.bottomRight.x),e.push(t.bottomRight.y),e.push(t.bottomLeft.x),e.push(t.bottomLeft.y),e}updateTransformMatrix(){let t=this.getDrawAreaPoints(),e=this.points;this.transformMatrix=r(t,e)}updateTransform(t){let e=s.Tipibot.tipibot.getPosition();n.Settings.transformMatrix.destinationPoints[2*t]=e.x,n.Settings.transformMatrix.destinationPoints[2*t+1]=e.y,this.points[2*t]=e.x,this.points[2*t+1]=e.y,this.updateTransformMatrix(),this.updatePreviewTransform()}resetTransform(){this.points=this.getDrawAreaPoints(),this.transformMatrix=null,this.previewTransform?this.updatePreviewTransform():null!=this.previewRectangleItem&&(this.previewTransformItem.remove(),this.previewTransformItem=null)}transform(t){return null!=this.transformMatrix?new n.paper.Point(this.transformMatrix.transform(t.x,t.y)):t}getRectangle(){let t=s.Tipibot.tipibot.computeDrawArea().center.subtract(new n.paper.Point(this.width/2,this.height/2));return new n.paper.Rectangle(t,new n.paper.Size(this.width,this.height))}updatePreviewRectangle(){null!=this.previewRectangleItem&&(this.previewRectangleItem.remove(),this.previewRectangleItem=null);let t=this.getRectangle();if(this.cornersOnly){this.previewRectangleItem=new n.paper.Group;let e=new n.paper.Path;e.add(t.topLeft.add(new n.paper.Point(0,10))),e.add(t.topLeft),e.add(t.topLeft.add(new n.paper.Point(10,0)));let i=new n.paper.Path;i.add(t.topRight.add(new n.paper.Point(-10,0))),i.add(t.topRight),i.add(t.topRight.add(new n.paper.Point(0,10)));let s=new n.paper.Path;s.add(t.bottomRight.add(new n.paper.Point(0,-10))),s.add(t.bottomRight),s.add(t.bottomRight.add(new n.paper.Point(-10,0)));let r=new n.paper.Path;r.add(t.bottomLeft.add(new n.paper.Point(10,0))),r.add(t.bottomLeft),r.add(t.bottomLeft.add(new n.paper.Point(0,-10))),this.previewRectangleItem.addChild(e),this.previewRectangleItem.addChild(i),this.previewRectangleItem.addChild(s),this.previewRectangleItem.addChild(r)}else console.log("h"),this.previewRectangleItem=new n.paper.Path.Rectangle(t);this.previewRectangleItem.strokeColor=new n.paper.Color("green"),this.previewRectangleItem.strokeWidth=1}togglePreviewRectangle(){this.previewRectangle?this.updatePreviewRectangle():null!=this.previewRectangleItem&&(this.previewRectangleItem.remove(),this.previewRectangleItem=null)}updatePreviewTransform(){let t=s.Tipibot.tipibot.computeDrawArea(),e=this.transform(t.topLeft),i=this.transform(t.topRight),r=this.transform(t.bottomRight),o=this.transform(t.bottomLeft);null!=this.previewTransformItem&&(this.previewTransformItem.remove(),this.previewTransformItem=null),this.previewTransformItem=new n.paper.Path,this.previewTransformItem.add(e),this.previewTransformItem.add(i),this.previewTransformItem.add(r),this.previewTransformItem.add(o),this.previewTransformItem.add(e),this.previewTransformItem.strokeColor=new n.paper.Color("orange"),this.previewTransformItem.strokeWidth=1}togglePreviewTransform(){this.previewTransform?this.updatePreviewTransform():null!=this.previewTransformItem&&(this.previewTransformItem.remove(),this.previewTransformItem=null)}drawRectangle(){let t=this.getRectangle(),e=s.Tipibot.tipibot.getPosition();s.Tipibot.tipibot.sendSpecs(),s.Tipibot.tipibot.penUp(),this.cornersOnly?(s.Tipibot.tipibot.moveDirect(t.topLeft.add(new n.paper.Point(0,10))),s.Tipibot.tipibot.penDown(),s.Tipibot.tipibot.moveLinear(t.topLeft),s.Tipibot.tipibot.moveLinear(t.topLeft.add(new n.paper.Point(10,0))),s.Tipibot.tipibot.penUp(),s.Tipibot.tipibot.moveDirect(t.topRight.add(new n.paper.Point(-10,0))),s.Tipibot.tipibot.penDown(),s.Tipibot.tipibot.moveLinear(t.topRight),s.Tipibot.tipibot.moveLinear(t.topRight.add(new n.paper.Point(0,10))),s.Tipibot.tipibot.penUp(),s.Tipibot.tipibot.moveDirect(t.bottomRight.add(new n.paper.Point(0,-10))),s.Tipibot.tipibot.penDown(),s.Tipibot.tipibot.moveLinear(t.bottomRight),s.Tipibot.tipibot.moveLinear(t.bottomRight.add(new n.paper.Point(-10,0))),s.Tipibot.tipibot.penUp(),s.Tipibot.tipibot.moveDirect(t.bottomLeft.add(new n.paper.Point(10,0))),s.Tipibot.tipibot.penDown(),s.Tipibot.tipibot.moveLinear(t.bottomLeft),s.Tipibot.tipibot.moveLinear(t.bottomLeft.add(new n.paper.Point(0,-10)))):(s.Tipibot.tipibot.moveDirect(t.topLeft),s.Tipibot.tipibot.penDown(),s.Tipibot.tipibot.moveLinear(t.topRight),s.Tipibot.tipibot.moveLinear(t.bottomRight),s.Tipibot.tipibot.moveLinear(t.bottomLeft),s.Tipibot.tipibot.moveLinear(t.topLeft)),s.Tipibot.tipibot.penUp(),s.Tipibot.tipibot.moveDirect(e)}calibrateY(){let t=s.Tipibot.tipibot.getPosition();for(let e=-this.amount;e<=this.amount;e+=this.amount)s.Tipibot.tipibot.setPosition(new n.paper.Point(t.x,t.y+e),!0,!1),this.drawRectangle();s.Tipibot.tipibot.setPosition(t,!1,!1)}calibrateWidth(){let t=s.Tipibot.tipibot.getPosition(),e=n.Settings.tipibot.width,i=n.Settings.tipibot.height;for(let i=-this.amount;i<=this.amount;i+=this.amount)n.Settings.tipibot.width=e+i,s.Tipibot.tipibot.setPosition(new n.paper.Point(t.x+i/2,t.y),!1,!1),this.drawRectangle();n.Settings.tipibot.width=e,n.Settings.tipibot.height=i,s.Tipibot.tipibot.setPosition(t,!1,!1),s.Tipibot.tipibot.sendSpecs()}}e.Calibration=o,o.calibration=null},412:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CommandDisplay=void 0;const n=i(755),s=i(229),r=i(921),o=i(322),a=i(758),l=i(271),h=i(883),u=i(925);e.CommandDisplay=class{constructor(){this.advancedLayout=!1,document.addEventListener("QueueCommand",(t=>this.queueCommand(t.detail)),!1),document.addEventListener("QueueCommands",(t=>this.queueCommands(t.detail)),!1),document.addEventListener("SendCommand",(t=>this.sendCommand(t.detail)),!1),document.addEventListener("CommandExecuted",(t=>this.commandExecuted(t.detail)),!1),document.addEventListener("ClearQueue",(t=>this.clearQueue()),!1),document.addEventListener("CancelCommand",(t=>this.commandExecuted(t.detail)),!1)}addIcon(t,e){n("#other-controls button."+e+" svg").insertBefore(t.getDomElement())}initializeMoveControls(){n("#move-speed button").click((t=>{n("#move-speed button").removeClass("selected"),n(t.target).addClass("selected")})),n("#move-controls button.up-arrow").mousedown((()=>{let t=parseFloat(n("#move-speed button.selected").attr("data-value"));u.TipibotInteractive.tipibot.moveDirect(u.TipibotInteractive.tipibot.getPosition().add(new s.paper.Point(0,-t)))})),n("#move-controls button.down-arrow").mousedown((()=>{let t=parseFloat(n("#move-speed button.selected").attr("data-value"));u.TipibotInteractive.tipibot.moveDirect(u.TipibotInteractive.tipibot.getPosition().add(new s.paper.Point(0,t)))})),n("#move-controls button.left-arrow").mousedown((()=>{let t=parseFloat(n("#move-speed button.selected").attr("data-value"));u.TipibotInteractive.tipibot.moveDirect(u.TipibotInteractive.tipibot.getPosition().add(new s.paper.Point(-t,0)))})),n("#move-controls button.right-arrow").mousedown((()=>{let t=parseFloat(n("#move-speed button.selected").attr("data-value"));u.TipibotInteractive.tipibot.moveDirect(u.TipibotInteractive.tipibot.getPosition().add(new s.paper.Point(t,0)))})),n("#move-controls button.home").mousedown((()=>{u.TipibotInteractive.tipibot.goHome((()=>console.log("I am home :-)")))}))}initializeServoControls(){n("#servo-controls button.plus").mousedown((()=>{u.TipibotInteractive.tipibot.servoPlus()})),n("#servo-controls button.minus").mousedown((()=>{u.TipibotInteractive.tipibot.servoMinus()})),n("#servo-controls button.go-pen-up").mousedown((()=>{u.TipibotInteractive.tipibot.servoChanged(!0,"up",!1)})),n("#servo-controls button.go-pen-down").mousedown((()=>{u.TipibotInteractive.tipibot.servoChanged(!0,"down",!1)})),n("#servo-controls button.go-pen-close").mousedown((()=>{u.TipibotInteractive.tipibot.servoChanged(!0,"close",!1)})),n("#servo-controls button.go-pen-drop").mousedown((()=>{u.TipibotInteractive.tipibot.servoChanged(!0,"drop",!1)})),n("#servo-controls button.set-pen-up").mousedown((()=>{u.TipibotInteractive.tipibot.servoChanged(!0,"up",!0)})),n("#servo-controls button.set-pen-down").mousedown((()=>{u.TipibotInteractive.tipibot.servoChanged(!0,"down",!0)})),n("#servo-controls button.set-pen-close").mousedown((()=>{u.TipibotInteractive.tipibot.servoChanged(!0,"close",!0)})),n("#servo-controls button.set-pen-drop").mousedown((()=>{u.TipibotInteractive.tipibot.servoChanged(!0,"drop",!0)}))}createGUI(t){this.console=t;let e=t.gui;this.initializeMoveControls(),this.gui=e.addFolder("Commands"),n("#controls").insertAfter(n(this.gui.getDomElement()).find("li.title")),this.gui.open(),n("#fullscreen").click((()=>{let t=r.settingsManager.gui.getFolder("Settings").getController("fullscreen");t.setValue(!t.getValue())})),u.TipibotInteractive.tipibot.gui=this.gui;let i={moveX:s.Settings.tipibot.homeX,moveY:s.Settings.tipibot.homeY};this.gui.add(i,"moveX",0,s.Settings.tipibot.width).name("Move X").onFinishChange((t=>u.TipibotInteractive.tipibot.move(l.MoveType.Direct,new s.paper.Point(t,u.TipibotInteractive.tipibot.getPosition().y)))),this.gui.add(i,"moveY",0,s.Settings.tipibot.height).name("Move Y").onFinishChange((t=>u.TipibotInteractive.tipibot.move(l.MoveType.Direct,new s.paper.Point(u.TipibotInteractive.tipibot.getPosition().x,t)))),this.connectButton=this.gui.addButton(o.Communication.communication&&o.Communication.communication.serialPortConnectionOpened?"Disconnect":"Connect",(()=>{o.Communication.communication.serialPortConnectionOpened?o.Communication.communication.disconnectSerialPort():null!=o.Communication.communication.autoConnectController&&o.Communication.communication.autoConnectController.setValue(!0)})),document.addEventListener("Connect",(()=>this.connectButton.setName("Disconnect"))),document.addEventListener("Disconnect",(()=>this.connectButton.setName("Connect"))),this.addIcon(this.connectButton,"connect"),this.goHomeButton=this.gui.addButton("Go home",(()=>u.TipibotInteractive.tipibot.goHome((()=>console.log("I am home :-)"))))),this.setHomeButton=this.gui.addButton("Set home",(()=>u.TipibotInteractive.tipibot.setHome())),this.addIcon(this.setHomeButton,"set-home"),this.autoHomeButton=this.gui.addButton("Auto home",(()=>u.TipibotInteractive.tipibot.autoHome())),this.addIcon(this.autoHomeButton,"set-home"),u.TipibotInteractive.tipibot.penStateButton=this.gui.addButton("Pen down",(()=>u.TipibotInteractive.tipibot.togglePenState())),this.addIcon(u.TipibotInteractive.tipibot.penStateButton,"pen"),u.TipibotInteractive.tipibot.motorsEnableButton=this.gui.addButton("Disable motors",(()=>u.TipibotInteractive.tipibot.toggleMotors())),this.addIcon(u.TipibotInteractive.tipibot.motorsEnableButton,"toggle-motors"),this.initializeButton=this.gui.addButton("Initialize",(()=>o.Communication.interpreter.initialize(!1))),this.loadSVGButton=this.gui.addButton("Load SVG",(()=>h.SVGPlot.gui.getController("Load SVG").click())),this.clearSVGButton=this.gui.addButton("Clear SVG",h.SVGPlot.clearClicked),this.clearSVGButton.hide(),this.addIcon(this.loadSVGButton,"load-svg"),this.addIcon(this.clearSVGButton,"clear"),document.addEventListener("Load SVG",(()=>{this.loadSVGButton.hide(),this.clearSVGButton.show()})),document.addEventListener("Clear SVG",(()=>{this.loadSVGButton.show(),this.clearSVGButton.hide()})),this.drawSVGButton=this.gui.addButton("Draw",(()=>h.SVGPlot.gui.getController("Draw").click())),document.addEventListener("Draw",(()=>this.drawSVGButton.setName("Stop, clear commands & go home"))),document.addEventListener("Stop drawing",(()=>this.drawSVGButton.setName("Draw"))),this.addIcon(this.drawSVGButton,"draw"),this.pauseButton=this.gui.add({Pause:!1},"Pause").onChange((t=>o.Communication.interpreter.setPause(t))),this.addIcon(this.pauseButton,"pause"),this.emergencyStopButton=this.gui.addButton("Emergency stop",(()=>{this.pauseButton.setValue(!0),o.Communication.interpreter.sendStop(!0)})),this.saveCommandsButton=this.gui.addButton("Save commands",(()=>this.saveCommands())),this.clearCommandsButton=this.gui.addButton("Clear commands",(()=>o.Communication.interpreter.clearQueue()));let a=this.gui.add(this,"advancedLayout").name("Advanced settings").onFinishChange((t=>this.toggleAdvancedSettings(t)));this.addIcon(a,"advanced-settings"),this.commandList=this.gui.addFolder("Command list"),this.listJ=n('<ul id="command-list" class="c-list">'),this.listJ.insertAfter(n(this.commandList.gui.domElement).find("li")),this.goHomeButton.hide(),this.initializeButton.hide(),this.emergencyStopButton.hide(),this.saveCommandsButton.hide(),this.clearCommandsButton.hide()}toggleAdvancedSettings(t){t?(this.goHomeButton.show(),this.initializeButton.show(),this.saveCommandsButton.show(),this.clearCommandsButton.show(),this.emergencyStopButton.show(),n("body").addClass("advancedLayout"),n("#gui").show()):(this.goHomeButton.hide(),this.initializeButton.hide(),this.saveCommandsButton.hide(),this.clearCommandsButton.hide(),this.emergencyStopButton.hide(),n("body").removeClass("advancedLayout"),n("#gui").hide()),window.dispatchEvent(new Event("resize"))}saveCommands(){let t=o.Communication.interpreter.getGCode(),e=new Blob([t],{type:"text/plain;charset=utf-8"});saveAs(e,"gcode.txt")}click(t){if("BUTTON"==t.target.tagName){let e=parseInt(t.target.parentNode.id);o.Communication.interpreter.removeCommand(e),this.removeCommand(e)}}createCommandItem(t){let e=n('<li id="'+t.id+'"">'),i=n("<div>").append(t.message).addClass("message"),s=n("<div>").append(t.data).addClass("data");e.append(i),e.append(s);let r=n("<button>x</button>");return r.click((e=>{o.Communication.interpreter.removeCommand(t.id),this.removeCommand(t.id)})),e.append(r),e}queueCommands(t){let e=(""+Math.random()).replace(".",""),i=n('<li id="'+e+'" class="commands">'),s=t.length,r=n("<div>").text(s+"/"+s+" commands").addClass("message").attr("data-n-commands",s).attr("data-total-commands",s);i.append(r);let a=n("<button>x</button>");a.click((i=>{for(let e of t)o.Communication.interpreter.removeCommand(e);this.removeCommand(e)})),i.append(a),this.listJ.append(i)}removeCommand(t){let e=this.listJ.find("#"+t);0!=e.length&&(e.remove(),this.updateName(),document.dispatchEvent(new CustomEvent("CommandListChanged")))}updateName(){n("#commands h3").text("Command list ("+this.listJ.children().length+")")}queueCommand(t){this.listJ.append(this.createCommandItem(t)),this.updateName(),document.dispatchEvent(new CustomEvent("CommandListChanged"))}sendCommand(t){t.special!=a.SpecialCommandTypes.ChangePen?this.listJ.find("#"+t.id).addClass("sent"):this.pauseButton.setValue(!0)}commandExecuted(t){let e=this.listJ.children().first();if(e.hasClass("commands")){let t=e.find(".message"),i=parseInt(t.attr("data-n-commands"))-1;t.attr("data-n-commands",i);let n=t.attr("data-total-commands");return t.text(i+"/"+n+" commands"),void(0==i&&this.removeCommand(e.attr("id")))}this.removeCommand(t.id)}clearQueue(){this.listJ.children().remove(),this.updateName(),document.dispatchEvent(new CustomEvent("CommandListChanged"))}}},754:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CommunicationInteractive=void 0;const n=i(755),s=i(322),r=i(229),o=i(921);class a extends s.Communication{constructor(t){super(!1),this.autoConnectIntervalID=null,s.Communication.communication=this,this.createGUI(t),this.portController=null,this.initializeInterpreter(r.Settings.firmware),this.connectToSerial()}createGUI(t){this.gui=t.addFolder("Communication"),this.folderTitle=n(this.gui.getDomElement()).find(".title"),this.folderTitle.append(n("<icon>").addClass("serial").append(String.fromCharCode(9679))),this.folderTitle.append(n("<icon>").addClass("websocket").append(String.fromCharCode(9679)))}startAutoConnection(){this.autoConnectIntervalID=setInterval((()=>this.tryConnectSerialPort()),1e3)}stopAutoConnection(){clearInterval(this.autoConnectIntervalID),this.autoConnectIntervalID=null}setPortName(t){this.portController.object[this.portController.property]=t.path,this.portController.updateDisplay()}onSerialPortConnectionOpened(t=null){super.onSerialPortConnectionOpened(t),null!=t&&this.setPortName(t),this.stopAutoConnection(),this.interpreter.serialPortConnectionOpened(),this.folderTitle.find(".serial").addClass("connected")}onSerialPortConnectionClosed(){super.onSerialPortConnectionClosed(),r.Settings.autoConnect&&this.startAutoConnection(),this.folderTitle.find(".serial").removeClass("connected")}initializePortController(t){this.portController=this.portController.options(t),n(this.portController.domElement.parentElement.parentElement).mousedown((t=>{this.autoConnectController.setValue(!1)})),this.portController.onFinishChange((t=>this.serialConnectionPortChanged(t)))}onMessage(t){super.onMessage(t);let e=t.type,i=t.data;if("list"==e){let t=["Disconnected"];for(let e of i)t.push(e.path);if(this.initializePortController(t),r.Settings.autoConnect)for(let t of i)if(null!=t.manufacturer&&t.manufacturer.indexOf("Arduino")>=0){this.portController.setValue(t.path);break}}else"connected"==e?this.setPortName(i):"not-connected"==e?(this.folderTitle.find(".serial").removeClass("connected").removeClass("simulator"),r.Settings.autoConnect&&this.startAutoConnection()):"connected-to-simulator"==e?this.folderTitle.find(".serial").removeClass("connected").addClass("simulator"):"load-settings"==e&&o.settingsManager.loadJSONandOverwriteLocalStorage(i)}connectToSerial(){this.gui.add(r.Settings,"websocketServerURL").onFinishChange((t=>{o.settingsManager.save(!1)})),this.gui.add(r.Settings,"firmware",["Tipibot","Polargraph","PenPlotter","Makelangelo","FredBot"]).name("Firmware").onFinishChange((t=>{o.settingsManager.save(!1),this.initializeInterpreter(t)})),this.autoConnectController=this.gui.add(r.Settings,"autoConnect").name("Auto connect").onFinishChange((t=>{o.settingsManager.save(!1),t?this.startAutoConnection():this.stopAutoConnection()})),this.portController=this.gui.add({Connection:"Disconnected"},"Connection"),this.gui.addButton("Disconnect",(()=>this.disconnectSerialPort())),this.gui.addButton("Refresh",(()=>{this.send("list")})),this.initializePortController(["Disconnected"]),super.connectToSerial()}onWebSocketOpen(t){this.folderTitle.find(".websocket").addClass("connected"),super.onWebSocketOpen(t)}onWebSocketClose(t){this.folderTitle.find(".websocket").removeClass("connected"),super.onWebSocketClose(t)}disconnectSerialPort(){super.disconnectSerialPort(),this.autoConnectController.setValue(!1),this.portController.setValue("Disconnected")}}e.CommunicationInteractive=a},322:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Communication=e.SERIAL_COMMUNICATION_SPEED=void 0;const n=i(229),s=i(758),r=i(24),o=i(388),a=i(108),l=i(705),h=i(595);e.SERIAL_COMMUNICATION_SPEED=s.SERIAL_COMMUNICATION_SPEED;class u{constructor(t=!0){this.serialPortConnectionOpened=!1,this.autoConnectController=null,u.communication=this,this.socket=null,t&&(this.initializeInterpreter(n.Settings.firmware),this.connectToSerial()),document.addEventListener("SettingChanged",(t=>this.onSettingChanged(t)),!1)}onSettingChanged(t){this.send("save-settings",n.Settings)}setTipibot(t){this.interpreter.setTipibot(t)}initializeInterpreter(t){let e=this.interpreter?this.interpreter.tipibot:null;this.serialPortConnectionOpened&&this.disconnectSerialPort(),"Tipibot"==t?this.interpreter=new a.TipibotInterpreter(this):"Polargraph"==t?this.interpreter=new r.Polargraph(this):"PenPlotter"==t?this.interpreter=new o.PenPlotter(this):"FredBot"==t?this.interpreter=new l.FredBot(this):"Makelangelo"==t&&(this.interpreter=new h.Makelangelo(this)),u.interpreter=this.interpreter,this.interpreter.setTipibot(e),console.log("initialize "+t)}onSerialPortConnectionOpened(t=null){this.serialPortConnectionOpened=!0}onSerialPortConnectionClosed(){this.serialPortConnectionOpened=!1}onMessage(t){let e=t.type,i=t.data;"opened"==e?this.onSerialPortConnectionOpened():"closed"==e?this.onSerialPortConnectionClosed():"list"==e||"connected"==e||"not-connected"==e||"connected-to-simulator"==e||("data"==e?this.interpreter.messageReceived(t):"sent"==e?this.interpreter.messageSent(t):"info"==e?console.info(i):"warning"==e?console.warn(i):"already-opened"==e?this.onSerialPortConnectionOpened(i):"error"==e?console.error(i):"load-settings"==e&&(0,n.copyObjectProperties)(n.Settings,i))}onJSONMessage(t){let e=JSON.parse(t.data);return document.dispatchEvent(new CustomEvent("ServerMessage",{detail:e})),this.onMessage(e),e}connectToSerial(){this.socket=new WebSocket(`ws://${n.Settings.websocketServerURL}`),this.socket.addEventListener("message",(t=>this.onJSONMessage(t))),this.socket.addEventListener("open",(t=>this.onWebSocketOpen(t))),this.socket.addEventListener("close",(t=>this.onWebSocketClose(t))),this.socket.addEventListener("error",(t=>this.onWebSocketError(t)))}onWebSocketOpen(t){this.send("is-connected")}onWebSocketClose(t){console.error("WebSocket disconnected")}onWebSocketError(t){console.error("WebSocket error")}disconnectSerialPort(){this.interpreter.clearQueue(),this.interpreter.sendStop(!0),this.onSerialPortConnectionClosed(),this.send("close"),document.dispatchEvent(new CustomEvent("Disconnect"))}serialConnectionPortChanged(t){"Disconnected"==t&&this.serialPortConnectionOpened?this.disconnectSerialPort():"Disconnected"!=t&&(this.interpreter.setSerialPort(t),document.dispatchEvent(new CustomEvent("Connect",{detail:t})),console.log("open: "+t+", at: "+this.interpreter.serialCommunicationSpeed),this.send("open",{name:t,baudRate:this.interpreter.serialCommunicationSpeed}))}tryConnectSerialPort(){n.Settings.autoConnect&&!this.serialPortConnectionOpened&&this.send("list")}send(t,e=null){let i={type:t,data:e};this.socket.send(JSON.stringify(i))}}e.Communication=u},705:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FredBot=void 0;const n=i(388);class s extends n.PenPlotter{constructor(t){super(t),this.continueMessage="ok",this.initializationMessage="Initialize",this.serialCommunicationSpeed=25e4}serialPortConnectionOpened(){}convertServoValue(t){return.2+2*t/180}sendPenState(t,e=0,i=0,n=null){let s="Move servo: "+(t=this.convertServoValue(t));e>0&&this.sendPause(e),this.queue("G1 Z"+t+"\n",s),i>0&&this.sendPause(i,n)}}e.FredBot=s},758:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Interpreter=e.SERIAL_COMMUNICATION_SPEED=e.SpecialCommandTypes=void 0;const n=i(229);var s;!function(t){t[t.Idle=0]="Idle",t[t.ChangePen=1]="ChangePen"}(s=e.SpecialCommandTypes||(e.SpecialCommandTypes={})),e.SERIAL_COMMUNICATION_SPEED=115200,e.Interpreter=class{constructor(t){this.commandID=0,this.continueMessage="READY",this.serialCommunicationSpeed=e.SERIAL_COMMUNICATION_SPEED,this.name="interpreter",this.justQueueCommands=!1,this.lastCommandSendTime=null,this.logNextMessage=!0,this.commandQueue=[],this.pause=!1,this.serialInput="",this.tempoNextCommand=!1,this.communication=t}setSerialPort(t){this.serialPort=t}setTipibot(t){this.tipibot=t}serialPortConnectionOpened(){this.initialize()}initialize(t=!0){this.sendPenWidth(n.Settings.tipibot.penWidth),this.sendSpecs(),this.sendInvertXY(),this.sendSetPosition(t?new n.paper.Point(n.Settings.tipibot.homeX,n.Settings.tipibot.homeY-n.Settings.tipibot.penOffset):this.tipibot.getGondolaPosition()),this.sendMaxSpeedAndAcceleration(),this.sendServoSpeed(),this.sendFeedback(),this.tipibot.initializedCommunication=!0}getGCode(){let t="";for(let e of this.commandQueue)t+=e.data;return t}send(t){if(!this.pause){if(document.dispatchEvent(new CustomEvent("SendCommand",{detail:t})),t.special==s.ChangePen)return this.pause=!0,console.log("send: "+t.message+" - "+t.data),void console.info(t.message+" and then resume (uncheck pause)");console.log("send: "+t.message+" - "+t.data),this.lastCommandSendTime=null,this.logNextMessage=!0,this.communication.send("data",t.data)}}isolateContinueMessage(){if(this.serialInput.indexOf(this.continueMessage)>0){var t=new RegExp(this.continueMessage,"g");this.serialInput=this.serialInput.replace(t,"\n"+this.continueMessage)}}messageSent(t){this.lastCommandSendTime=t.time}messageReceived(t){let e=t.data;if(t.time,null==t||null==e)return;this.serialInput+=e,this.isolateContinueMessage();let i=this.serialInput.split("\n");this.serialInput=this.serialInput.endsWith("\n")?"":i[i.length-1];for(let e=0;e<i.length-1;e++)this.processMessage(i[e],t.time)}processMessage(t,e){if(""==t)return;document.dispatchEvent(new CustomEvent("MessageReceived",{detail:t}));let i=0==t.indexOf(this.continueMessage);if(i&&!this.logNextMessage||(console.log(t),this.logNextMessage=!1),i&&null!=this.lastCommandSendTime&&e>this.lastCommandSendTime&&this.commandQueue.length>0){let t=this.commandQueue.shift();null!=t.callback&&t.callback(),document.dispatchEvent(new CustomEvent("CommandExecuted",{detail:t})),this.startQueue()}}setPause(t){this.pause=t,this.pause||this.startQueue()}queue(t,e,i=null,n=null){let s={id:this.commandID++,data:t,callback:i,message:e,special:n};this.justQueueCommands?this.commandQueue.push(s):(document.dispatchEvent(new CustomEvent("QueueCommand",{detail:s})),this.commandQueue.push(s),1==this.commandQueue.length&&this.send(s))}startQueue(){this.commandQueue.length>0&&this.send(this.commandQueue[0])}removeCommand(t){let e=this.commandQueue.findIndex((e=>e.id==t));e>=0&&this.commandQueue.splice(e,1)}clearQueue(){this.commandQueue=[],document.dispatchEvent(new CustomEvent("ClearQueue",{detail:null}))}executeOnceFinished(t){0==this.commandQueue.length&&t();let e=this.commandQueue[this.commandQueue.length-1],i=e.callback;e.callback=()=>{i(),t()}}sendSetHome(t=this.tipibot.getPosition()){}sendAutoHome(t=null){}sendSetPosition(t=this.tipibot.getPosition()){}sendMoveDirect(t,e=null){}sendMoveLinear(t,e=0,i=n.Settings.tipibot.maxSpeed,s=null){}sendMoveStation(t=0,e=0,i=0,n=null){}sendDrawSpeed(t=n.Settings.tipibot.drawSpeed,e=n.Settings.tipibot.acceleration){}sendMaxSpeed(t=n.Settings.tipibot.maxSpeed,e=n.Settings.tipibot.acceleration){}sendAcceleration(t=n.Settings.tipibot.acceleration){}sendMaxSpeedAndAcceleration(t=n.Settings.tipibot.maxSpeed,e=n.Settings.tipibot.acceleration){}sendSize(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height){}sendStepsPerRev(t=n.Settings.tipibot.stepsPerRev){}sendMmPerRev(t=n.Settings.tipibot.mmPerRev){}sendStepMultiplier(t=n.Settings.tipibot.microstepResolution){}sendPenWidth(t=n.Settings.tipibot.penWidth){}sendChangePen(t,e){this.queue("Change pen "+e+"\n","Change pen to "+t+", index "+e,null,s.ChangePen)}sendServoSpeed(t=n.Settings.servo.speed){}sendSpecs(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height,i=n.Settings.tipibot.stepsPerRev,s=n.Settings.tipibot.mmPerRev,r=n.Settings.tipibot.microstepResolution){}sendInvertXY(t=n.Settings.tipibot.invertMotorLeft,e=n.Settings.tipibot.invertMotorRight){}sendProgressiveMicrosteps(t=n.Settings.tipibot.progressiveMicrosteps){}sendPause(t){}sendMotorOff(){}sendMotorOn(){}sendPenState(t,e=0){}sendPenUp(t=(0,n.servoUpAngle)(),e=n.Settings.servo.delay.up.before,i=n.Settings.servo.delay.up.after,s=null){}sendPenDown(t=(0,n.servoDownAngle)(),e=n.Settings.servo.delay.down.before,i=n.Settings.servo.delay.down.after,s=null){}sendPenClose(t=n.Settings.servo.position.close,e=null){}sendPenDrop(t=n.Settings.servo.position.drop,e=null){}sendStop(t=!0){}sendPenLiftRange(t=(0,n.servoDownAngle)(),e=(0,n.servoUpAngle)()){}sendPenDelays(t=n.Settings.servo.delay.down.before,e=n.Settings.servo.delay.up.before){}sendFeedback(t=n.Settings.feedback.enable,e=n.Settings.feedback.rate){}}},595:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Makelangelo=void 0;const n=i(229),s=i(758);class r extends s.Interpreter{constructor(t){super(t),this.name="makelangelo",this.lastCommandWasMove=!1,this.serialCommunicationSpeed=57600,this.continueMessage="ok"}initialize(t=!0){this.sendSpecs(),this.sendSetPosition(t?new n.paper.Point(n.Settings.tipibot.homeX,n.Settings.tipibot.homeY-n.Settings.tipibot.penOffset):this.tipibot.getGondolaPosition()),this.sendMaxSpeed(),this.tipibot.initializedCommunication=!0}convertToMakelangeloCoordinates(t){let e=new n.paper.Size(n.Settings.tipibot.width,n.Settings.tipibot.height),i=t.subtract(e.multiply(.5));return i.y*=-1,i}sendSetHome(t=this.tipibot.getHome()){super.sendSetHome(t),this.lastCommandWasMove=!1;let e="Set home: "+(t=this.convertToMakelangeloCoordinates(t)).x.toFixed(2)+", "+t.y.toFixed(2);this.queue("G92 X"+t.x.toFixed(2)+" Y"+t.y.toFixed(2)+"\n",e)}sendAutoHome(t=null){super.sendAutoHome(t),this.lastCommandWasMove=!1,this.queue("G28 XY\n","Auto home.",(()=>this.sendSetPosition((0,n.autoHomePosition)(),t)))}sendSetPosition(t=this.tipibot.getPosition(),e=null){super.sendSetPosition(t),this.lastCommandWasMove=!1;let i="Set position: "+(t=this.convertToMakelangeloCoordinates(t)).x.toFixed(2)+", "+t.y.toFixed(2);this.queue("G92 X"+t.x.toFixed(2)+" Y"+t.y.toFixed(2)+"\n",i,e)}sendMoveDirect(t,e=null){super.sendMoveDirect(t,e),t=this.convertToMakelangeloCoordinates(t);let i=n.Settings.tipibot.maxSpeed*(0,n.mmPerSteps)(),s="Move linear: "+t.x.toFixed(2)+", "+t.y.toFixed(2)+", speed: "+i.toFixed(2),r=this.lastCommandWasMove?"":" F"+i.toFixed(2);this.lastCommandWasMove=!1,this.queue("G1"+r+" X"+t.x.toFixed(2)+" Y"+t.y.toFixed(2)+"\n",s,e)}sendMoveLinear(t,e=0,i=n.Settings.tipibot.maxSpeed,s=null){super.sendMoveLinear(t,e,i,s);let r=i,o="Move linear: "+(t=this.convertToMakelangeloCoordinates(t)).x.toFixed(2)+", "+t.y.toFixed(2)+", speed: "+r.toFixed(2),a=this.lastCommandWasMove?"":" F"+r.toFixed(2);this.lastCommandWasMove=!1,this.queue("G0"+a+" X"+t.x.toFixed(2)+" Y"+t.y.toFixed(2)+"\n",o,s)}sendMoveStation(t=0,e=0,i=0,n=null){super.sendMoveStation(t,e,i,n);let s="Move station: direction: "+t.toFixed(2)+", nSteps"+e.toFixed(2)+", nDelays: "+i.toFixed(2);this.queue("D30 F"+Math.round(t)+" N"+Math.round(e)+" P"+Math.round(i)+"\n",s,n)}sendMaxSpeed(t=n.Settings.tipibot.maxSpeed){this.sendMaxSpeedAndAcceleration(t,n.Settings.tipibot.acceleration)}sendAcceleration(t=n.Settings.tipibot.acceleration){this.sendMaxSpeedAndAcceleration(n.Settings.tipibot.maxSpeed,t)}sendMaxSpeedAndAcceleration(t=n.Settings.tipibot.maxSpeed,e=n.Settings.tipibot.acceleration){this.lastCommandWasMove=!1;let i="Set acceleration: "+e.toFixed(2),s="M201 X"+e.toFixed(2)+" Y"+e.toFixed(2)+" Z"+e.toFixed(2)+"\n";this.queue(s,i)}sendInvertXY(t=n.Settings.tipibot.invertMotorLeft,e=n.Settings.tipibot.invertMotorRight){let i="Invert motors: left: "+t+", right: "+e;this.queue("M170 N0 I"+(t?1:0)+"\n",i),this.queue("M170 N1 I"+(e?1:0)+"\n",i)}sendProgressiveMicrosteps(t=n.Settings.tipibot.progressiveMicrosteps){console.log("error: command not implemented")}sendSize(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height){this.lastCommandWasMove=!1;let i="Send size: "+t.toFixed(2);this.queue("M4 X"+t.toFixed(2)+"\n",i)}sendStepsPerRev(t=n.Settings.tipibot.stepsPerRev){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,t,n.Settings.tipibot.mmPerRev,n.Settings.tipibot.microstepResolution)}sendMmPerRev(t=n.Settings.tipibot.mmPerRev){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,n.Settings.tipibot.stepsPerRev,t,n.Settings.tipibot.microstepResolution)}sendStepMultiplier(t=n.Settings.tipibot.microstepResolution){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,n.Settings.tipibot.stepsPerRev,n.Settings.tipibot.mmPerRev,t)}sendSpecs(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height,i=n.Settings.tipibot.stepsPerRev,s=n.Settings.tipibot.mmPerRev,r=n.Settings.tipibot.microstepResolution){this.lastCommandWasMove=!1;let o=t/2,a=-t/2,l=e/2,h=-e/2,u="Set limit right: "+o.toFixed(2)+", limit left: "+a.toFixed(2)+", limit top: "+l.toFixed(2)+", limit bottom: "+h.toFixed(2),c=t*t+e*e,d="M665 L"+a.toFixed(2)+" R"+o.toFixed(2)+" T"+l.toFixed(2)+" B"+h.toFixed(2)+" S5 H"+c.toFixed(2)+"\n";this.queue(d,u),u="Set limit servo: ",this.queue("M281 P0 L10 U170\n",u),this.sendMaxSpeedAndAcceleration()}sendPause(t,e=null){this.lastCommandWasMove=!1;let i="Wait: "+t,n=Math.floor(t),s=1e3*(n-t);this.queue("G4 S"+s+" P"+n+"\n",i,e)}sendMotorOn(){this.queue("M17\n","Enable motors")}sendMotorOff(){this.queue("M18\n","Disable motors")}sendPenState(t,e=0,i=0,s=null){this.lastCommandWasMove=!1;let r=n.Settings.servo.speed,o="Move pen"+(t==n.Settings.servo.position.up?" up":t==n.Settings.servo.position.down?" down":"")+": "+t+" servo speed: "+r;e>0&&this.sendPause(e),this.queue("M280 P0 S"+t+"\n",o,i<=0?s:void 0),i>0&&this.sendPause(i,s)}sendPenUp(t=(0,n.servoUpAngle)(),e=n.Settings.servo.delay.up.before,i=n.Settings.servo.delay.up.after,s=null){this.sendPenState(t,e,i,s)}sendPenDown(t=(0,n.servoDownAngle)(),e=n.Settings.servo.delay.down.before,i=n.Settings.servo.delay.down.after,s=null){this.sendPenState(t,e,i,s)}sendPenClose(t=n.Settings.servo.position.close,e=null){this.sendPenState(t,0,0,e)}sendPenDrop(t=n.Settings.servo.position.drop,e=null){this.sendPenState(t,0,0,e)}sendChangePen(t,e){let i="";switch(t){case"0xff0000":i="red";break;case"0x00ff00":i="green";break;case"0x0000ff":i="blue";break;case"0x000000":i="black";break;case"0x00ffff":i="cyan";break;case"0xff00ff":i="magenta";break;case"0xffff00":i="yellow";break;case"0xffffff":i="white";break;default:i=t}this.queue("M117\n","Clear message");let n="Pen "+i,s="Click to continue";this.queue("M06 T"+e+"\n","Change pen to "+parseInt(t)),this.queue("M117 "+n+" "+s+"\n",n+" "+s),this.queue("M300 S60 P250\n","Beep"),this.queue("M226\n","Pause for user input"),this.queue("M117\n","Clear message")}sendStop(t=!0){t?this.communication.send("data","M0\n"):(this.queue("M0\n","Stop"),console.log("error: command not implemented"))}}e.Makelangelo=r},388:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PenPlotter=void 0;const n=i(229),s=i(758);class r extends s.Interpreter{constructor(t){super(t),this.name="penplotter",this.continueMessage="ok"}initialize(t=!0){this.sendSpecs(),this.sendSetPosition(t?new n.paper.Point(n.Settings.tipibot.homeX,n.Settings.tipibot.homeY-n.Settings.tipibot.penOffset):this.tipibot.getGondolaPosition()),this.sendMaxSpeed(),this.tipibot.initializedCommunication=!0}sendSetPosition(t=this.tipibot.getPosition()){super.sendSetPosition(t);let e=this.tipibot.cartesianToLengths(t),i=((0,n.mmToSteps)(e),"Set position: "+t.x.toFixed(2)+", "+t.y.toFixed(2));this.queue("M1 Y"+t.y.toFixed(2)+"\n",i)}sendMoveDirect(t,e=null){super.sendMoveDirect(t,e);let i=this.tipibot.cartesianToLengths(t),s=((0,n.mmToSteps)(i),"Move direct: "+t.x.toFixed(2)+", "+t.y.toFixed(2));this.queue("G0 X"+t.x.toFixed(2)+" Y"+t.y.toFixed(2)+"\n",s,e)}sendMoveLinear(t,e=0,i=n.Settings.tipibot.maxSpeed,s=null){super.sendMoveLinear(t,e,i,s);let r=this.tipibot.cartesianToLengths(t),o=((0,n.mmToSteps)(r),"Move linear: "+t.x.toFixed(2)+", "+t.y.toFixed(2)+", min speed: "+e.toFixed(2));this.queue("G1 X"+t.x.toFixed(2)+" Y"+t.y.toFixed(2)+"\n",o,s)}sendMaxSpeed(t=n.Settings.tipibot.maxSpeed){let e="Set max speed: "+t.toFixed(2);this.queue("G0 F"+t.toFixed(2)+"\n",e)}sendAcceleration(t=n.Settings.tipibot.acceleration){console.log("set acceleration: "+t);let e="Set acceleration: "+t.toFixed(2);this.queue("G0 S"+t.toFixed(2)+"\n",e)}sendMaxSpeedAndAcceleration(t=n.Settings.tipibot.maxSpeed,e=n.Settings.tipibot.acceleration){console.log("set speed: "+t),console.log("set acceleration: "+e);let i="Set speed: "+e.toFixed(2)+", set acceleration: "+e.toFixed(2);this.queue("G0 F"+t.toFixed(2)+" S"+e.toFixed(2)+"\n",i)}sendInvertXY(t=n.Settings.tipibot.invertMotorLeft,e=n.Settings.tipibot.invertMotorRight){let i="Invert motors: left: "+t+", right: "+e;this.queue("M12 X"+(t?-1:1)+" Y"+(e?-1:1)+"\n",i)}sendProgressiveMicrosteps(t=n.Settings.tipibot.progressiveMicrosteps){let e="Set progressiveMicrosteps: "+t;this.queue("M13 F"+(t?-1:1)+"\n",e)}sendSize(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height){let i="Send size: "+t.toFixed(2);this.queue("M4 X"+t.toFixed(2)+"\n",i)}sendStepsPerRev(t=n.Settings.tipibot.stepsPerRev){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,t,n.Settings.tipibot.mmPerRev,n.Settings.tipibot.microstepResolution)}sendMmPerRev(t=n.Settings.tipibot.mmPerRev){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,n.Settings.tipibot.stepsPerRev,t,n.Settings.tipibot.microstepResolution)}sendStepMultiplier(t=n.Settings.tipibot.microstepResolution){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,n.Settings.tipibot.stepsPerRev,n.Settings.tipibot.mmPerRev,t)}sendSpecs(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height,i=n.Settings.tipibot.stepsPerRev,s=n.Settings.tipibot.mmPerRev,r=n.Settings.tipibot.microstepResolution){let o="Setup: tipibotWidth: "+t+", stepsPerRevolution: "+i*r+", mmPerRev: "+s+", millimetersPerStep: "+s/(i*r);console.log(o),this.queue("M4 X"+t+" E0.5 S"+i*r+" P"+s+"\n",o)}sendPause(t,e=null){let i="Wait: "+t;this.queue("G4 P"+t+"\n",i,e)}sendMotorOff(){this.queue("M84\n","Disable motors")}convertServoValue(t){return 700+1600*t/180}sendPenState(t,e=0,i=0,s=null){let r="Move pen"+(t==n.Settings.servo.position.up?" up":t==n.Settings.servo.position.down?" down":"")+": "+t;t=this.convertServoValue(t),e>0&&this.sendPause(e),this.queue("M340 P3 S"+t+"\n",r,i<=0?s:void 0),i>0&&this.sendPause(i,s)}sendPenUp(t=(0,n.servoUpAngle)(),e=n.Settings.servo.delay.up.before,i=n.Settings.servo.delay.up.after,s=null){this.sendPenState(t,e,i,s)}sendPenDown(t=(0,n.servoDownAngle)(),e=n.Settings.servo.delay.down.before,i=n.Settings.servo.delay.down.after,s=null){this.sendPenState(t,e,i,s)}sendStop(t=!0){t?this.communication.send("data","M0\n"):this.queue("M0\n","Stop")}}e.PenPlotter=r},24:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Polargraph=void 0;const n=i(229),s=i(758),r={CMD_CHANGELENGTH:"C01,",CMD_CHANGEPENWIDTH:"C02,",CMD_CHANGEMOTORSPEED:"C03,",CMD_CHANGEMOTORACCEL:"C04,",CMD_DRAWPIXEL:"C05,",CMD_DRAWSCRIBBLEPIXEL:"C06,",CMD_DRAWRECT:"C07,",CMD_CHANGEDRAWINGDIRECTION:"C08,",CMD_SETPOSITION:"C09,",CMD_TESTPATTERN:"C10,",CMD_TESTPENWIDTHSQUARE:"C11,",CMD_TESTPENWIDTHSCRIBBLE:"C12,",CMD_PENDOWN:"C13,",CMD_PENUP:"C14,",CMD_DRAWSAWPIXEL:"C15,",CMD_DRAWROUNDPIXEL:"C16,",CMD_CHANGELENGTHDIRECT:"C17,",CMD_TXIMAGEBLOCK:"C18,",CMD_STARTROVE:"C19,",CMD_STOPROVE:"C20,",CMD_SET_ROVE_AREA:"C21,",CMD_LOADMAGEFILE:"C23,",CMD_CHANGEMACHINESIZE:"C24,",CMD_CHANGEMACHINENAME:"C25,",CMD_REQUESTMACHINESIZE:"C26,",CMD_RESETMACHINE:"C27,",CMD_DRAWDIRECTIONTEST:"C28,",CMD_CHANGEMACHINEMMPERREV:"C29,",CMD_CHANGEMACHINESTEPSPERREV:"C30,",CMD_SETMOTORSPEED:"C31,",CMD_SETMOTORACCEL:"C32,",CMD_MACHINE_MODE_STORE_COMMANDS:"C33,",CMD_MACHINE_MODE_EXEC_FROM_STORE:"C34,",CMD_MACHINE_MODE_LIVE:"C35,",CMD_RANDOM_DRAW:"C36,",CMD_SETMACHINESTEPMULTIPLIER:"C37,",CMD_START_TEXT:"C38,",CMD_DRAW_SPRITE:"C39,",CMD_CHANGELENGTH_RELATIVE:"C40,",CMD_SWIRLING:"C41,",CMD_DRAW_RANDOM_SPRITE:"C42,",CMD_DRAW_NORWEGIAN:"C43,",CMD_DRAW_NORWEGIAN_OUTLINE:"C44,",CMD_SETPENLIFTRANGE:"C45,",CMD_SELECT_ROVE_SOURCE_IMAGE:"C46",CMD_RENDER_ROVE:"C47",CMD_ACTIVATE_MACHINE_BUTTON:"C49",CMD_DEACTIVATE_MACHINE_BUTTON:"C50",CMD_DELAY:"C60,"};class o extends s.Interpreter{constructor(t){super(t),this.keepTipibotAwakeInterval=null,this.name="polargraph",this.serialCommunicationSpeed=57600}initialize(t=!0){super.initialize(t),this.sendPenDown(),this.sendPenUp()}send(t){t.data+=String.fromCharCode(10),super.send(t)}queue(t,e,i=null){t.substr(0,3);for(let t in r)r[t].substr(0,3);super.queue(t,e,i)}queueEmpty(){}getMaxSegmentLength(){return 2}sendMoveToNativePosition(t,e,i=null){e=this.tipibot.cartesianToLengths(e),e=(0,n.mmToSteps)(e).divide(n.Settings.tipibot.microstepResolution);let s=null;s=t?r.CMD_CHANGELENGTHDIRECT+Math.round(e.x)+","+Math.round(e.y)+","+this.getMaxSegmentLength()+",END":r.CMD_CHANGELENGTH+Math.round(e.x)+","+Math.round(e.y)+",END",this.queue(s,"direct",i)}sendSetPosition(t=this.tipibot.getPosition()){t=this.tipibot.cartesianToLengths(t);let e=(0,n.mmToSteps)(t).divide(n.Settings.tipibot.microstepResolution),i=r.CMD_SETPOSITION+Math.round(e.x)+","+Math.round(e.y)+",END",s="Set position: "+t.x.toFixed(2)+", "+t.y.toFixed(2);this.queue(i,s)}sendMoveDirect(t,e=null){this.sendMoveToNativePosition(!0,t,e)}sendMoveLinear(t,e=0,i=n.Settings.tipibot.maxSpeed,s=null){this.sendMoveToNativePosition(!0,t,s)}sendMaxSpeed(t=n.Settings.tipibot.maxSpeed,e=n.Settings.tipibot.acceleration){let i="Set max speed: "+t.toFixed(2);this.queue(r.CMD_SETMOTORSPEED+t.toFixed(2)+",1,END",i),i="Set acceleration: "+e.toFixed(2),this.queue(r.CMD_SETMOTORACCEL+e.toFixed(2)+",1,END",i)}sendSize(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height){let i="Set size: "+t.toFixed(2)+","+e.toFixed(2);this.queue(r.CMD_CHANGEMACHINESIZE+t+","+e+",END",i)}sendStepsPerRev(t=n.Settings.tipibot.stepsPerRev){let e="Set steps per rev: "+t;this.queue(r.CMD_CHANGEMACHINESTEPSPERREV+t+",END",e)}sendMmPerRev(t=n.Settings.tipibot.mmPerRev){let e="Set mm per rev: "+t;this.queue(r.CMD_CHANGEMACHINEMMPERREV+t+",END",e)}sendStepMultiplier(t=n.Settings.tipibot.microstepResolution){let e="Set microstepResolution: "+t;this.queue(r.CMD_SETMACHINESTEPMULTIPLIER+t+",END",e)}sendSpecs(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height,i=n.Settings.tipibot.stepsPerRev,s=n.Settings.tipibot.mmPerRev,r=n.Settings.tipibot.microstepResolution){this.sendSize(t,e),this.sendMmPerRev(s),this.sendStepsPerRev(i),this.sendStepMultiplier(r)}sendPause(t,e=null){let i="Wait: "+t;this.queue(r.CMD_DELAY+t+",END",i,e)}sendMotorOff(){}sendPenLiftRange(t=(0,n.servoDownAngle)(),e=(0,n.servoUpAngle)()){let i="Set pen lift range: "+t.toFixed(2)+","+e.toFixed(2);this.queue(r.CMD_SETPENLIFTRANGE+t.toFixed(2)+","+e.toFixed(2)+",1,END",i)}sendPenDelays(t=n.Settings.servo.delay.down.before,e=n.Settings.servo.delay.up.before){}sendPenUp(t=(0,n.servoUpAngle)(),e=n.Settings.servo.delay.up.before,i=n.Settings.servo.delay.up.after,s=null){e>0&&this.sendPause(e);let o="Set pen up: "+(0,n.servoUpAngle)().toFixed(2);this.queue(r.CMD_PENUP+(0,n.servoUpAngle)().toFixed(2)+",END",o),i>0&&this.sendPause(i,s)}sendPenDown(t=(0,n.servoDownAngle)(),e=n.Settings.servo.delay.down.before,i=n.Settings.servo.delay.down.after,s=null){e>0&&this.sendPause(e);let o="Set pen down: "+(0,n.servoDownAngle)().toFixed(2);this.queue(r.CMD_PENDOWN+(0,n.servoDownAngle)().toFixed(2)+",END",o),i>0&&this.sendPause(i,s)}sendStop(){}sendPenWidth(t){let e="Set pen width: "+t.toFixed(2);this.queue(r.CMD_CHANGEPENWIDTH+t.toFixed(2)+",END",e)}}e.Polargraph=o},108:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TipibotInterpreter=void 0;const n=i(229),s=i(388);class r extends s.PenPlotter{constructor(){super(...arguments),this.initializationMessage="Initialize",this.name="tipibot",this.continueMessage="READY"}serialPortConnectionOpened(){}sendSpecs(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height,i=n.Settings.tipibot.stepsPerRev,s=n.Settings.tipibot.mmPerRev,r=n.Settings.tipibot.microstepResolution){let o="Setup: tipibotWidth: "+t+", stepsPerRevolution: "+i+", microstepResolution: "+r+", mmPerRev: "+s+", millimetersPerStep: "+s/(i*r);this.queue("M4 X"+t+" S"+i+" F"+r+" P"+s+"\n",o)}sendSetPosition(t=this.tipibot.getPosition()){super.sendSetPosition(t);let e="Set position: "+t.x.toFixed(2)+", "+t.y.toFixed(2);this.queue("G92 X"+t.x.toFixed(2)+" Y"+t.y.toFixed(2)+"\n",e)}sendServoSpeed(t=n.Settings.servo.speed){let e="Set servo speed: "+t;this.queue("M14 F"+t+"\n",e)}sendFeedback(t=n.Settings.feedback.enable,e=n.Settings.feedback.rate){t||(e=0);let i="Set feedback: "+t+", rate: "+e.toFixed(2);this.queue("M15 F"+e.toFixed(2)+"\n",i)}convertServoValue(t){return Math.round(t)}sendMotorOn(){this.queue("M85\n","Enable motors")}processMessage(t,e){super.processMessage(t,e),0==t.indexOf(this.initializationMessage)&&this.initialize()}}e.TipibotInterpreter=r},107:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Console=void 0;const n=i(755),s=i(776);e.Console=class{constructor(){this.MAX_NUM_MESSAGES=1e3,this.scrollingToBottom=!1,this.skipScrollToBottom=!1,document.addEventListener("CommandListChanged",(t=>this.scrollToBottom()),!1),this.log=console.log.bind(console),this.error=console.error.bind(console),this.info=console.info.bind(console),this.warn=console.warn.bind(console),this.table=console.table.bind(console);let t=(t,e,i)=>{"function"==typeof e&&e.apply(console,t);let s=n("<li>");if("table"==i){let e=this.logTable.apply(this,t);s.append(e)}else for(let e of t){let t=null;if("object"==typeof e)t=n("<p>").append(e).addClass(i);else if(e instanceof Array){let s=JSON.stringify(e);s.length>100&&(s=s.substr(0,20)+"..."+s.substr(s.length-20)),t=n("<p>").append(s).addClass(i)}else t=n("<p>").append(e).addClass(i);s.append(t)}let r=this.listJ;r.children().length>=this.MAX_NUM_MESSAGES&&r.find("li:first-child").remove(),r.append(s),this.scrollToBottom(r)};console.log=(...e)=>t(e,this.log,"log"),console.error=(...e)=>t(e,this.error,"error"),console.info=(...e)=>t(e,this.info,"info"),console.warn=(...e)=>t(e,this.warn,"warn"),console.table=(...e)=>t(e,this.table,"table"),this.gui=new s.GUI({autoPlace:!1}),document.getElementById("info").appendChild(this.gui.getDomElement())}createGUI(){this.folder=this.gui.addFolder("Console"),this.folder.open(),this.listJ=n('<ul id="console-list" class="c-list">'),this.listJ.insertAfter(n(this.folder.gui.domElement).find("li")),this.listJ.scroll((t=>{if(!this.scrollingToBottom){let t=this.listJ.get(0);this.skipScrollToBottom=t.scrollTop+t.clientHeight<t.scrollHeight}this.scrollingToBottom=!1})),this.updateMaxHeight(),window.addEventListener("resize",(()=>this.updateMaxHeight()),!1),n("#info").click((()=>this.updateMaxHeight()))}updateMaxHeight(){this.listJ.css("max-height",n("#info").outerHeight()-this.listJ.offset().top)}scrollToBottom(t=this.listJ){this.updateMaxHeight(),this.skipScrollToBottom||(this.scrollingToBottom=!0,t.scrollTop(t.get(0).scrollHeight))}printTable(t,e){var i=e.length,n=t.length,s=document.createElement("table");s.style.width="100%",s.setAttribute("border","1");var r=document.createElement("thead"),o=document.createElement("td");o.innerHTML="Index",r.appendChild(o);for(var a=0;a<i;a++)(o=document.createElement("td")).innerHTML=e[a],r.appendChild(o);s.appendChild(r);for(var l=0;l<n;l++){var h=document.createElement("tr");let n=document.createElement("td");n.innerHTML=l,h.appendChild(n);for(var u=0;u<i;u++)n=document.createElement("td"),n.innerHTML=t[l][e[u]],h.appendChild(n);s.appendChild(h)}return s}logObject(t){let e=[];for(let i in t)e.push({name:i,value:t[i]});return this.printTable(e,["name","value"])}logTable(...t){var e,i=t[0];return void 0!==i&&(e=Object.keys(i)),this.printTable(i,e)}}},776:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GUI=e.Controller=void 0;const n=i(755),s=i(816);class r{constructor(t,e){this.controller=t,this.gui=e}getDomElement(){return this.controller.domElement}getParentNames(){let t=[],e=this.gui;do{t.push(e.name),e=e.parent}while(null!=e);return t}getParentDomElement(){return this.getDomElement().parentElement.parentElement}contains(t){return this.getParentDomElement().contains(t)}getProperty(){return this.controller.property}getName(){return this.controller.property}getValue(){return this.controller.object[this.controller.property]}onChange(t){return this.controller.onChange(t),this}onFinishChange(t){return this.controller.onFinishChange(t),this}setValue(t,e=!0){if(e)return this.controller.setValue(t);this.setValueNoCallback(t)}setValueNoCallback(t){this.controller.object[this.controller.property]=t,this.controller.updateDisplay()}max(t,e=!1){this.controller.max(t),this.setValue(Math.min(t,this.getValue()),e)}min(t,e=!1){this.controller.min(t),this.setValue(Math.max(t,this.getValue()),e)}step(t){this.controller.step(t)}updateDisplay(){this.controller.updateDisplay()}options(t){return this.controller.options(t)}setName(t){return this.name(t),this}name(t){return this.controller.name(t),this}click(){this.getDomElement().click()}hide(){n(this.getParentDomElement()).hide()}show(){n(this.getParentDomElement()).show()}}e.Controller=r;class o{constructor(t,e,i){this.gui=null!=i&&null!=e?i.gui.addFolder(e):new dat.GUI(t),this.name=e,this.parent=i,this.nameToController=new Map,this.nameToFolder=new Map}static startLoadingAnimation(t=null){n("#loading").removeClass("hidden"),clearTimeout(o.loadingTimeoutID),o.loadingTimeoutID=setTimeout((()=>{n("#loading").addClass("loading"),null!=t&&setTimeout((()=>{t()}),400)}),100)}static stopLoadingAnimation(){n("#loading").removeClass("loading"),clearTimeout(o.loadingTimeoutID),o.loadingTimeoutID=setTimeout((()=>n("#loading").addClass("hidden")),1e3)}getDomElement(){return this.gui.domElement}add(t,e,i,o,a){let l=new r(this.gui.add(t,e,i,o,a),this);this.nameToController.set(e,l);let h=n(l.getDomElement()).find('input[type="text"]').first();return h.length>0&&h.on("focus",(t=>s.keyboard.onInputFocus(l))),l}addButton(t,e){let i={};return i[t]=e,this.add(i,t)}setName(t){n(this.getDomElement()).find("li.title").text(t)}addFileSelectorButton(t,e,i=!0,s){let r=n("<input data-name='file-selector' type='file' class='form-control' name='file[]'  accept='"+e+"' "+(i?"multiple":"")+"/>"),o=this.addButton(t,(t=>r.click()));return r.insertAfter(o.getParentDomElement()),r.hide(),r.change((t=>{s(t),r.val("")})),o}addSlider(t,e,i,n,s){let r={};r[t]=e;let o=this.add(r,t,i,n);return null!=s&&o.step(s),o}addFolder(t){let e=new o(null,t,this);return this.nameToFolder.set(t,e),e}getController(t){return this.nameToController.get(t)}getControllers(){let t=Array.from(this.nameToController);return Array.from(t,(t=>t[1]))}getAllControllers(){let t=this.getControllers();for(let e of this.nameToFolder){let i=e[1];t=t.concat(i.getAllControllers())}return t}getFolder(t){return this.nameToFolder.get(t)}getFolders(){let t=Array.from(this.nameToFolder);return Array.from(t,(t=>t[1]))}hide(){n(this.gui.domElement).hide()}show(){n(this.gui.domElement).show()}open(){this.gui.open()}close(){this.gui.close()}}e.GUI=o,o.loadingTimeoutID=null},816:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initializeKeyboard=e.keyboard=e.VirtualKeyboard=void 0;const n=i(755),s=i(86);i(23);const r=i(229),o=i(925),a={"{x0.25}":.25,"{x1}":1,"{x5}":5,"{x25}":25};class l{constructor(){this.initialValue=null,this.activeController=null,this.enableArrows=!1,this.enableArrowsController=null,this.hideKeyboard();let t={onKeyPress:t=>this.onKeyPress(t),theme:"simple-keyboard hg-theme-default hg-layout-default",physicalKeyboardHighlight:!0,syncInstanceInputs:!0,mergeDisplay:!0,debug:!0};this.keyboard=new s.default(Object.assign(Object.assign({},t),{onChange:t=>this.onChange(t)})),n("#keyboard .close-button").click((()=>this.endInput())),this.keyboardArrows=new s.default(".simple-keyboard-arrows",Object.assign(Object.assign({},t),{layout:{default:["{arrowup}","{arrowleft} {arrowdown} {arrowright}","{x0.25} {x1} {x5} {x25}"]},display:{"{x0.25}":"x0.25","{x1}":"x1","{x5}":"x5","{x25}":"x25"}})),this.enableArrows||n(".simple-keyboard-arrows").hide()}createGUI(t){this.enableArrowsController=t.add(this,"enableArrows").name("Touch Move").onFinishChange((t=>{this.toggleArrows(t)})),r.Settings.enableTouchKeyboard||this.enableArrowsController.hide()}toggleArrows(t){t?(this.activeController&&this.endInput(),this.showKeyboard(),n("#keyboard .characters").hide(),n(".simple-keyboard-arrows").show()):(this.hideKeyboard(),n(".simple-keyboard-arrows").hide())}showKeyboard(){r.Settings.enableTouchKeyboard&&(n("#keyboard").show(),n("#keyboard .characters").show())}hideKeyboard(){n("#keyboard").hide()}onInputFocus(t){r.Settings.enableTouchKeyboard&&(this.activeController=t,this.initialValue=t.getValue(),this.keyboard.setInput(""+t.getValue()),n("#keyboard .input").val(t.getValue()),this.showKeyboard())}onInputBlur(){r.Settings.enableTouchKeyboard&&this.endInput()}onChange(t){if(r.Settings.enableTouchKeyboard&&null!=this.activeController){let e=isNaN(this.activeController.getValue())?t:parseFloat(t);this.activeController.setValueNoCallback(e),n("#keyboard .input").val(t)}}endInput(){if(r.Settings.enableTouchKeyboard){if(null!=this.activeController){let t=this.keyboard.getInput(),e=isNaN(this.activeController.getValue())?t:parseFloat(t);this.activeController.setValue(e),this.activeController.controller.__onFinishChange&&this.activeController.controller.__onFinishChange(e),n("#keyboard .input").val(e),this.activeController=null}this.hideKeyboard()}}onKeyPress(t){"{enter}"==t&&this.endInput(),"{shift}"!==t&&"{lock}"!==t||this.handleShift();for(let e of["{x0.25}","{x1}","{x5}","{x25}"])if(t==e){let t=n('.hg-button[data-skbtn="'+e+'"]'),i=t.hasClass("pressed");n(".hg-button").removeClass("pressed"),i||t.addClass("pressed")}let e=n(".hg-button.pressed").attr("data-skbtn"),i=null!=e?a[e]:1;switch(t){case"{arrowleft}":o.TipibotInteractive.tipibot.moveDirect(o.TipibotInteractive.tipibot.getPosition().add(new r.paper.Point(-i,0)));break;case"{arrowup}":o.TipibotInteractive.tipibot.moveDirect(o.TipibotInteractive.tipibot.getPosition().add(new r.paper.Point(0,-i)));break;case"{arrowright}":o.TipibotInteractive.tipibot.moveDirect(o.TipibotInteractive.tipibot.getPosition().add(new r.paper.Point(i,0)));break;case"{arrowdown}":o.TipibotInteractive.tipibot.moveDirect(o.TipibotInteractive.tipibot.getPosition().add(new r.paper.Point(0,i)))}}handleShift(){let t="default"===this.keyboard.options.layoutName?"shift":"default";this.keyboard.setOptions({layoutName:t})}}e.VirtualKeyboard=l,e.keyboard=null,e.initializeKeyboard=function(){return e.keyboard=new l,e.keyboard}},271:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Pen=e.PenState=e.MoveType=void 0;const n=i(322),s=i(229),r=i(922);var o,a;!function(t){t[t.Direct=0]="Direct",t[t.Linear=1]="Linear"}(o=e.MoveType||(e.MoveType={})),function(t){t[t.Up=0]="Up",t[t.Down=1]="Down",t[t.Dropped=2]="Dropped",t[t.Closed=3]="Closed"}(a=e.PenState||(e.PenState={}));class l{constructor(t,e,i,n){this.state=a.Up,this.angle=s.Settings.servo.position.up,this.dragging=!1,this.initialize(t,e,i,n)}static moveTypeFromMouseEvent(t){return t.altKey?o.Linear:o.Direct}initialize(t,e,i,n){this.group=new s.paper.Group;let r=new s.paper.Point(t,e),o=new s.paper.Point(t,e-i);this.circle=new s.paper.Path.Circle(r,l.RADIUS),this.circle.fillColor=l.UP_COLOR,this.group.addChild(this.circle),this.lines=new s.paper.Path,this.lines.add(new s.paper.Point(0,0)),this.lines.add(o),this.lines.add(new s.paper.Point(n,0)),this.group.addChild(this.lines),this.offsetLine=new s.paper.Path,this.offsetLine.add(o),this.offsetLine.add(r),this.group.addChild(this.offsetLine),this.previousPosition=new s.paper.Point(0,0),this.group.onMouseDrag=t=>this.onMouseDrag(t),this.group.onMouseUp=t=>this.onMouseUp(t)}onMouseDrag(t){this.setPosition(this.circle.position.add(t.delta),!0,!1),this.dragging=!0}onMouseUp(t){this.dragging&&this.setPosition(this.getPosition(),!0,!0,l.moveTypeFromMouseEvent(t)),this.dragging=!1}getPosition(){return this.circle.position.clone()}setPosition(t,e=!0,i=!0,n=o.Direct,a=null){if(null==t||Number.isNaN(t.x)||Number.isNaN(t.y))return;e&&r.Tipibot.tipibot.setPositionSliders(t),i&&(n==o.Direct?r.Tipibot.tipibot.moveDirect(t,a):r.Tipibot.tipibot.moveLinear(t,0,s.Settings.tipibot.maxSpeed,a));let l=new s.paper.Point(t.x,t.y-s.Settings.tipibot.penOffset);this.circle.position=t,this.lines.segments[1].point=l,this.offsetLine.segments[0].point=l,this.offsetLine.segments[1].point=t}tipibotWidthChanged(){this.lines.segments[2].point.x=s.Settings.tipibot.width}penUp(t=(0,s.servoUpAngle)(),e=s.Settings.servo.delay.up.before,i=s.Settings.servo.delay.up.after,r=null){n.Communication.interpreter.sendPenUp(t,e,i,(()=>{this.state=a.Up,this.angle=s.Settings.servo.position.up,null!=r&&r()})),this.circle.fillColor=l.UP_COLOR,this.state=a.Up,this.angle=s.Settings.servo.position.up}penDown(t=(0,s.servoDownAngle)(),e=s.Settings.servo.delay.down.before,i=s.Settings.servo.delay.down.after,r=null){n.Communication.interpreter.sendPenDown(t,e,i,(()=>{this.state=a.Down,this.angle=s.Settings.servo.position.down,null!=r&&r()})),this.circle.fillColor=l.DOWN_COLOR,this.state=a.Down,this.angle=s.Settings.servo.position.down}penClose(t=s.Settings.servo.position.close,e=null){n.Communication.interpreter.sendPenClose(t,(()=>{this.state=a.Closed,this.angle=s.Settings.servo.position.close,null!=e&&e()})),this.circle.fillColor=l.CLOSED_COLOR,this.state=a.Closed,this.angle=s.Settings.servo.position.close}penDrop(t=s.Settings.servo.position.drop,e=null){n.Communication.interpreter.sendPenDrop(t,(()=>{this.state=a.Dropped,this.angle=s.Settings.servo.position.drop,null!=e&&e()})),this.circle.fillColor=l.DROP_COLOR,this.state=a.Dropped,this.angle=s.Settings.servo.position.drop}}e.Pen=l,l.HOME_RADIUS=6,l.RADIUS=6,l.UP_COLOR=new s.paper.Color("rgba(0, 20, 210, 0.25)"),l.DOWN_COLOR=new s.paper.Color("rgba(0, 20, 210, 0.8)"),l.CLOSED_COLOR=new s.paper.Color("rgba(20, 0, 210, 0.8)"),l.DROP_COLOR=new s.paper.Color("rgba(210, 0, 20, 0.8)")},883:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SVGPlot=void 0;const n=i(922),s=i(229),r=i(322),o=i(776),a=i(271),l=i(921);if(s.isServer)var h=(t,e)=>console.log("save",e);class u{constructor(t=null){this.pseudoCurvatureDistance=10,this.currentColorIndex=0,this.nSegments=0,this.currentPath=null,this.plotting=!1,null!=u.svgPlot&&(u.svgPlot.destroy(),u.svgPlot=null),u.svgPlot=this,null!=this.background&&this.background.remove(),null!=this.group&&this.group.remove(),this.group=new s.paper.Group,this.group.sendToBack(),null!=u.currentMatrix&&(this.group.applyMatrix=!1,this.group.matrix=u.currentMatrix),this.item=t,this.item.strokeScaling=!0,this.group.addChild(this.item),this.originalItem=null,this.setBackground(),this.center(),console.log("Collapsing SVG..."),u.collapse(this.item,this.group,this.item.strokeBounds),console.log("SVG collapsed."),this.filter(),this.group.onMouseDrag=t=>this.onMouseDrag(t),document.addEventListener("SettingChanged",(t=>this.onSettingChanged(t)),!1)}static loadImage(t,e=null){let i=s.paper.project.importSVG(t.target.result);new u(i),u.gui.getController("Draw").show(),u.gui.getController("Save GCode").show(),console.log("SVG imported."),o.GUI.stopLoadingAnimation(),null!=e&&e()}static onImageLoad(t,e=null){console.log("Importing SVG..."),o.GUI.startLoadingAnimation((()=>u.loadImage(t,e)))}static handleFileSelect(t){document.dispatchEvent(new CustomEvent("Load SVG")),this.gui.getController("Load SVG").hide(),this.gui.getController("Clear SVG").show();let e=null!=t.dataTransfer?t.dataTransfer.files:t.target.files;this.files=[];for(let t=0;t<e.length;t++){let i=null!=e[t]?e[t]:e.item(t);/^image\//.test(i.type)&&this.files.push(i)}this.fileIndex=0,this.files.length<e.length&&console.info("Warning: some of the selected files are not SVG images, there will not be imported."),this.loadNextFile()}static loadNextFile(t=null){if(this.fileIndex>=this.files.length)return;let e=this.files[this.fileIndex],i=new FileReader;i.onload=e=>this.onImageLoad(e,t),i.readAsText(e)}static plotAndLoadLoop(t=null){null!=this.svgPlot&&this.svgPlot.plot()}static saveGCode(){null!=this.svgPlot&&this.svgPlot.plot(null,!0,!0)}static clearClicked(t){document.dispatchEvent(new CustomEvent("Clear SVG")),this.fileIndex=0,r.Communication.interpreter.clearQueue(),u.gui.getController("Load SVG").show(),u.gui.getController("Clear SVG").hide(),u.svgPlot.destroy(),u.svgPlot=null,u.gui.getController("Draw").name("Draw"),u.gui.getController("Draw").hide(),u.gui.getController("Save GCode").hide()}static drawClicked(t){null!=u.svgPlot&&(u.svgPlot.plotting?(u.gui.getController("Draw").name("Draw"),document.dispatchEvent(new CustomEvent("Stop drawing")),r.Communication.interpreter.sendStop(!0),r.Communication.interpreter.clearQueue(),u.svgPlot.plotting=!1,n.Tipibot.tipibot.goHome()):(u.gui.getController("Draw").name("Stop, clear commands & go home"),document.dispatchEvent(new CustomEvent("Draw")),u.plotAndLoadLoop()))}static saveGCodeClicked(t){if(null!=u.svgPlot){r.Communication.interpreter.sendStop(!0),r.Communication.interpreter.clearQueue(),r.Communication.interpreter.justQueueCommands=!0,u.saveGCode();let t=r.Communication.interpreter.getGCode(),e=new Blob([t],{type:"text/plain;charset=utf-8"});h(e,"gcode.txt"),r.Communication.interpreter.clearQueue(),r.Communication.interpreter.justQueueCommands=!1}}static createGUI(t){u.gui=t.addFolder("Plot"),u.gui.open(),u.gui.add(s.Settings.plot,"optimizeTrajectories").name("Optimize Trajectories").onFinishChange((t=>l.settingsManager.save(!1))),u.gui.add(s.Settings.plot,"disableMotorsOnceFinished").name("Disable motors once finished").onFinishChange((t=>l.settingsManager.save(!1))),u.gui.addFileSelectorButton("Load SVG","image/svg+xml",!0,(t=>u.handleFileSelect(t))),u.gui.addButton("Clear SVG",u.clearClicked).hide(),u.gui.addButton("Draw",u.drawClicked).hide(),u.gui.addButton("Save GCode",u.saveGCodeClicked).hide();let e=u.gui.addFolder("Filter");e.add(s.Settings.plot,"showPoints").name("Show points").onChange(u.createCallback(u.prototype.showPoints,!0)),e.add(s.Settings.plot,"flatten").name("Flatten").onChange(u.createCallback(u.prototype.filter)),e.add(s.Settings.plot,"flattenPrecision",0,10).name("Flatten precision").onChange(u.createCallback(u.prototype.filter)),e.add(s.Settings.plot,"subdivide").name("Subdivide").onChange(u.createCallback(u.prototype.filter)),e.add(s.Settings.plot,"maxSegmentLength",0,100).name("Max segment length").onChange(u.createCallback(u.prototype.filter));let i=u.gui.addFolder("Transform");u.transformFolder=i,i.addButton("Center",u.createCallback(u.prototype.center)),i.addSlider("X",0).onFinishChange(u.createCallback(u.prototype.setX,!0)),i.addSlider("Y",0).onFinishChange(u.createCallback(u.prototype.setY,!0)),i.addButton("Flip horizontally",u.createCallback(u.prototype.flipX)),i.addButton("Flip vertically",u.createCallback(u.prototype.flipY)),i.addButton("Rotate",u.createCallback(u.prototype.rotate)),i.addSlider("Scale",1,.1,5).onChange(u.createCallback(u.prototype.scale,!0))}static createCallback(t,e=!1,i=[]){return n=>{l.settingsManager.save(!1),null!=u.svgPlot&&(e&&i.unshift(n),t.apply(u.svgPlot,i))}}static itemMustBeDrawn(t){return t.strokeWidth>0&&null!=t.strokeColor}static convertShapeToPath(t){if("Shape"!=t.className||!this.itemMustBeDrawn(t))return t;let e=t.toPath(!0);return t.parent.addChildren(t.children),t.remove(),e}static collapseItem(t,e,i=null,n=null){if(t.applyMatrix=!0,"CompoundPath"==(t=this.convertShapeToPath(t)).className)for(let e of t.children)e.strokeColor=t.strokeColor;for(t.remove(),"Path"==t.className&&this.itemMustBeDrawn(t)&&e.addChild(t);null!=t.children&&t.children.length>0;)this.collapseItem(t.firstChild,e,i,n)}static collapse(t,e=null,i=null){if(null==t.children||0==t.children.length)return;let n=t.children.slice();for(let s of n)this.collapseItem(s,t,e,i)}static subdividePath(t,e){if(null!=t.segments)for(let i of t.segments){let t=i.curve;do{t=t.divideAt(e)}while(null!=t)}}static filter(t){for(let e of t.children){if("Path"!=e.className)continue;let t=e;s.Settings.plot.flatten&&t.flatten(s.Settings.plot.flattenPrecision),s.Settings.plot.subdivide&&this.subdividePath(t,s.Settings.plot.maxSegmentLength)}}static splitLongPaths(t){for(let e of t.children){let t=e;t.segments.length>u.nSegmentsPerBatch&&t.splitAt(t.segments[u.nSegmentsPerBatch-1].location)}}setBackground(){null!=this.background&&this.background.remove(),this.background=new s.paper.Path.Rectangle(this.item.bounds),this.background.fillColor=new s.paper.Color("white"),this.background.strokeColor=null,this.background.strokeWidth=0,this.background.sendToBack(),this.background.name="background",this.group.addChild(this.background)}countSegments(){let t=0;for(let e of this.item.children)t+=e.segments.length;return t}warnIfTooManyCommands(){let t=this.countSegments();if(t>u.nSegmentsPerBatch){let e=`Warning: there are ${t} segments to draw. \nOptimizing trajectories and computing speeds (in full speed mode) will take some time to compute \n(but it will optimize drawing time), make sure to check your settings before starting drawing.`;console.info(e)}}onSettingChanged(t){(t.detail.all||"Pen"==t.detail.parentNames[0])&&"penWidth"==t.detail.name&&null!=this.group&&this.updateShape()}onMouseDrag(t){n.Tipibot.tipibot.pen.dragging||this.checkPlotting()||(this.group.position=this.group.position.add(t.delta),this.updatePositionGUI())}updatePositionGUI(){u.transformFolder.getController("X").setValueNoCallback(this.group.bounds.left-n.Tipibot.tipibot.drawArea.bounds.left),u.transformFolder.getController("Y").setValueNoCallback(this.group.bounds.top-n.Tipibot.tipibot.drawArea.bounds.top)}saveItem(){for(let t of this.item.children){let e=t;null!=e.segments&&e.segments.length>1e5&&e.splitAt(e.segments[99999].location)}this.originalItem=this.item.clone({insert:!1})}loadItem(){this.originalItem.position=this.item.position,this.originalItem.applyMatrix=!1,this.originalItem.scaling=this.item.scaling,this.item.remove(),this.item=this.originalItem.clone({insert:!1}),this.group.addChild(this.item)}updateShape(){null!=this.raster&&this.raster.remove(),this.item.strokeWidth=s.Settings.tipibot.penWidth/this.group.scaling.x;for(let t of this.item.children)t.strokeWidth=s.Settings.tipibot.penWidth/this.group.scaling.x;this.item.selected=!1,this.item.visible=!0,this.raster=this.item.rasterize({resolution:s.paper.project.view.resolution}),this.group.addChild(this.raster),this.raster.sendToBack(),null!=this.background&&this.background.sendToBack(),this.item.selected=s.Settings.plot.showPoints,this.item.visible=s.Settings.plot.showPoints}filter(){this.checkPlotting()||(null==this.originalItem&&(s.Settings.plot.subdivide||s.Settings.plot.flatten)?this.saveItem():null!=this.originalItem&&this.loadItem(),console.log("Flattening and subdividing paths..."),u.filter(this.item),console.log("Paths flattenned and subdivided."),console.log("Splitting long paths..."),u.splitLongPaths(this.item),console.log("Paths split."),console.log("There are "+this.item.children.length+" paths in this SVG."),this.warnIfTooManyCommands(),this.updateShape())}findClosestPath(t,e){if("Path"!=t.className||null==t.firstSegment||null==t.lastSegment)return null;let i=null,n=Number.MAX_VALUE,s=!1,r=t.closed?t.firstSegment.point:t.lastSegment.point;for(let o of e.children){let e=o;if(e==t||null==e.segments)continue;let a=e.firstSegment.point.getDistance(r);a<n&&(n=a,i=e,s=!1),a=e.lastSegment.point.getDistance(r),a<n&&(n=a,i=e,s=!0)}return s&&i.reverse(),i}optimizeTrajectories(t){let e=[],i=t.firstChild,n=0;do{i.remove(),e.push(i),i=this.findClosestPath(i,t),n>100&&(console.log("Items to process: "+t.children.length),n=0),n++}while(t.children.length>0&&null!=i);t.addChildren(e)}plot(t=null,e=!0,i=!1){this.plotting=!0,console.log("Generating drawing commands...");let r=this.item.clone();r.applyMatrix=!0,r.transform(this.group.matrix),r.visible=!0,o.GUI.startLoadingAnimation();let a=new Map;for(let t of r.children){let e=t.strokeColor instanceof s.paper.Color?t.strokeColor.toCSS():t.strokeColor,i=a.get(e);null!=i?i.push(t):a.set(e,[t])}for(let[t,e]of a){console.log("color",t,e.length);let i=new s.paper.Group;i.addChildren(e),s.Settings.plot.optimizeTrajectories&&this.optimizeTrajectories(i),r.addChildren(i.children),i.remove()}o.GUI.stopLoadingAnimation(),this.currentPath=r.firstChild;let l=this.getColorCSS(this.currentPath.strokeColor);n.Tipibot.tipibot.sendChangePen(l,this.currentColorIndex++),i?(this.plotGCode(),e&&n.Tipibot.tipibot.goHome(),s.Settings.plot.disableMotorsOnceFinished&&n.Tipibot.tipibot.disableMotors(!0),this.plotting=!1):(this.plotAll(),e?n.Tipibot.tipibot.goHome((()=>this.plotFinished(t))):this.plotFinished(t)),r.remove()}showPoints(t){this.item.selected=t,this.item.visible=t}storeMatrix(){u.currentMatrix=this.group.matrix}checkPlotting(){return!!this.plotting&&(console.error("You cannot apply any filter or transformation while the machine is plotting."),!0)}rotate(){this.checkPlotting()||(this.group.rotate(90),this.updateShape(),this.updatePositionGUI(),this.storeMatrix())}scale(t){this.checkPlotting()||(this.group.applyMatrix=!1,this.group.scaling=new s.paper.Point(Math.sign(this.group.scaling.x)*t,Math.sign(this.group.scaling.y)*t),this.updateShape(),this.updatePositionGUI(),this.storeMatrix())}center(){this.checkPlotting()||(this.group.position=n.Tipibot.tipibot.drawArea.bounds.center,this.updatePositionGUI(),this.storeMatrix())}flipX(){this.checkPlotting()||(this.group.scale(-1,1),this.updateShape(),this.storeMatrix())}flipY(){this.checkPlotting()||(this.group.scale(1,-1),this.updateShape(),this.storeMatrix())}setX(t){this.checkPlotting()||(this.group.position.x=n.Tipibot.tipibot.drawArea.bounds.left+t+this.group.bounds.width/2,this.storeMatrix())}setY(t){this.checkPlotting()||(this.group.position.y=n.Tipibot.tipibot.drawArea.bounds.top+t+this.group.bounds.height/2,this.storeMatrix())}getAngle(t){if(null==t.previous||null==t.point||null==t.next)return 180;let e=t.previous.point.subtract(t.point),i=t.next.point.subtract(t.point),n=e.getDirectedAngle(i);return 180-Math.abs(n)}getPseudoCurvature(t){if(null==t.previous||null==t.point||null==t.next)return 180;let e=this.getAngle(t),i=t.previous,n=i.curve.length;for(;null!=i&&n<this.pseudoCurvatureDistance/2;)e+=this.getAngle(i),i=i.previous,n+=null!=i?i.curve.length:0;for(n=t.curve.length,i=t.next;null!=i.next&&n<this.pseudoCurvatureDistance/2;)e+=this.getAngle(i),i=i.next,n+=null!=i?i.curve.length:0;return Math.max(e,180)}moveTipibotLinear(t){let e=t.point;n.Tipibot.tipibot.moveLinear(e,0,s.Settings.tipibot.drawSpeed,(()=>n.Tipibot.tipibot.pen.setPosition(e,!0,!1)),!1)}plotPath(t){if("Path"==t.className&&u.itemMustBeDrawn(t)&&null!=t.segments){for(let e of t.segments){let i=e.point;e==t.firstSegment?(n.Tipibot.tipibot.lastSentPosition.equals(i)||(n.Tipibot.tipibot.penUp(),n.Tipibot.tipibot.moveDirect(i,(()=>n.Tipibot.tipibot.pen.setPosition(i,!0,!1)),!1)),n.Tipibot.tipibot.penDown()):this.moveTipibotLinear(e)}t.closed&&this.moveTipibotLinear(t.firstSegment)}}getColorCSS(t){return t instanceof s.paper.Color?t.toCSS():t}plotCurrentPath(){this.plotPath(this.currentPath),this.nSegments+=this.currentPath.segments.length;let t=this.currentPath.nextSibling;if(null!=t){let e=this.getColorCSS(this.currentPath.strokeColor),i=this.getColorCSS(t.strokeColor);if(null!=e&&null!=i&&e!=i){let t=n.Tipibot.tipibot.pen.state==a.PenState.Up;n.Tipibot.tipibot.penUp(),n.Tipibot.tipibot.sendChangePen(i,this.currentColorIndex++),t||n.Tipibot.tipibot.penDown()}}this.currentPath=t}plotGCode(){for(this.nSegments=0;null!=this.currentPath;)this.plotCurrentPath()}plotAll(){let t=r.Communication.interpreter.commandQueue.length;for(r.Communication.interpreter.justQueueCommands=!0,this.nSegments=0;null!=this.currentPath;)this.plotCurrentPath();r.Communication.interpreter.justQueueCommands=!1,r.Communication.interpreter.startQueue();let e=[];for(let i=t;i<r.Communication.interpreter.commandQueue.length;i++)e.push(r.Communication.interpreter.commandQueue[i].id);document.dispatchEvent(new CustomEvent("QueueCommands",{detail:e}))}plotFinished(t=null){u.gui.getController("Draw").name("Draw"),this.plotting=!1,null!=t&&t(),s.Settings.plot.disableMotorsOnceFinished&&n.Tipibot.tipibot.disableMotors(!0)}clearData(t){if(t.data=null,t.children)for(let e of t.children)this.clearData(e)}clear(){u.svgPlot==this&&(u.svgPlot=null),null!=this.raster&&(this.raster.remove(),this.raster=null),null!=this.item&&(this.item.remove(),this.item=null),null!=this.originalItem&&(this.originalItem.remove(),this.originalItem=null),null!=this.background&&(this.background.remove(),this.background=null),this.group.removeChildren()}destroy(){this.clear(),null!=this.group&&(this.group.remove(),this.group=null)}}e.SVGPlot=u,u.svgPlot=null,u.gui=null,u.transformFolder=null,u.files=null,u.fileIndex=0,u.currentMatrix=null,u.nSegmentsPerBatch=1e3,u.nSegmentsMax=3*u.nSegmentsPerBatch},349:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SVGPlotStatic=void 0;const n=i(922),s=i(229),r=i(322),o=i(271);s.isServer;class a{constructor(t=null){this.pseudoCurvatureDistance=10,this.currentColorIndex=0,this.nSegments=0,this.currentPath=null,this.plotting=!1,null!=a.svgPlot&&(a.svgPlot.destroy(),a.svgPlot=null),a.svgPlot=this,null!=this.background&&this.background.remove(),null!=this.group&&this.group.remove(),this.group=new s.paper.Group,this.group.sendToBack(),null!=a.currentMatrix&&(this.group.applyMatrix=!1,this.group.matrix=a.currentMatrix),this.item=t,this.item.strokeScaling=!0,this.group.addChild(this.item),this.originalItem=null,this.setBackground(),this.center(),console.log("Collapsing SVG..."),a.collapse(this.item,this.group,this.item.strokeBounds),console.log("SVG collapsed."),this.filter(),this.group.onMouseDrag=t=>this.onMouseDrag(t),document.addEventListener("SettingChanged",(t=>this.onSettingChanged(t)),!1)}static plotAndLoadLoop(t=null){null!=this.svgPlot&&this.svgPlot.plot()}static saveGCode(){null!=this.svgPlot&&this.svgPlot.plot(null,!0,!0)}static itemMustBeDrawn(t){return t.strokeWidth>0&&null!=t.strokeColor}static convertShapeToPath(t){if("Shape"!=t.className||!this.itemMustBeDrawn(t))return t;let e=t.toPath(!0);return t.parent.addChildren(t.children),t.remove(),e}static collapseItem(t,e,i=null,n=null){if(t.applyMatrix=!0,"CompoundPath"==(t=this.convertShapeToPath(t)).className)for(let e of t.children)e.strokeColor=t.strokeColor;for(t.remove(),"Path"==t.className&&this.itemMustBeDrawn(t)&&e.addChild(t);null!=t.children&&t.children.length>0;)this.collapseItem(t.firstChild,e,i,n)}static collapse(t,e=null,i=null){if(null==t.children||0==t.children.length)return;let n=t.children.slice();for(let s of n)this.collapseItem(s,t,e,i)}static subdividePath(t,e){if(null!=t.segments)for(let i of t.segments){let t=i.curve;do{t=t.divideAt(e)}while(null!=t)}}static filter(t){for(let e of t.children){if("Path"!=e.className)continue;let t=e;s.Settings.plot.flatten&&t.flatten(s.Settings.plot.flattenPrecision),s.Settings.plot.subdivide&&this.subdividePath(t,s.Settings.plot.maxSegmentLength)}}static splitLongPaths(t){for(let e of t.children){let t=e;t.segments.length>a.nSegmentsPerBatch&&t.splitAt(t.segments[a.nSegmentsPerBatch-1].location)}}setBackground(){null!=this.background&&this.background.remove(),this.background=new s.paper.Path.Rectangle(this.item.bounds),this.background.fillColor=new s.paper.Color("white"),this.background.strokeColor=null,this.background.strokeWidth=0,this.background.sendToBack(),this.background.name="background",this.group.addChild(this.background)}countSegments(){let t=0;for(let e of this.item.children)t+=e.segments.length;return t}warnIfTooManyCommands(){let t=this.countSegments();if(t>a.nSegmentsPerBatch){let e=`Warning: there are ${t} segments to draw. \nOptimizing trajectories and computing speeds (in full speed mode) will take some time to compute \n(but it will optimize drawing time), make sure to check your settings before starting drawing.`;console.info(e)}}onSettingChanged(t){(t.detail.all||"Pen"==t.detail.parentNames[0])&&"penWidth"==t.detail.name&&null!=this.group&&this.updateShape()}onMouseDrag(t){}saveItem(){for(let t of this.item.children){let e=t;null!=e.segments&&e.segments.length>1e5&&e.splitAt(e.segments[99999].location)}this.originalItem=this.item.clone({insert:!1})}loadItem(){this.originalItem.position=this.item.position,this.originalItem.applyMatrix=!1,this.originalItem.scaling=this.item.scaling,this.item.remove(),this.item=this.originalItem.clone({insert:!1}),this.group.addChild(this.item)}updateShape(){null!=this.raster&&this.raster.remove(),this.item.strokeWidth=s.Settings.tipibot.penWidth/this.group.scaling.x;for(let t of this.item.children)t.strokeWidth=s.Settings.tipibot.penWidth/this.group.scaling.x;this.item.selected=!1,this.item.visible=!0,this.raster=this.item.rasterize({resolution:s.paper.project.view.resolution}),this.group.addChild(this.raster),this.raster.sendToBack(),null!=this.background&&this.background.sendToBack(),this.item.selected=s.Settings.plot.showPoints,this.item.visible=s.Settings.plot.showPoints}filter(){this.checkPlotting()||(null==this.originalItem&&(s.Settings.plot.subdivide||s.Settings.plot.flatten)?this.saveItem():null!=this.originalItem&&this.loadItem(),console.log("Flattening and subdividing paths..."),a.filter(this.item),console.log("Paths flattenned and subdivided."),console.log("Splitting long paths..."),a.splitLongPaths(this.item),console.log("Paths split."),console.log("There are "+this.item.children.length+" paths in this SVG."),this.warnIfTooManyCommands(),this.updateShape())}findClosestPath(t,e){if("Path"!=t.className||null==t.firstSegment||null==t.lastSegment)return null;let i=null,n=Number.MAX_VALUE,s=!1,r=t.closed?t.firstSegment.point:t.lastSegment.point;for(let o of e.children){let e=o;if(e==t||null==e.segments)continue;let a=e.firstSegment.point.getDistance(r);a<n&&(n=a,i=e,s=!1),a=e.lastSegment.point.getDistance(r),a<n&&(n=a,i=e,s=!0)}return s&&i.reverse(),i}optimizeTrajectories(t){let e=[],i=t.firstChild,n=0;do{i.remove(),e.push(i),i=this.findClosestPath(i,t),n>100&&(console.log("Items to process: "+t.children.length),n=0),n++}while(t.children.length>0&&null!=i);t.addChildren(e)}plot(t=null,e=!0,i=!1){this.plotting=!0,console.log("Generating drawing commands...");let r=this.item.clone();r.applyMatrix=!0,r.transform(this.group.matrix),r.visible=!0;let o=new Map;for(let t of r.children){let e=t.strokeColor instanceof s.paper.Color?t.strokeColor.toCSS():t.strokeColor,i=o.get(e);null!=i?i.push(t):o.set(e,[t])}for(let[t,e]of o){console.log("color",t,e.length);let i=new s.paper.Group;i.addChildren(e),s.Settings.plot.optimizeTrajectories&&this.optimizeTrajectories(i),r.addChildren(i.children),i.remove()}this.currentPath=r.firstChild;let a=this.getColorCSS(this.currentPath.strokeColor);n.Tipibot.tipibot.sendChangePen(a,this.currentColorIndex++),i?(this.plotGCode(),e&&n.Tipibot.tipibot.goHome(),s.Settings.plot.disableMotorsOnceFinished&&n.Tipibot.tipibot.disableMotors(!0),this.plotting=!1):(this.plotAll(),e?n.Tipibot.tipibot.goHome((()=>this.plotFinished(t))):this.plotFinished(t)),r.remove()}showPoints(t){this.item.selected=t,this.item.visible=t}storeMatrix(){a.currentMatrix=this.group.matrix}checkPlotting(){return!!this.plotting&&(console.error("You cannot apply any filter or transformation while the machine is plotting."),!0)}rotate(){this.checkPlotting()||(this.group.rotate(90),this.updateShape(),this.storeMatrix())}scale(t){this.checkPlotting()||(this.group.applyMatrix=!1,this.group.scaling=new s.paper.Point(Math.sign(this.group.scaling.x)*t,Math.sign(this.group.scaling.y)*t),this.updateShape(),this.storeMatrix())}center(){this.checkPlotting()||(this.group.position=n.Tipibot.tipibot.drawArea.bounds.center,this.storeMatrix())}flipX(){this.checkPlotting()||(this.group.scale(-1,1),this.updateShape(),this.storeMatrix())}flipY(){this.checkPlotting()||(this.group.scale(1,-1),this.updateShape(),this.storeMatrix())}setX(t){this.checkPlotting()||(this.group.position.x=n.Tipibot.tipibot.drawArea.bounds.left+t+this.group.bounds.width/2,this.storeMatrix())}setY(t){this.checkPlotting()||(this.group.position.y=n.Tipibot.tipibot.drawArea.bounds.top+t+this.group.bounds.height/2,this.storeMatrix())}getAngle(t){if(null==t.previous||null==t.point||null==t.next)return 180;let e=t.previous.point.subtract(t.point),i=t.next.point.subtract(t.point),n=e.getDirectedAngle(i);return 180-Math.abs(n)}getPseudoCurvature(t){if(null==t.previous||null==t.point||null==t.next)return 180;let e=this.getAngle(t),i=t.previous,n=i.curve.length;for(;null!=i&&n<this.pseudoCurvatureDistance/2;)e+=this.getAngle(i),i=i.previous,n+=null!=i?i.curve.length:0;for(n=t.curve.length,i=t.next;null!=i.next&&n<this.pseudoCurvatureDistance/2;)e+=this.getAngle(i),i=i.next,n+=null!=i?i.curve.length:0;return Math.max(e,180)}moveTipibotLinear(t){let e=t.point;n.Tipibot.tipibot.moveLinear(e,0,s.Settings.tipibot.drawSpeed,(()=>n.Tipibot.tipibot.pen.setPosition(e,!0,!1)),!1)}plotPath(t){if("Path"==t.className&&a.itemMustBeDrawn(t)&&null!=t.segments){for(let e of t.segments){let i=e.point;e==t.firstSegment?(n.Tipibot.tipibot.lastSentPosition.equals(i)||(n.Tipibot.tipibot.penUp(),n.Tipibot.tipibot.moveDirect(i,(()=>n.Tipibot.tipibot.pen.setPosition(i,!0,!1)),!1)),n.Tipibot.tipibot.penDown()):this.moveTipibotLinear(e)}t.closed&&this.moveTipibotLinear(t.firstSegment)}}getColorCSS(t){return t instanceof s.paper.Color?t.toCSS():t}plotCurrentPath(){this.plotPath(this.currentPath),this.nSegments+=this.currentPath.segments.length;let t=this.currentPath.nextSibling;if(null!=t){let e=this.getColorCSS(this.currentPath.strokeColor),i=this.getColorCSS(t.strokeColor);if(null!=e&&null!=i&&e!=i){let t=n.Tipibot.tipibot.pen.state==o.PenState.Up;n.Tipibot.tipibot.penUp(),n.Tipibot.tipibot.sendChangePen(i,this.currentColorIndex++),t||n.Tipibot.tipibot.penDown()}}this.currentPath=t}plotGCode(){for(this.nSegments=0;null!=this.currentPath;)this.plotCurrentPath()}plotAll(){let t=r.Communication.interpreter.commandQueue.length;for(r.Communication.interpreter.justQueueCommands=!0,this.nSegments=0;null!=this.currentPath;)this.plotCurrentPath();r.Communication.interpreter.justQueueCommands=!1,r.Communication.interpreter.startQueue();let e=[];for(let i=t;i<r.Communication.interpreter.commandQueue.length;i++)e.push(r.Communication.interpreter.commandQueue[i].id);document.dispatchEvent(new CustomEvent("QueueCommands",{detail:e}))}plotFinished(t=null){this.plotting=!1,null!=t&&t(),s.Settings.plot.disableMotorsOnceFinished&&n.Tipibot.tipibot.disableMotors(!0)}clearData(t){if(t.data=null,t.children)for(let e of t.children)this.clearData(e)}clear(){a.svgPlot==this&&(a.svgPlot=null),null!=this.raster&&(this.raster.remove(),this.raster=null),null!=this.item&&(this.item.remove(),this.item=null),null!=this.originalItem&&(this.originalItem.remove(),this.originalItem=null),null!=this.background&&(this.background.remove(),this.background=null),this.group.removeChildren()}destroy(){this.clear(),null!=this.group&&(this.group.remove(),this.group=null)}}e.SVGPlotStatic=a,a.svgPlot=null,a.files=null,a.fileIndex=0,a.currentMatrix=null,a.nSegmentsPerBatch=1e3,a.nSegmentsMax=3*a.nSegmentsPerBatch},781:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CommeUnDesseinInteractive=void 0;const n=i(504),s=i(925),r=i(960);class o extends n.CommeUnDessein{constructor(t=!1){super(t)}createGUI(t){let e="Comme un dessein";this.testMode&&(e+=" (Test mode)");let i=t.addFolder(e);i.add(this,"origin").onFinishChange((t=>localStorage.setItem(n.StorageKeys.Origin,t))),i.add(this,"mode").onFinishChange((t=>localStorage.setItem(n.StorageKeys.Mode,t))),i.add(this,"secret").onFinishChange((t=>localStorage.setItem(n.StorageKeys.CommeUnDesseinSecret,t))),i.add(this,"serverMode").onFinishChange((t=>localStorage.setItem(n.StorageKeys.CommeUnDesseinServerMode,t))),n.CommeUnDesseinSize.width=parseInt(window.localStorage.getItem("commeUnDesseinWidth"))||s.TipibotInteractive.tipibot.drawArea.bounds.width,n.CommeUnDesseinSize.height=parseInt(window.localStorage.getItem("commeUnDesseinHeight"))||s.TipibotInteractive.tipibot.drawArea.bounds.height,i.add(n.CommeUnDesseinSize,"width",0,5e3,1).name("Width").onFinishChange((t=>{window.localStorage.setItem("commeUnDesseinWidth",t)})),i.add(n.CommeUnDesseinSize,"height",0,5e3,1).name("Height").onFinishChange((t=>{window.localStorage.setItem("commeUnDesseinHeight",t)})),this.startButton=i.addButton("Start",(()=>this.toggleStart()))}toggleStart(){this.started?this.startButton.setName("Start"):this.startButton.setName("Stop, clear queue & go home"),super.toggleStart()}setDrawingStatusDrawn(t){r.visualFeedback.paths.children.length>0&&r.visualFeedback.paths.removeChildren(),super.setDrawingStatusDrawn(t)}}e.CommeUnDesseinInteractive=o},504:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CommeUnDessein=e.StorageKeys=e.CommeUnDesseinSize=void 0;const n=i(229),s=i(349),r=i(322),o=i(922);e.CommeUnDesseinSize=new n.paper.Size(4e3,3e3);let a=function(t){let i=o.Tipibot.tipibot.drawArea.bounds,s=new n.paper.Point(-e.CommeUnDesseinSize.width/2,-e.CommeUnDesseinSize.height/2);const r=new n.paper.Rectangle(s,e.CommeUnDesseinSize);return t.subtract(r.topLeft).divide(r.size).multiply(i.size).add(i.topLeft)},l="/ajaxCallNoCSRF/";var h;e.StorageKeys={Mode:"Mode",Origin:"Origin",CommeUnDesseinSecret:"CommeUnDesseinSecret",CommeUnDesseinServerMode:"CommeUnDesseinServerMode"},function(t){t[t.NextDrawing=0]="NextDrawing",t[t.RequestedNextDrawing=1]="RequestedNextDrawing",t[t.Drawing=2]="Drawing",t[t.SetStatus=3]="SetStatus",t[t.RequestedSetStatus=4]="RequestedSetStatus"}(h||(h={}));class u{constructor(t=!1){this.mode="CommeUnDessein",this.origin="",this.secret="******",this.state=h.NextDrawing,this.started=!1,this.serverMode=!0,this.timeoutID=null,this.settings={mode:"",origin:"",secret:""},this.testMode=t,this.mode=localStorage.getItem(e.StorageKeys.Mode)||"CommeUnDessein",this.origin=localStorage.getItem(e.StorageKeys.Origin)||"";let i=localStorage.getItem(e.StorageKeys.CommeUnDesseinSecret);null!=i&&(this.secret=i)}static startCommeUnDessein(){new u(!1).requestNextDrawing()}toggleStart(){this.started?this.stopAndClear():(document.cookie.indexOf("csrftoken")<0&&console.log("Old Warning (which you can ignore safely): the Comme un dessein csrf token cookie is not present, please visit http://commeundessein.co/ before starting Comme un Dessein"),this.requestNextDrawing()),this.started=!this.started}stopAndClear(){null!=s.SVGPlotStatic.svgPlot&&s.SVGPlotStatic.svgPlot.destroy(),r.Communication.interpreter.sendStop(!0),r.Communication.interpreter.clearQueue(),o.Tipibot.tipibot.goHome(),this.state=h.NextDrawing,clearTimeout(this.timeoutID)}requestNextDrawing(){if(this.state!=h.NextDrawing)return void console.error("CommeUnDessein trying to request next drawing while not in NextDrawing state");let t={cityName:this.mode,secret:this.secret},e=this.testMode?"getNextTestDrawing":"getNextValidatedDrawing",i={data:JSON.stringify({function:e,args:t})};this.state=h.RequestedNextDrawing,console.log("Request next drawing...");let n=this.origin+l;$.ajax({method:"POST",url:n,data:i}).done((t=>{if(this.testMode&&console.log(t),"no path"==t.message)return this.state=h.NextDrawing,console.log("There are no path to draw. Request next drawing in a few seconds..."),void(this.started&&(clearTimeout(this.timeoutID),this.timeoutID=setTimeout((()=>this.requestNextDrawing()),2e3)));this.state==h.RequestedNextDrawing?this.drawSVG(t):console.error("CommeUnDessein trying to set to draw while not in RequestedNextDrawing state")})).fail((t=>{console.error("getNextValidatedDrawing request failed"),console.error(t),this.state=h.NextDrawing,this.started&&(clearTimeout(this.timeoutID),this.timeoutID=setTimeout((()=>this.requestNextDrawing()),2e3))}))}drawSVG(t){if("error"==t.state)return void console.log(t);this.state=h.Drawing,this.currentDrawing=t;let e=new n.paper.Group;n.paper.project.importSVG(t.svg,((i,r)=>{if(0!=i.visible){for(let t of i.children){if("Path"!=t.className)continue;let i=t.strokeColor;if(t.strokeWidth<=.2||t.strokeColor.equals(new n.paper.Color("white"))||null==t.strokeColor||t.opacity<=.1||i.alpha<=.2||!t.visible)continue;let s=t.clone();s.flatten(n.Settings.plot.flattenPrecision);for(let t of s.segments)t.point=a(t.point);e.addChild(s)}i.remove(),null!=s.SVGPlotStatic.svgPlot&&s.SVGPlotStatic.svgPlot.destroy(),s.SVGPlotStatic.svgPlot=new s.SVGPlotStatic(e),s.SVGPlotStatic.svgPlot.plot((()=>this.setDrawingStatusDrawn(t.pk)))}else console.error("When receiving next validated drawing: while importing SVG: the imported item is not visible: ignore.")}))}setDrawingStatusDrawn(t){if(this.state!=h.Drawing)return void console.error("CommeUnDessein trying to setDrawingStatusDrawn while not in Drawing state");let e={pk:t,secret:this.secret},i=this.testMode?"setDrawingStatusDrawnTest":"setDrawingStatusDrawn",n={data:JSON.stringify({function:i,args:e})};this.state=h.RequestedSetStatus,this.testMode&&console.log("setDrawingStatusDrawn");let s=this.origin+l;$.ajax({method:"POST",url:s,data:n}).done((t=>{console.log(t),this.testMode&&console.log(t),"error"!=t.state?this.state==h.RequestedSetStatus?(this.state=h.NextDrawing,this.started&&this.requestNextDrawing()):console.error("CommeUnDessein trying to requestNextDrawing while not in RequestedSetStatus state"):console.error(t)})).fail((e=>{console.error("setDrawingStatusDrawn request failed"),console.error(e),this.state=h.Drawing,this.started&&this.setDrawingStatusDrawn(t)}))}}e.CommeUnDessein=u},888:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FileManager=void 0;const n=i(755),s=i(322),r=i(883);e.FileManager=class{constructor(){this.saveFileName="drawing.txt",document.addEventListener("ServerMessage",(t=>this.onServerMessage(t.detail)),!1),this.printingFileName=null}createGUI(t){this.gui=t.addFolder("File Manager"),this.gui.add(this,"saveFileName").name("File name"),this.gui.addButton("Save file",(()=>this.saveFile())),this.filesFolder=this.gui.addFolder("Files"),this.listJ=n('<ul id="console-list" class="c-list">'),this.listJ.insertAfter(n(this.filesFolder.gui.domElement).find("li"))}saveFile(){null!=r.SVGPlot.svgPlot?s.Communication.interpreter.commandQueue.length>0?console.error("Command queue is not empty ; please finish / empty queue before saving a file."):(s.Communication.communication.send("write-file",this.saveFileName),r.SVGPlot.plotAndLoadLoop((()=>s.Communication.communication.send("close-file")))):console.error("No SVG loaded.")}exportFile(t,e,i,n,s){let r=t+"_"+e+".svg";console.log("Exporting "+r+"...");let o=i.exportSVG({asString:!0}),a=new Blob([o],{type:"image/svg+xml"});console.log("Exported "+r+"."),n.file(r,a,{}),s.removeChildren()}listFiles(){s.Communication.communication.send("list-files")}createFileItem(t){let e=n("<li>").attr("id",t),i=n("<div>").append(t).addClass("file-name");e.append(i);let s=n("<button>Print</button>").addClass("print");s.click((e=>this.printFileItem(t))),e.append(s);let r=n("<button>x</button>").addClass("close");return r.click((e=>this.removeFileItem(t))),e.append(r),e}printFileItem(t){null==this.printingFileName?(this.listJ.find("#"+t).find(".print").text("Cancel print"),s.Communication.communication.send("print-file",t),this.printingFileName=t):this.printingFileName==t?(this.listJ.find("#"+t).find(".print").text("Print"),s.Communication.communication.send("cancel-print-file",t),this.printingFileName=null):console.error("The file "+this.printingFileName+" is already being printed.")}removeFileItem(t){this.listJ.find("#"+t).remove(),s.Communication.communication.send("delete-file",t)}onServerMessage(t){if("files"==t.type){this.listJ.children().remove();for(let e of t.data)this.createFileItem(e)}else"file-printed"==t.type&&(this.listJ.find("#"+t.data).find(".print").text("Print"),console.info("File "+t.data+" printed."))}}},50:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GCodeViewer=void 0;const n=i(229),s=i(925);e.GCodeViewer=class{constructor(){this.fileName=null,this.group=new n.paper.Group}handleFileSelect(t){let e=null!=t.dataTransfer?t.dataTransfer.files:t.target.files;for(let t=0;t<e.length;t++){let i=null!=e[t]?e[t]:e.item(t),n=new FileReader;n.onload=t=>this.onGCodeLoad(t.target.result,i.name),n.readAsText(i);break}}convertFromMakelangeloCoordinates(t){let e=new n.paper.Size(n.Settings.tipibot.width,n.Settings.tipibot.height);return t.y*=-1,t.add(e.multiply(.5))}onGCodeLoad(t,e){this.fileName=e;let i=t.split("\n"),r=null,o=null;for(let t of i)if(0==t.indexOf("G0")&&t.indexOf("Z")>0){let e=t.split(" ");for(let t of e)if(0==t.indexOf("Z")){let e=parseFloat(t.substr(1));if(null!=r||null!=o){e>r?o=e:r=e;break}r=e,o=e}}let a=s.TipibotInteractive.tipibot.getHome(),l=new n.paper.Color(0,0,0),h=!0,u=null,c=null;for(let t of i){if(0==t.indexOf("G0")){let e=t.split(" "),i={};for(let t of e)i[t[0]]=parseFloat(t.substr(1));if(null!=i.Z&&(i.Z!=u&&(u=i.Z,h=!h),h?c=null:(c=new n.paper.Path,c.strokeColor=l,c.strokeWidth=1,c.add(a),this.group.addChild(c))),null!=i.X||null!=i.Y){let t=null!=i.X?i.X+.5*n.Settings.tipibot.width:a.x,e=null!=i.Y?-i.Y+.5*n.Settings.tipibot.height:a.y;a=new n.paper.Point(t,e),h||null==c||c.add(a)}}0==t.indexOf("M117 Change pen to ")&&(t=t.replace("M117 Change pen to ","").replace("Click to continue",""),l=new n.paper.Color(t))}}createGUI(t){this.gui=t.addFolder("GCode Viewer"),this.gui.addFileSelectorButton("Open GCode","text/*",!1,(t=>this.handleFileSelect(t))),this.gui.addButton("Save to SVG",(()=>this.saveSVG())),this.gui.addButton("Clear",(()=>this.clear()))}saveSVG(){var t=document.createElement("div"),e={width:n.Settings.drawArea.width,height:n.Settings.drawArea.height};let i=s.TipibotInteractive.tipibot.computeDrawArea();var r=new Two(e).appendTo(t);for(let t of this.group.children){let e=new Array;for(let n of t.segments)e.push(new Two.Anchor(n.point.x-i.left,n.point.y-i.top,n.handleIn.x,n.handleIn.y,n.handleOut.x,n.handleOut.y,"M"));let n=r.makePath(e,!1);n.linewidth=t.strokeWidth,n.stroke=t.strokeColor.toCSS()}r.update(),t.firstElementChild.setAttribute("xmlns","http://www.w3.org/2000/svg");var o=t.innerHTML;let a=new Blob([o],{type:"image/svg+xml"}),l=URL.createObjectURL(a),h=document.createElement("a");document.body.appendChild(h),h.download=this.fileName+".svg",h.href=l,h.click(),document.body.removeChild(h)}clear(){this.group.removeChildren()}}},756:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LiveDrawing=void 0;const n=i(755),s=i(229),r=i(921),o=i(322),a=i(925);e.LiveDrawing=class{constructor(){this.liveDrawing=!1,this.mouseDown=!1,this.undoRedo=!0,this.undoRedoButtons=!1,this.mustClearCommandQueueOnMouseUp=!1,document.body.addEventListener("mousedown",(t=>this.onMouseDown(t))),document.body.addEventListener("mousemove",(t=>this.onMouseMove(t))),document.body.addEventListener("mouseup",(t=>this.onMouseUp(t))),document.body.addEventListener("mouseleave",(t=>this.onMouseLeave(t))),document.body.addEventListener("keydown",(t=>this.onKeyDown(t))),document.body.addEventListener("keyup",(t=>this.onKeyUp(t))),window.addEventListener("resize",(t=>this.windowResize(t))),document.addEventListener("QueueCommand",(t=>this.queueCommand(t.detail)),!1),document.addEventListener("SendCommand",(t=>this.sendCommand(t.detail)),!1),document.addEventListener("CommandExecuted",(t=>this.commandExecuted(t.detail)),!1),document.addEventListener("ClearQueue",(t=>this.clearQueue()),!1),this.mode="4 Symmetries",this.nRepetitions=1,this.commandQueues=[],this.undoneCommandQueues=[]}setRenderer(t){this.renderer=t}createGUI(t){let e=t.addFolder("Live drawing");this.toggleLiveDrawingButton=e.addButton("Start",(t=>this.toggleLiveDrawing())),e.add(this,"undoRedo").name("Undo / Redo"),e.add(this,"undoRedoButtons").name("Display buttons"),e.add({Mode:this.mode},"Mode",["None","2 Symmetries","4 Symmetries","N. Repetitions"]).onFinishChange((t=>this.renderAxes(t))),e.addSlider("N. Repetitions",1,1,10,1).onChange((t=>{this.nRepetitions=t,this.renderAxes(this.mode)})),e.addButton("Clear drawing",(t=>this.clearDrawing())),e.addButton("Undo",(t=>this.undo())),e.addButton("Redo",(t=>this.redo())),e.addButton("Export SVG",(t=>this.exportSVG()))}clearDrawing(){this.drawing.removeChildren()}exportSVG(){let t=this.project.exportSVG({asString:!0}),e=new Blob([t],{type:"image/svg+xml"}),i=URL.createObjectURL(e),n=document.createElement("a");document.body.appendChild(n),n.download="result.svg",n.href=i,n.click(),document.body.removeChild(n)}renderAxes(t){this.mode=t,this.axes.removeChildren();let e=a.TipibotInteractive.tipibot.drawArea.bounds;if("None"==t);else if("2 Symmetries"==t||"4 Symmetries"==t){let i=new s.paper.Path;i.strokeColor=new s.paper.Color("black"),i.strokeWidth=1,i.dashArray=[5,5],i.add(e.topCenter),i.add(e.bottomCenter),this.axes.addChild(i);let n=i.clone();if(n.firstSegment.point=e.leftCenter,n.lastSegment.point=e.rightCenter,this.axes.addChild(n),"4 Symmetries"==t){let t=i.clone();t.firstSegment.point.x-=e.height<e.width?e.height/2:e.width/2,t.lastSegment.point.x+=e.height<e.width?e.height/2:e.width/2,this.axes.addChild(t);let n=i.clone();n.firstSegment.point.x+=e.height<e.width?e.height/2:e.width/2,n.lastSegment.point.x-=e.height<e.width?e.height/2:e.width/2,this.axes.addChild(n)}}else if("N. Repetitions"==t)for(let t=0;t<this.nRepetitions;t++){let i=new s.paper.Path;i.strokeColor=new s.paper.Color("black"),i.strokeWidth=1,i.dashArray=[5,5];let n=e.center;i.add(n),i.add(e.bottomCenter.rotate(360*t/this.nRepetitions,n)),this.axes.addChild(i)}}windowResize(t=null){if(null==this.canvasJ)return;let e=window.innerWidth,i=window.innerHeight;this.canvasJ.width(e),this.canvasJ.height(i),s.paper.project.view.viewSize=new s.paper.Size(e,i),this.renderer.centerOnTipibot(this.drawArea.bounds,!0,this.canvasJ.get(0)),this.project.view.center=this.drawArea.bounds.center}startLiveDrawing(){if(r.settingsManager.settingsFolder.getController("disableCommandList").setValue(!0),null==this.canvasJ){this.divJ=n("<div>"),this.canvasJ=n("<canvas>");let t=1e6;this.canvasJ.css({position:"absolute",top:0,left:0,right:0,bottom:0,"z-index":t++,width:window.innerWidth,height:window.innerHeight,background:"white"}),this.divJ.append(this.canvasJ),this.footerJ=n("<div>").css({position:"absolute",bottom:0,left:0,right:0,display:"flex","flex-direction":"row","justify-content":"center","z-index":t++});let e={width:"200px",height:"40px","margin-bottom":"20px","user-select":"none"};this.undoButtonJ=n("<button>").html("&#8592;").css(e).click((()=>this.left())),this.redoButtonJ=n("<button>").html("&#8594;").css(e).click((()=>this.right())),this.footerJ.append(this.undoButtonJ),this.footerJ.append(this.redoButtonJ),this.divJ.append(this.footerJ),n("body").append(this.divJ),this.project=new s.paper.Project(this.canvasJ.get(0)),this.project.activate(),this.axes=new s.paper.Group,this.drawing=new s.paper.Group,this.currentDrawing=new s.paper.Group,this.drawArea=new s.paper.Path.Rectangle(a.TipibotInteractive.tipibot.drawArea.bounds),this.drawArea.strokeColor=new s.paper.Color("black"),this.drawArea.strokeWidth=1,this.undoRedoButtons||(this.undoButtonJ.hide(),this.redoButtonJ.hide()),this.windowResize()}else this.divJ.show(),this.project.activate(),this.undoRedoButtons?(this.undoButtonJ.show(),this.redoButtonJ.show()):(this.undoButtonJ.hide(),this.redoButtonJ.hide());this.renderAxes(this.mode),a.TipibotInteractive.tipibot.ignoreKeyEvents=!0,this.renderer.ignoreWindowResize=!0}stopLiveDrawing(){this.divJ.hide(),s.paper.projects[0].activate(),this.axes.removeChildren(),a.TipibotInteractive.tipibot.ignoreKeyEvents=!1,this.renderer.ignoreWindowResize=!1,this.renderer.windowResize()}toggleLiveDrawing(){this.liveDrawing=!this.liveDrawing,this.toggleLiveDrawingButton.setName(this.liveDrawing?"Stop":"Start"),this.liveDrawing?this.startLiveDrawing():this.stopLiveDrawing()}createNewCommandQueue(){let t={commands:new Array,paths:new Array};return this.commandQueues.push(t),t}eventWasOnGUI(t){return n.contains(document.getElementById("gui"),t.target)||n.contains(document.getElementById("info"),t.target)||n.contains(this.footerJ.get(0),t.target)}onMouseDown(t){if(!this.liveDrawing||this.eventWasOnGUI(t))return;let e=this.renderer.getWorldPosition(t);if(!a.TipibotInteractive.tipibot.drawArea.bounds.contains(e))return;this.mouseDown=!0;let i=this.undoRedo?this.createNewCommandQueue():null;this.currentLine=new s.paper.Path,this.currentLine.strokeWidth=s.Settings.tipibot.penWidth,this.currentLine.strokeColor=new s.paper.Color("green"),this.currentLine.add(e),this.undoRedo?(this.undoneCommandQueues=[],a.TipibotInteractive.tipibot.moveDirect(e),a.TipibotInteractive.tipibot.penDown(),this.drawing.addChild(this.currentLine),i.paths.push(this.currentLine)):this.currentDrawing.addChild(this.currentLine)}onMouseMove(t){if(this.liveDrawing&&!this.eventWasOnGUI(t)&&this.mouseDown){let e=this.renderer.getWorldPosition(t);if(!a.TipibotInteractive.tipibot.drawArea.bounds.contains(e)||this.undoRedo&&e.getDistance(this.currentLine.lastSegment.point)<15)return;this.undoRedo&&a.TipibotInteractive.tipibot.moveLinear(e),this.currentLine.add(e)}}addLines(t,e){this.undoRedo?(this.drawing.addChild(t),this.drawLines(t),e.paths.push(t)):this.currentDrawing.addChild(t)}pathDrawn(t){t.strokeColor=new s.paper.Color("black")}penUp(t){a.TipibotInteractive.tipibot.penUp(void 0,void 0,void 0,(()=>this.pathDrawn(t)))}drawLines(t){a.TipibotInteractive.tipibot.penUp(),a.TipibotInteractive.tipibot.moveDirect(t.firstSegment.point),a.TipibotInteractive.tipibot.penDown();for(let e of t.segments)a.TipibotInteractive.tipibot.moveLinear(e.point);this.penUp(t)}onMouseUp(t){if(!this.liveDrawing||this.eventWasOnGUI(t))return;let e=this.renderer.getWorldPosition(t);if(!a.TipibotInteractive.tipibot.drawArea.bounds.contains(e))return;this.undoRedo&&a.TipibotInteractive.tipibot.moveLinear(e),this.currentLine.add(e),this.mouseDown=!1,this.undoRedo?this.penUp(this.currentLine):(this.currentLine.simplify(),this.currentLine.flatten(4.25));let i=this.commandQueues[this.commandQueues.length-1];if("None"==this.mode);else if("2 Symmetries"==this.mode||"4 Symmetries"==this.mode){let t=this.currentLine.clone();if(t.pivot=a.TipibotInteractive.tipibot.drawArea.bounds.center,t.scaling.y=-1,this.addLines(t,i),t=this.currentLine.clone(),t.pivot=a.TipibotInteractive.tipibot.drawArea.bounds.center,t.scaling.x=-1,this.addLines(t,i),t=this.currentLine.clone(),t.pivot=a.TipibotInteractive.tipibot.drawArea.bounds.center,t.scaling.x=-1,t.scaling.y=-1,this.addLines(t,i),"4 Symmetries"==this.mode){let t=this.currentLine.clone();t.pivot=a.TipibotInteractive.tipibot.drawArea.bounds.center,t.rotate(90),this.addLines(t,i),t=this.currentLine.clone(),t.pivot=a.TipibotInteractive.tipibot.drawArea.bounds.center,t.rotate(90),t.scaling.x=-1,this.addLines(t,i),t=this.currentLine.clone(),t.pivot=a.TipibotInteractive.tipibot.drawArea.bounds.center,t.rotate(90),t.scaling.y=-1,this.addLines(t,i),t=this.currentLine.clone(),t.pivot=a.TipibotInteractive.tipibot.drawArea.bounds.center,t.rotate(90),t.scaling.x=-1,t.scaling.y=-1,this.addLines(t,i)}}else if("N. Repetitions"==this.mode)for(let t=1;t<this.nRepetitions;t++){let e=this.currentLine.clone();e.pivot=a.TipibotInteractive.tipibot.drawArea.bounds.center,e.rotate(360*t/this.nRepetitions),this.addLines(e,i)}if(this.mustClearCommandQueueOnMouseUp&&1==this.commandQueues.length){this.mustClearCommandQueueOnMouseUp=!1;for(let t of this.commandQueues[0].paths)t.strokeColor=new s.paper.Color("blue");this.commandQueues=[],this.createNewCommandQueue()}}onMouseLeave(t){this.liveDrawing}onKeyDown(t){if(this.liveDrawing)switch(t.keyCode){case 37:this.left();break;case 39:this.right();break;case 27:this.toggleLiveDrawing()}}onKeyUp(t){this.liveDrawing}undo(){if(!this.liveDrawing)return;let t=this.commandQueues.pop();if(null!=t){this.undoneCommandQueues.push(t);for(let e of t.commands)o.Communication.interpreter.removeCommand(e.id),document.dispatchEvent(new CustomEvent("CancelCommand",{detail:e}));for(let e of t.paths)e.remove()}}redo(){if(!this.liveDrawing)return;let t=this.undoneCommandQueues.pop();if(null!=t){this.createNewCommandQueue();for(let e of t.commands)o.Communication.interpreter.queue(e.data,e.message,e.callback);for(let e of t.paths)this.drawing.addChild(e),this.commandQueues[this.commandQueues.length-1].paths.push(e)}}left(){this.undoRedo?this.undo():this.currentDrawing.removeChildren()}right(){if(this.undoRedo)this.redo();else{for(let t of this.currentDrawing.children.slice())t.strokeColor=new s.paper.Color("black"),this.drawing.addChild(t),this.drawLines(t);this.currentDrawing.removeChildren()}}removeCommand(t,e){let i=t.findIndex((t=>t.id==e));i>=0&&t.splice(i,1)}removeCommandFromQueues(t){for(let e of this.commandQueues)for(let i of e.commands)i.id==t&&this.removeCommand(e.commands,t)}queueCommand(t){this.liveDrawing&&this.undoRedo&&this.commandQueues[this.commandQueues.length-1].commands.push(t)}sendCommand(t){if(this.liveDrawing&&this.undoRedo)for(let e of this.commandQueues)for(let i of e.commands)if(t==i){console.log("SEND");let t=this.commandQueues.findIndex((t=>t==e));t>=0&&(!this.mouseDown||1!=this.commandQueues.length)?this.commandQueues.splice(t,1):t>=0&&this.mouseDown&&1==this.commandQueues.length&&(this.mustClearCommandQueueOnMouseUp=!0),this.commandQueues.length<=0&&this.createNewCommandQueue();for(let t of e.paths)t.strokeColor=new s.paper.Color("blue");return}}commandExecuted(t){this.liveDrawing&&this.undoRedo&&this.removeCommandFromQueues(t.id)}clearQueue(){this.liveDrawing&&(this.commandQueues=[],this.undoneCommandQueues=[])}}},629:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SVGSplitter=void 0;const n=i(229),s=i(776),r=i(883);e.SVGSplitter=class{constructor(){}loadImage(t,e){let i=n.paper.project.importSVG(t.target.result);console.log("SVG imported."),this.splitSVG(i,e),s.GUI.stopLoadingAnimation()}onImageLoad(t,e){console.log("Importing SVG..."),s.GUI.startLoadingAnimation((()=>this.loadImage(t,e)))}handleFileSelect(t){let e=null!=t.dataTransfer?t.dataTransfer.files:t.target.files;for(let t=0;t<e.length;t++){let i=null!=e[t]?e[t]:e.item(t);if(!/^image\//.test(i.type))continue;let n=new FileReader;n.onload=t=>this.onImageLoad(t,i.name),n.readAsText(i);break}}createGUI(t){this.gui=t.addFolder("SVG Splitter"),this.gui.addFileSelectorButton("Split SVG","image/svg+xml",!1,(t=>this.handleFileSelect(t)))}exportFile(t,e,i,s,r){let o=t+"_"+e+".svg";console.log("Exporting "+o+"...");let a=n.paper.project.exportSVG({asString:!0}),l=new Blob([a],{type:"image/svg+xml"});console.log("Exported "+o+"."),s.file(o,l,{}),r.removeChildren()}splitSVG(t,e){let i=e.replace(/\.[^/.]+$/,"");e.replace(i,""),console.log("Collapsing SVG..."),r.SVGPlot.collapse(t),console.log("SVG collapsed."),r.SVGPlot.collapse(t),console.log("Flattening and subdividing paths..."),r.SVGPlot.filter(t),console.log("Paths flattenned and subdivided."),console.log("Splitting long paths..."),r.SVGPlot.splitLongPaths(t),console.log("Paths split."),console.log("There are "+t.children.length+" paths.");let s=n.paper.project,o=document.createElement("canvas");o.width=t.strokeBounds.width,o.height=t.strokeBounds.height;let a=new n.paper.Project(o),l=new n.paper.Path.Rectangle(t.bounds);l.matrix=t.matrix,l.fillColor=new n.paper.Color("white"),l.sendToBack();let h=new n.paper.Group;h.matrix=t.matrix,h.strokeWidth=t.strokeWidth,h.fillColor=t.fillColor,h.strokeColor=t.strokeColor,a.view.center=t.bounds.center;let u=0,c=new JSZip;var d=c.folder(i);let p=0;for(;t.children.length>0;){let e=t.firstChild;e.remove(),h.addChild(e),u+=e.segments.length,u>r.SVGPlot.nSegmentsMax&&(this.exportFile(i,p,a,d,h),u=0,p++)}h.children.length>0&&(this.exportFile(i,p,a,d,h),p++),p>0?(console.log("Exports finished."),console.log(`The SVG was split in ${p} files.`),console.log("Generating zip file..."),c.generateAsync({type:"blob"}).then((t=>{console.log("Zip file generated..."),saveAs(t,i+".zip")}))):console.error("The SVG file seems empty."),h.remove(),a.remove(),o.remove(),t.remove(),s.activate()}}},466:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Telescreen=void 0;const n=i(229),s=i(925);class r{constructor(t){this.timeoutID=null,this.telescreen=t}moveTipibot(t){this.timeoutID=null,"linear"==t?s.TipibotInteractive.tipibot.moveLinear(this.telescreen.position):"direct"==t&&s.TipibotInteractive.tipibot.moveDirect(this.telescreen.position)}moveTipibotDeferred(t){this.clearTimeout(),this.timeoutID=setTimeout((()=>this.moveTipibot(t)),500)}clearTimeout(){null!=this.timeoutID&&(clearTimeout(this.timeoutID),this.timeoutID=null)}positiveLeft(){}negativeLeft(){}positiveRight(){}negativeRight(){}}class o extends r{positiveLeft(){this.telescreen.position.x+=this.telescreen.speed,this.moveTipibotDeferred("linear")}negativeLeft(){this.telescreen.position.x-=this.telescreen.speed,this.moveTipibotDeferred("linear")}positiveRight(){this.telescreen.position.y+=this.telescreen.speed,this.moveTipibotDeferred("linear")}negativeRight(){this.telescreen.position.y-=this.telescreen.speed,this.moveTipibotDeferred("linear")}}class a extends r{positiveLeft(){let t=s.TipibotInteractive.tipibot.cartesianToLengths(this.telescreen.position);t.x+=this.telescreen.speed,this.telescreen.position=s.TipibotInteractive.tipibot.lengthsToCartesian(t),this.moveTipibotDeferred("direct")}negativeLeft(){let t=s.TipibotInteractive.tipibot.cartesianToLengths(this.telescreen.position);t.x-=this.telescreen.speed,this.telescreen.position=s.TipibotInteractive.tipibot.lengthsToCartesian(t),this.moveTipibotDeferred("direct")}positiveRight(){let t=s.TipibotInteractive.tipibot.cartesianToLengths(this.telescreen.position);t.y+=this.telescreen.speed,this.telescreen.position=s.TipibotInteractive.tipibot.lengthsToCartesian(t),this.moveTipibotDeferred("direct")}negativeRight(){let t=s.TipibotInteractive.tipibot.cartesianToLengths(this.telescreen.position);t.y-=this.telescreen.speed,this.telescreen.position=s.TipibotInteractive.tipibot.lengthsToCartesian(t),this.moveTipibotDeferred("direct")}}class l extends r{constructor(){super(...arguments),this.direction=new n.paper.Point(1,0)}positiveLeft(){this.direction.angle+=12}negativeLeft(){this.direction.angle-=12}positiveRight(){this.telescreen.position=this.telescreen.position.add(this.direction.multiply(this.telescreen.speed)),this.moveTipibotDeferred("linear")}negativeRight(){this.telescreen.position=this.telescreen.position.subtract(this.direction.multiply(this.telescreen.speed)),this.moveTipibotDeferred("linear")}}e.Telescreen=class{constructor(){this.speed=1,this.move=null,this.moves=new Map,this.moves.set("Orthographic",new o(this)),this.moves.set("Polar",new a(this)),this.moves.set("Direction",new l(this)),document.addEventListener("Disconnect",(()=>this.disconnect()),!1),document.addEventListener("Connect",(t=>this.connect(t.detail)),!1),document.addEventListener("MessageReceived",(t=>this.messageReceived(t.detail)),!1),this.move=this.moves.get("Orthographic"),this.position=s.TipibotInteractive.tipibot.getPosition()}createGUI(t){let e=t.addFolder("Telescreen");e.addSlider("Speed",1,1,100,1).onChange((t=>this.speed=t)),this.modeController=e.add({Mode:"Orthographic"},"Mode",["Orthographic","Polar","Direction"]).onFinishChange((t=>this.modeChanged(t)))}changeMode(t){for(let t of this.moves)t[1].clearTimeout();this.move=this.moves.get(t)}modeChanged(t){this.changeMode(t)}cycleMode(){let t=[],e=0,i=0;for(let n of this.moves)n[1]==this.move&&(i=e),t.push(n[0]),e++;let n=t[e+1<t.length?e+1:0];this.changeMode(n),this.modeController.setValue(n),this.modeController.updateDisplay()}connect(t){}disconnect(){}messageReceived(t){s.TipibotInteractive.tipibot.getPosition(),0==t.indexOf("left")?t.indexOf("+")>0?this.move.positiveLeft():t.indexOf("-")>0?this.move.negativeLeft():t.indexOf("OFF")>0&&s.TipibotInteractive.tipibot.togglePenState():0==t.indexOf("right")&&(t.indexOf("+")>0?this.move.positiveRight():t.indexOf("-")>0?this.move.negativeRight():t.indexOf("OFF")>0&&this.cycleMode())}}},558:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Renderer=void 0;const n=i(229);e.Renderer=class{constructor(){if(this.ignoreWindowResize=!1,this.canvas=document.createElement("canvas"),!n.isServer){let t=document.getElementById("canvas");this.canvas.width=t.offsetWidth,this.canvas.height=t.offsetHeight,t.appendChild(this.canvas)}n.paper.setup(this.canvas),n.paper.project.currentStyle.strokeColor=new n.paper.Color("black"),n.paper.project.currentStyle.strokeWidth=.5,n.paper.project.currentStyle.strokeScaling=!1,new n.paper.Layer,this.dragging=!1,this.previousPosition=new n.paper.Point(0,0),document.addEventListener("SettingChanged",(t=>this.onSettingChanged(t)),!1)}onSettingChanged(t){(t.detail.all||"Machine dimensions"==t.detail.parentNames[0])&&this.centerOnTipibot(n.Settings.tipibot,!0)}centerOnTipibot(t,e=!0,i=this.canvas){if(e){let t=200,e=Math.max((n.Settings.tipibot.width+t)/i.width*window.devicePixelRatio,(n.Settings.tipibot.height+t)/i.height*window.devicePixelRatio);n.paper.view.zoom=1/e,document.dispatchEvent(new CustomEvent("ZoomChanged",{detail:{}}))}n.paper.view.center=new n.paper.Point(n.Settings.tipibot.width/2,n.Settings.tipibot.height/2)}getDomElement(){return n.paper.view.element}windowResize(){if(this.ignoreWindowResize)return;let t=document.getElementById("canvas"),e=t.offsetWidth,i=t.offsetHeight;this.canvas.width=e,this.canvas.height=i,n.paper.view.viewSize=new n.paper.Size(e,i),this.centerOnTipibot(n.Settings.tipibot,!1)}getMousePosition(t){return new n.paper.Point(t.clientX,t.clientY)}getWorldPosition(t){return n.paper.view.viewToProject(this.getMousePosition(t))}mouseDown(t){this.dragging=!0,this.previousPosition=this.getMousePosition(t)}mouseMove(t){if(4==t.buttons||this.spacePressed&&this.dragging){let e=this.getMousePosition(t);n.paper.view.translate(e.subtract(this.previousPosition).divide(n.paper.view.zoom)),n.paper.view.update(),this.previousPosition.x=e.x,this.previousPosition.y=e.y}}mouseUp(t){this.dragging=!1}mouseLeave(t){this.dragging=!1}mouseWheel(t){if(t.target!=this.getDomElement())return;let e=this.getWorldPosition(t);n.paper.view.zoom=Math.max(.1,Math.min(5,n.paper.view.zoom-t.deltaY/300)),document.dispatchEvent(new CustomEvent("ZoomChanged",{detail:{}}));let i=this.getWorldPosition(t);n.paper.view.translate(i.subtract(e))}keyDown(t){32===t.keyCode&&(this.spacePressed=!0,document.getElementById("canvas").classList.add("grab"))}keyUp(t){32===t.keyCode&&(this.spacePressed=!1,document.getElementById("canvas").classList.remove("grab"))}render(){}}},229:(t,e,i)=>{"use strict";if(Object.defineProperty(e,"__esModule",{value:!0}),e.copyObjectPropertiesFromJSON=e.copyObjectProperties=e.autoHomePosition=e.servoDownAngle=e.servoUpAngle=e.stepsToMm=e.mmToSteps=e.stepsPerMm=e.mmPerSteps=e.Settings=e.isServer=e.paper=void 0,e.paper=i(267),e.isServer="undefined"!=typeof process&&void 0!==process.versions.node,e.isServer){var n=new e.paper.Size(1e3,1e3);e.paper.setup(n);let t=new e.paper.Path.Circle(new e.paper.Point(0,0),30);t.fillColor=new e.paper.Color(.1,.3,.2),t.flatten(3),console.log(t.fillColor.red,t.fillColor.green,t.fillColor.blue);for(let e of t.segments)console.log(e.point.x)}e.Settings={websocketServerURL:"localhost:6842",autoConnect:!0,firmware:"Tipibot",forceLinearMoves:!0,forceInitialization:!0,enableTouchKeyboard:!1,tipibot:{width:1780,height:2020,stringLength:2640,homeX:890,homeY:1288,invertMotorLeft:!1,invertMotorRight:!1,drawSpeed:330,maxSpeed:4042,acceleration:200,stepsPerRev:200,microstepResolution:32,mmPerRev:96,progressiveMicrosteps:!1,penWidth:2,penOffset:0},servo:{speed:100,position:{invert:!1,up:10,down:30,close:100,drop:170},delay:{up:{before:0,after:0},down:{before:1e3,after:2e3}}},drawArea:{y:388,width:1200,height:900},transformMatrix:{destinationPoints:new Array,apply:!1},plot:{showPoints:!1,optimizeTrajectories:!0,disableMotorsOnceFinished:!1,flatten:!0,flattenPrecision:.25,subdivide:!1,maxSegmentLength:10},feedback:{enable:!0,rate:10}},e.mmPerSteps=()=>e.Settings.tipibot.mmPerRev/(e.Settings.tipibot.stepsPerRev*e.Settings.tipibot.microstepResolution),e.stepsPerMm=()=>e.Settings.tipibot.stepsPerRev*e.Settings.tipibot.microstepResolution/e.Settings.tipibot.mmPerRev,e.mmToSteps=t=>t.multiply((0,e.stepsPerMm)()),e.stepsToMm=t=>t.multiply((0,e.mmPerSteps)()),e.servoUpAngle=()=>e.Settings.servo.position.invert?e.Settings.servo.position.down:e.Settings.servo.position.up,e.servoDownAngle=()=>e.Settings.servo.position.invert?e.Settings.servo.position.up:e.Settings.servo.position.down,e.autoHomePosition=()=>{let t=e.Settings.tipibot.width/2;return new e.paper.Point(t,Math.sqrt(e.Settings.tipibot.stringLength*e.Settings.tipibot.stringLength-t*t))},e.copyObjectProperties=(t,i)=>{if(null!=i)for(let n in t)t[n]instanceof Array?t[n]=i[n].slice():"object"==typeof t[n]?(0,e.copyObjectProperties)(t[n],i[n]):null!=i[n]&&typeof t[n]==typeof i[n]&&(t[n]=i[n])},e.copyObjectPropertiesFromJSON=(t,i)=>{null!=i&&(0,e.copyObjectProperties)(t,JSON.parse(i))}},921:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.settingsManager=e.SettingsManager=void 0;const n=i(229),s=2e4;class r{constructor(){this.gui=null,this.tipibotPositionFolder=null,this.drawAreaDimensionsFolder=null,this.settingsFolder=null,this.motorsFolder=null,this.homeFolder=null,this.virtualKeyboard=null,this.debug=!1,n.isServer||this.loadLocalStorage()}getControllers(){return this.gui.getFolder("Settings").getAllControllers()}createGUI(t,e){this.gui=t,this.virtualKeyboard=e;let i=t.addFolder("Settings");this.settingsFolder=i,i.open();let r=i.addFolder("Load & Save");r.addFileSelectorButton("Load","application/json",!1,(t=>this.handleFileSelect(t))),r.add(this,"save").name("Save"),this.tipibotPositionFolder=i.addFolder("Position"),this.tipibotPositionFolder.addButton("Set position to home",(()=>this.tipibot.setHome())),this.tipibotPositionFolder.addButton("Set position with mouse",(()=>this.tipibot.toggleSetPosition()));let o=new n.paper.Point(n.Settings.tipibot.homeX,n.Settings.tipibot.homeY);this.tipibotPositionFolder.add(o,"x",0,n.Settings.tipibot.width).name("X"),this.tipibotPositionFolder.add(o,"y",0,n.Settings.tipibot.height).name("Y"),this.tipibotPositionFolder.open(),this.homeFolder=i.addFolder("Home"),this.homeFolder.add({Position:"Bottom"},"Position",["Custom","Top","Center","Bottom","Left","Right","TopLeft","BottomLeft","TopRight","BottomRight"]),this.homeFolder.add(n.Settings.tipibot,"homeX",0,n.Settings.tipibot.width).name("Home X"),this.homeFolder.add(n.Settings.tipibot,"homeY",0,n.Settings.tipibot.height).name("Home Y");let a=i.addFolder("Machine dimensions");a.add(n.Settings.tipibot,"width",100,1e4,1).name("Width"),a.add(n.Settings.tipibot,"height",100,1e4,1).name("Height"),a.add(n.Settings.tipibot,"stringLength",100,1e4,1).name("String length"),this.drawAreaDimensionsFolder=i.addFolder("Draw area dimensions"),this.drawAreaDimensionsFolder.add(n.Settings.drawArea,"y",0,n.Settings.tipibot.height,1).name("Offset Y"),this.drawAreaDimensionsFolder.add(n.Settings.drawArea,"width",0,n.Settings.tipibot.width,1).name("Width"),this.drawAreaDimensionsFolder.add(n.Settings.drawArea,"height",0,n.Settings.tipibot.height,1).name("Height");let l=i.addFolder("Pen");l.add(n.Settings.tipibot,"penWidth",.1,20).name("Pen width"),l.add(n.Settings.tipibot,"penOffset",-200,200,1).name("Pen offset"),l.add(n.Settings.servo,"speed",1,360,1).name("Servo speed deg/sec.");let h=l.addFolder("Angles");h.add(n.Settings.servo.position,"invert").name("Invert"),h.add(n.Settings.servo.position,"up",0,3180).name("Up"),h.add(n.Settings.servo.position,"down",0,3180).name("Down"),h.add(n.Settings.servo.position,"close",0,3180).name("Close"),h.add(n.Settings.servo.position,"drop",0,3180).name("Drop");let u=l.addFolder("Delays"),c=u.addFolder("Up");c.add(n.Settings.servo.delay.up,"before",0,3e3,1).name("Before"),c.add(n.Settings.servo.delay.up,"after",0,3e3,1).name("After");let d=u.addFolder("Down");d.add(n.Settings.servo.delay.down,"before",0,3e3,1).name("Before"),d.add(n.Settings.servo.delay.down,"after",0,3e3,1).name("After"),this.motorsFolder=i.addFolder("Motors"),this.motorsFolder.add(n.Settings.tipibot,"invertMotorLeft").name("Invert left motor"),this.motorsFolder.add(n.Settings.tipibot,"invertMotorRight").name("Invert right motor"),this.motorsFolder.add(n.Settings.tipibot,"drawSpeed",1,s,1).name("Draw speed steps/sec."),this.motorsFolder.add(n.Settings.tipibot,"maxSpeed",1,s,1).name("Max speed steps/sec."),this.motorsFolder.add({maxSpeedMm:n.Settings.tipibot.maxSpeed*(0,n.mmPerSteps)()},"maxSpeedMm",.1,s*(0,n.mmPerSteps)(),.01).name("Max speed mm/sec."),this.motorsFolder.add(n.Settings.tipibot,"acceleration",1,5e3,1).name("Acceleration"),this.motorsFolder.add(n.Settings.tipibot,"stepsPerRev",1,500,1).name("Steps per rev."),this.motorsFolder.add(n.Settings.tipibot,"microstepResolution",1,256,1).name("Step multiplier"),this.motorsFolder.add(n.Settings.tipibot,"mmPerRev",1,250,1).name("Mm per rev."),this.motorsFolder.add(n.Settings.tipibot,"progressiveMicrosteps").name("Progressive Microsteps");let p=i.addFolder("Feedback");p.add(n.Settings.feedback,"enable").name("Enable feedback"),p.add(n.Settings.feedback,"rate",1,100,1).name("Feedback rate (info/sec.)"),p.addButton("Clear feedback",(()=>document.dispatchEvent(new CustomEvent("ClearFeedback")))),i.add(n.Settings,"forceLinearMoves").name("Force linear moves"),i.add(n.Settings,"forceInitialization").name("Force initialization"),i.add(n.Settings,"enableTouchKeyboard").name("Touch Keyboard");let f=this.getControllers();for(let t of f){let e=t.getName(),i=t.getParentNames();t.onChange((t=>this.settingChanged(i,e,t,!1))),t.onFinishChange((t=>this.settingChanged(i,e,t,!0)))}e.createGUI(i),i.add({fullscreen:!1},"fullscreen").onChange((t=>{if(t){let t=document.body;t.requestFullscreen?t.requestFullscreen():t.webkitRequestFullscreen?t.webkitRequestFullscreen():t.msRequestFullscreen&&t.msRequestFullscreen()}else{let t=document;t.exitFullscreen?t.exitFullscreen():t.webkitExitFullscreen?t.webkitExitFullscreen():t.msExitFullscreen&&t.msExitFullscreen()}})).name("Fullscreen")}setTipibot(t){this.tipibot=t}updateHomePosition(t,e=!0){"Top"==t?(n.Settings.tipibot.homeX=n.Settings.tipibot.width/2,n.Settings.tipibot.homeY=n.Settings.drawArea.y):"Center"==t?(n.Settings.tipibot.homeX=n.Settings.tipibot.width/2,n.Settings.tipibot.homeY=n.Settings.drawArea.y+n.Settings.drawArea.height/2):"Bottom"==t?(n.Settings.tipibot.homeX=n.Settings.tipibot.width/2,n.Settings.tipibot.homeY=n.Settings.drawArea.y+n.Settings.drawArea.height):"Left"==t?(n.Settings.tipibot.homeX=n.Settings.tipibot.width/2-n.Settings.drawArea.width/2,n.Settings.tipibot.homeY=n.Settings.drawArea.y+n.Settings.drawArea.height/2):"Right"==t?(n.Settings.tipibot.homeX=n.Settings.tipibot.width/2+n.Settings.drawArea.width/2,n.Settings.tipibot.homeY=n.Settings.drawArea.y+n.Settings.drawArea.height/2):"TopLeft"==t?(n.Settings.tipibot.homeX=n.Settings.tipibot.width/2-n.Settings.drawArea.width/2,n.Settings.tipibot.homeY=n.Settings.drawArea.y):"BottomLeft"==t?(n.Settings.tipibot.homeX=n.Settings.tipibot.width/2-n.Settings.drawArea.width/2,n.Settings.tipibot.homeY=n.Settings.drawArea.y+n.Settings.drawArea.height):"TopRight"==t?(n.Settings.tipibot.homeX=n.Settings.tipibot.width/2+n.Settings.drawArea.width/2,n.Settings.tipibot.homeY=n.Settings.drawArea.y):"BottomRight"==t&&(n.Settings.tipibot.homeX=n.Settings.tipibot.width/2+n.Settings.drawArea.width/2,n.Settings.tipibot.homeY=n.Settings.drawArea.y+n.Settings.drawArea.height),e&&(this.homeFolder.getController("homeX").setValueNoCallback(n.Settings.tipibot.homeX),this.homeFolder.getController("homeY").setValueNoCallback(n.Settings.tipibot.homeY)),this.tipibot.setHome(!1)}settingChanged(t,i,r=null,o=!1){if(e.settingsManager.debug,"Machine dimensions"==t[0])"width"==i?(this.tipibotPositionFolder.getController("x").max(r,!1),this.drawAreaDimensionsFolder.getController("width").max(r,o)):"height"==i&&(this.tipibotPositionFolder.getController("y").max(r,!1),this.drawAreaDimensionsFolder.getController("height").max(r,o),this.drawAreaDimensionsFolder.getController("y").max(r-n.Settings.drawArea.height,o)),"width"!=i&&"height"!=i||(this.updateHomePosition(this.homeFolder.getController("Position").getValue(),!0),this.tipibot.sizeChanged(o));else if("Home"==t[0])"Position"==i&&this.updateHomePosition(r,!0),"homeX"!=i&&"homeY"!=i||(this.homeFolder.getController("Position").setValueNoCallback("Custom"),this.tipibot.setHome(!1));else if("Motors"==t[0]){if("drawSpeed"==i)this.tipibot.drawSpeedChanged(o);else if("maxSpeed"==i){let t=r*(0,n.mmPerSteps)();this.motorsFolder.getController("maxSpeedMm").setValueNoCallback(t),this.tipibot.maxSpeedChanged(o)}else if("maxSpeedMm"==i){let t=r/(0,n.mmPerSteps)();this.motorsFolder.getController("maxSpeed").setValueNoCallback(t),n.Settings.tipibot.maxSpeed=t,this.tipibot.maxSpeedChanged(o)}else"acceleration"==i?this.tipibot.accelerationChanged(o):"mmPerRev"==i?this.tipibot.mmPerRevChanged(o):"stepsPerRev"==i?this.tipibot.stepsPerRevChanged(o):"microstepResolution"==i?this.tipibot.microstepResolutionChanged(o):"invertMotorLeft"==i||"invertMotorRight"==i&&o?this.tipibot.sendInvertXY():"progressiveMicrosteps"==i&&o&&this.tipibot.sendProgressiveMicrosteps();{let t=n.Settings.tipibot.maxSpeed*(0,n.mmPerSteps)(),e=this.motorsFolder.getController("maxSpeedMm");e.max(s*(0,n.mmPerSteps)()),e.setValueNoCallback(t)}}else"Position"==t[0]?"x"==i?this.tipibot.setX(r,o):"y"==i&&this.tipibot.setY(r,o):"Angles"!=t[0]||"Pen"!=t[1]||"up"!=i&&"down"!=i&&"close"!=i&&"drop"!=i?"Pen"==t[0]?"penWidth"==i?o&&this.tipibot.penWidthChanged(!0):"speed"==i?this.tipibot.servoChanged(o,null,!0):"penOffset"==i&&this.tipibot.setPosition(this.tipibot.getPosition(),o,!1):"Draw area dimensions"==t[0]?(this.tipibot.drawAreaChanged(o),this.updateHomePosition(this.homeFolder.getController("Position").getValue(),!0)):"Feedback"==t[0]?this.tipibot.feedbackChanged(o):"enableTouchKeyboard"==i&&(r?this.virtualKeyboard.enableArrowsController.show():this.virtualKeyboard.enableArrowsController.hide()):o&&this.tipibot.servoChanged(o,i,!1);document.dispatchEvent(new CustomEvent("SettingChanged",{detail:{parentNames:t,name:i,value:r,changeFinished:o}})),this.save(!1)}settingsChanged(){this.tipibotPositionFolder.getController("x").max(n.Settings.tipibot.width,!1),this.tipibotPositionFolder.getController("y").max(n.Settings.tipibot.height,!1),this.drawAreaDimensionsFolder.getController("width").max(n.Settings.tipibot.width,!1),this.drawAreaDimensionsFolder.getController("height").max(n.Settings.tipibot.height,!1),this.drawAreaDimensionsFolder.getController("y").max(n.Settings.tipibot.height-n.Settings.drawArea.height,!1),this.tipibotPositionFolder.getController("x").setValue(n.Settings.tipibot.homeX,!1),this.tipibotPositionFolder.getController("y").setValue(n.Settings.tipibot.homeY,!1),this.homeFolder.getController("Position").setValue("Custom",!1),this.homeFolder.getController("homeX").setValue(n.Settings.tipibot.homeX,!1),this.homeFolder.getController("homeY").setValue(n.Settings.tipibot.homeY,!1);for(let t of this.getControllers())t.updateDisplay();this.tipibot.drawSpeedChanged(!0),this.tipibot.maxSpeedChanged(!0),this.tipibot.mmPerRevChanged(!0),this.tipibot.stepsPerRevChanged(!0),this.tipibot.microstepResolutionChanged(!0),this.tipibot.penWidthChanged(!0),this.tipibot.servoChanged(!0,null,!0),this.tipibot.sizeChanged(!0),this.tipibot.drawAreaChanged(!0),this.tipibot.setHome(!1),document.dispatchEvent(new CustomEvent("SettingChanged",{detail:{all:!0}})),this.save(!1)}save(t=!0){let e=JSON.stringify(n.Settings,null,"\t");if(localStorage.setItem("settings",e),t){var i=new Blob([e],{type:"application/json"});saveAs(i,"settings.json")}}updateSliders(){let t=this.getControllers();for(let e of t)e.updateDisplay()}onJsonLoad(t){null!=t.target&&null!=t.target.result&&((0,n.copyObjectPropertiesFromJSON)(n.Settings,t.target.result),this.settingsChanged(),this.updateSliders())}handleFileSelect(t){let e=null!=t.dataTransfer?t.dataTransfer.files:t.target.files;for(let t=0;t<e.length;t++){let i=e.item(t),n=new FileReader;n.onload=t=>this.onJsonLoad(t),n.readAsText(i)}}loadLocalStorage(){(0,n.copyObjectPropertiesFromJSON)(n.Settings,localStorage.getItem("settings"))}loadJSONandOverwriteLocalStorage(t){(0,n.copyObjectPropertiesFromJSON)(n.Settings,t),this.save(!1)}}e.SettingsManager=r,e.settingsManager=new r},925:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TipibotInteractive=void 0;const n=i(755),s=i(322),r=i(229),o=i(921),a=i(271),l=i(922);class h extends l.Tipibot{constructor(){super(),this.penStateButton=null,this.motorsEnableButton=null,document.addEventListener("ZoomChanged",(t=>this.onZoomChanged()),!1),l.Tipibot.tipibot=this,h.tipibot=this}setPositionSliders(t){o.settingsManager.tipibotPositionFolder.getController("x").setValue(t.x,!1),o.settingsManager.tipibotPositionFolder.getController("y").setValue(t.y,!1),this.gui.getController("moveX").setValue(t.x,!1),this.gui.getController("moveY").setValue(t.y,!1)}toggleSetPosition(t=!this.settingPosition,e=!0){super.toggleSetPosition(t,e),t?(o.settingsManager.tipibotPositionFolder.getController("Set position with mouse").setName("Cancel"),this.initialPosition=this.getPosition()):(o.settingsManager.tipibotPositionFolder.getController("Set position with mouse").setName("Set position with mouse"),e&&this.setPositionSliders(this.initialPosition)),this.settingPosition=t}togglePenState(){let t=()=>console.log("pen state changed");this.pen.state==a.PenState.Up?this.penDown((0,r.servoDownAngle)(),r.Settings.servo.delay.down.before,r.Settings.servo.delay.down.after,t,!0):this.penUp((0,r.servoUpAngle)(),r.Settings.servo.delay.up.before,r.Settings.servo.delay.up.after,t,!0)}createTarget(t,e,i){let n=new r.paper.Group,s=new r.paper.Point(t,e),o=new r.paper.Path.Circle(s,i);o.strokeWidth=1,n.addChild(o);let a=new r.paper.Path;a.add(new r.paper.Point(s.x-i,s.y)),a.add(new r.paper.Point(s.x+i,s.y)),n.addChild(a);let l=new r.paper.Path;return l.add(new r.paper.Point(s.x,s.y-i)),l.add(new r.paper.Point(s.x,s.y+i)),n.addChild(l),n}createMoveToButton(t){let e=new r.paper.Path.Rectangle(t.subtract(6),t.add(6));return e.fillColor=new r.paper.Color("rgba(0, 0, 0, 0.05)"),e.onMouseUp=t=>this.moveToButtonClicked(t,e.position),e}initialize(){super.initialize(),o.settingsManager.setTipibot(this),this.home=this.createTarget(r.Settings.tipibot.homeX,r.Settings.tipibot.homeY,a.Pen.HOME_RADIUS);let t=new r.paper.Point(r.Settings.tipibot.homeX,r.Settings.tipibot.homeY);this.moveToButtons.push(this.createMoveToButton(this.drawArea.bounds.topLeft)),this.moveToButtons.push(this.createMoveToButton(this.drawArea.bounds.topRight)),this.moveToButtons.push(this.createMoveToButton(this.drawArea.bounds.bottomLeft)),this.moveToButtons.push(this.createMoveToButton(this.drawArea.bounds.bottomRight)),this.moveToButtons.push(this.createMoveToButton(t)),this.pen.group.bringToFront()}moveToButtonClicked(t,e){a.Pen.moveTypeFromMouseEvent(t)==a.MoveType.Direct?this.moveDirect(e):this.moveLinear(e)}onZoomChanged(){let t=new r.paper.Point(1/r.paper.project.view.zoom,1/r.paper.project.view.zoom);for(let e of this.moveToButtons)e.applyMatrix=!1,e.scaling=t;this.pen.circle.applyMatrix=!1,this.pen.circle.scaling=t,this.home.applyMatrix=!1,this.home.scaling=t}updateMoveToButtons(){let t=new r.paper.Point(r.Settings.tipibot.homeX,r.Settings.tipibot.homeY);this.moveToButtons[0].position=this.drawArea.bounds.topLeft,this.moveToButtons[1].position=this.drawArea.bounds.topRight,this.moveToButtons[2].position=this.drawArea.bounds.bottomLeft,this.moveToButtons[3].position=this.drawArea.bounds.bottomRight,this.moveToButtons[4].position=t}sizeChanged(t){super.sizeChanged(t),this.updateMoveToButtons()}drawAreaChanged(t){super.drawAreaChanged(t),this.updateMoveToButtons()}disableMotors(t){super.disableMotors(t),this.motorsEnableButton.setName("Enable motors")}enableMotors(t){super.enableMotors(t),this.motorsEnableButton.setName("Disable motors")}penUp(t=(0,r.servoUpAngle)(),e=r.Settings.servo.delay.up.before,i=r.Settings.servo.delay.up.after,n=null,s=!1){let o=super.penUp(t,e,i,n,s);return o&&this.penStateButton.setName("Pen down"),o}penDown(t=(0,r.servoDownAngle)(),e=r.Settings.servo.delay.down.before,i=r.Settings.servo.delay.down.after,n=null,s=!1){let o=super.penDown(t,e,i,n,s);return o&&this.penStateButton.setName("Pen up"),o}keyDown(t){if(this.ignoreKeyEvents)return;let e=t.key;if(n.contains(n("#gui").get(0),document.activeElement)&&0==e.indexOf("Arrow"))return void console.log("Focus on the draw area to move the bot with arrows");let i=t.shiftKey?25:t.ctrlKey?5:t.altKey?1:.25;switch(e){case"ArrowLeft":this.moveDirect(this.getPosition().add(new r.paper.Point(-i,0)));break;case"ArrowUp":this.moveDirect(this.getPosition().add(new r.paper.Point(0,-i)));break;case"ArrowRight":this.moveDirect(this.getPosition().add(new r.paper.Point(i,0)));break;case"ArrowDown":this.moveDirect(this.getPosition().add(new r.paper.Point(0,i)));break;case"p":case"Add":case"NumpadAdd":this.motorsEnabled||this.enableMotors(!0),s.Communication.interpreter.sendMoveStation(1,6400/6,1e-4);break;case"m":case"Subtract":case"NumpadSub":case"NumpadSubtract":this.motorsEnabled||this.enableMotors(!0),s.Communication.interpreter.sendMoveStation(0,6400/6,1e-4);break;case"Enter":this.togglePenState()}}keyUp(t){}}e.TipibotInteractive=h,new h},922:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Tipibot=void 0;const n=i(322),s=i(229),r=i(271),o=i(930);class a{constructor(){this.settingPosition=!1,this.initialPosition=null,this.initializedCommunication=!1,this.motorsEnabled=!0,this.ignoreKeyEvents=!1,this.moveToButtons=[],this.lastSentPosition=new s.paper.Point(0,0),a.tipibot=this}setPositionSliders(t){}toggleSetPosition(t,e=!0){}cartesianToLengths(t){let e=s.Settings.tipibot.width-t.x;return new s.paper.Point(Math.sqrt(t.x*t.x+t.y*t.y),Math.sqrt(e*e+t.y*t.y))}lengthsToCartesian(t){let e=t.x,i=t.y,n=s.Settings.tipibot.width,r=(e*e-i*i+n*n)/(2*n),o=Math.sqrt(e*e-r*r);return new s.paper.Point(r,o)}computeTipibotArea(){return new s.paper.Rectangle(0,0,s.Settings.tipibot.width,s.Settings.tipibot.height)}computeDrawArea(){return new s.paper.Rectangle(s.Settings.tipibot.width/2-s.Settings.drawArea.width/2,s.Settings.drawArea.y,s.Settings.drawArea.width,s.Settings.drawArea.height)}initialize(){this.tipibotArea=new s.paper.Path.Rectangle(this.computeTipibotArea()),this.drawArea=new s.paper.Path.Rectangle(this.computeDrawArea()),this.motorLeft=new s.paper.Path.Circle(new s.paper.Point(0,0),50),this.motorRight=new s.paper.Path.Circle(new s.paper.Point(s.Settings.tipibot.width,0),50),this.pen=new r.Pen(s.Settings.tipibot.homeX,s.Settings.tipibot.homeY,s.Settings.tipibot.penOffset,s.Settings.tipibot.width),this.pen.group.bringToFront()}updateTipibotArea(){this.tipibotArea.remove(),this.tipibotArea=new s.paper.Path.Rectangle(this.computeTipibotArea())}updateDrawArea(){this.drawArea.remove(),this.drawArea=new s.paper.Path.Rectangle(this.computeDrawArea())}sizeChanged(t){this.motorRight.position.x=s.Settings.tipibot.width,this.updateTipibotArea(),this.updateDrawArea(),this.pen.tipibotWidthChanged(),t&&n.Communication.interpreter.sendSize()}drawAreaChanged(t){this.updateDrawArea()}drawSpeedChanged(t){t&&n.Communication.interpreter.sendDrawSpeed()}maxSpeedChanged(t){t&&n.Communication.interpreter.sendMaxSpeed()}accelerationChanged(t){t&&n.Communication.interpreter.sendAcceleration()}getPosition(){return this.pen.getPosition()}getHome(){return new s.paper.Point(s.Settings.tipibot.homeX,s.Settings.tipibot.homeY-s.Settings.tipibot.penOffset)}getGondolaPosition(){let t=this.getPosition();return t.y-=s.Settings.tipibot.penOffset,t}getLengths(){return this.cartesianToLengths(this.getPosition())}setX(t,e=!0){let i=this.getPosition();this.setPosition(new s.paper.Point(t,i.y),e)}setY(t,e=!0){let i=this.getPosition();this.setPosition(new s.paper.Point(i.x,t),e)}checkInitialized(){s.Settings.forceInitialization&&!this.initializedCommunication&&n.Communication.interpreter.initialize()}sendGondolaPosition(){n.Communication.interpreter.sendSetPosition(this.getGondolaPosition())}sendChangePen(t,e){n.Communication.interpreter.sendChangePen(t,e)}setPosition(t,e=!0,i=!1){this.pen.setPosition(t,i,!1),e&&(this.lastSentPosition=t,this.checkInitialized(),this.sendGondolaPosition())}sendInvertXY(){n.Communication.interpreter.sendInvertXY(),this.sendGondolaPosition()}sendProgressiveMicrosteps(){n.Communication.interpreter.sendProgressiveMicrosteps()}move(t,e,i=0,a=s.Settings.tipibot.maxSpeed,l=null,h=!0){this.checkInitialized();let u=h?l:()=>{this.pen.setPosition(e,!0,!1),null!=l&&l()};this.lastSentPosition=e,this.motorsEnabled||this.enableMotors(!0);let c=new s.paper.Point(e.x,e.y-s.Settings.tipibot.penOffset);t!=r.MoveType.Direct||s.Settings.forceLinearMoves?(o.Calibration.calibration.applyTransform&&(c=o.Calibration.calibration.transform(c)),n.Communication.interpreter.sendMoveLinear(c,i,a,u)):(o.Calibration.calibration.applyTransform&&(c=o.Calibration.calibration.transform(c)),n.Communication.interpreter.sendMoveDirect(c,u)),h&&this.pen.setPosition(e,!0,!1)}moveDirect(t,e=null,i=!0){this.move(r.MoveType.Direct,t,0,s.Settings.tipibot.maxSpeed,e,i)}moveLinear(t,e=0,i=s.Settings.tipibot.maxSpeed,n=null,o=!0){this.move(r.MoveType.Linear,t,e,i,n,o)}setSpeed(t){n.Communication.interpreter.sendMaxSpeed(t)}stepsPerRevChanged(t){t&&n.Communication.interpreter.sendStepsPerRev(s.Settings.tipibot.stepsPerRev)}mmPerRevChanged(t){t&&n.Communication.interpreter.sendMmPerRev(s.Settings.tipibot.mmPerRev)}microstepResolutionChanged(t){t&&n.Communication.interpreter.sendStepMultiplier(s.Settings.tipibot.microstepResolution)}feedbackChanged(t){t&&n.Communication.interpreter.sendFeedback(s.Settings.feedback.enable,s.Settings.feedback.rate)}penWidthChanged(t){t&&n.Communication.interpreter.sendPenWidth(s.Settings.tipibot.penWidth)}servoChanged(t,e,i){t&&(i&&(n.Communication.interpreter.sendPenLiftRange(),n.Communication.interpreter.sendPenDelays(),n.Communication.interpreter.sendServoSpeed()),null!=e&&("up"==e?n.Communication.interpreter.sendPenUp():"down"==e?n.Communication.interpreter.sendPenDown():"close"==e?n.Communication.interpreter.sendPenClose():"drop"==e&&n.Communication.interpreter.sendPenDrop()))}sendSpecs(){n.Communication.interpreter.sendSpecs(s.Settings.tipibot.width,s.Settings.tipibot.height,s.Settings.tipibot.stepsPerRev,s.Settings.tipibot.mmPerRev,s.Settings.tipibot.microstepResolution)}pause(t){n.Communication.interpreter.sendPause(t)}disableMotors(t){t&&n.Communication.interpreter.sendMotorOff(),this.motorsEnabled=!1}enableMotors(t){t&&n.Communication.interpreter.sendMotorOn(),this.motorsEnabled=!0}toggleMotors(){this.motorsEnabled?this.disableMotors(!0):this.enableMotors(!0)}executeOnceFinished(t){n.Communication.interpreter.executeOnceFinished(t)}servoPlus(){}servoMinus(){}penUp(t=(0,s.servoUpAngle)(),e=s.Settings.servo.delay.up.before,i=s.Settings.servo.delay.up.after,n=null,o=!1){let a=this.pen.state!=r.PenState.Up||o;return a&&this.pen.penUp(t,e,i,n),a}penDown(t=(0,s.servoDownAngle)(),e=s.Settings.servo.delay.down.before,i=s.Settings.servo.delay.down.after,n=null,o=!1){let a=this.pen.state==r.PenState.Up||o;return a&&this.pen.penDown(t,e,i,n),a}setHome(t=!0,e=!0){let i=new s.paper.Point(s.Settings.tipibot.homeX,s.Settings.tipibot.homeY);this.home.position=i,t&&this.setPosition(i,!0,e),n.Communication.interpreter.sendSetHome(this.getGondolaPosition())}autoHome(t=null){this.setPosition((0,s.autoHomePosition)(),!1,!0),n.Communication.interpreter.sendAutoHome(t)}goHome(t=null){let e=new s.paper.Point(s.Settings.tipibot.homeX,s.Settings.tipibot.homeY);this.penUp((0,s.servoUpAngle)(),s.Settings.servo.delay.up.before,s.Settings.servo.delay.up.after,null,!0),this.moveDirect(e,t,!1)}windowResize(){this.motorRight.position.x=s.Settings.tipibot.width,this.updateTipibotArea(),this.updateDrawArea()}}e.Tipibot=a,a.tipibot=null,s.isServer&&new a},960:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.VisualFeedback=e.visualFeedback=void 0;const n=i(229),s=i(271),r=i(922);e.visualFeedback=null;class o{constructor(){this.drawing=!1,this.isPenUp=!0,this.positionPrefix="-p: l: ",this.penPrefix="-pen: ",this.subTargetPrefix="-st: l: ",this.paths=new n.paper.Group,this.subTargets=new n.paper.Group,this.group=new n.paper.Group,this.group.addChild(this.paths),this.group.addChild(this.subTargets);let t=r.Tipibot.tipibot.getPosition(),e=r.Tipibot.tipibot.getGondolaPosition();this.circle=new n.paper.Path.Circle(t,s.Pen.HOME_RADIUS),this.circle.fillColor=new n.paper.Color("rgba(255, 193, 7, 0.25)"),this.circle.strokeColor=new n.paper.Color("black"),this.circle.strokeWidth=1,this.group.addChild(this.circle),this.lines=new n.paper.Path,this.lines.add(new n.paper.Point(0,0)),this.lines.add(e),this.lines.add(new n.paper.Point(n.Settings.tipibot.width,0)),this.lines.strokeWidth=.5,this.lines.strokeColor=new n.paper.Color("rgba(0, 0, 0, 0.5)"),this.lines.dashArray=[2,2],this.lines.strokeScaling=!1,this.group.addChild(this.lines),this.offsetLine=new n.paper.Path,this.offsetLine.add(e),this.offsetLine.add(t),this.offsetLine.dashArray=[2,2],this.group.addChild(this.offsetLine),document.addEventListener("MessageReceived",(t=>this.onMessageReceived(t.detail)),!1),document.addEventListener("SettingChanged",(t=>this.onSettingChanged(t)),!1),document.addEventListener("ClearFeedback",(t=>this.clear()),!1),document.addEventListener("ZoomChanged",(t=>this.onZoomChanged()),!1),this.group.sendToBack()}static initialize(){e.visualFeedback=new o}clear(){this.paths.removeChildren(),this.subTargets.removeChildren()}onZoomChanged(){this.circle.applyMatrix=!1,this.circle.scaling=new n.paper.Point(1/n.paper.project.view.zoom,1/n.paper.project.view.zoom)}setVisible(t){this.group.visible=t}setPosition(t){this.circle.position=t,this.offsetLine.segments[1].point=t;let e=new n.paper.Point(t.x,t.y-n.Settings.tipibot.penOffset);this.lines.segments[1].point=e,this.offsetLine.segments[0].point=e}computePoint(t,e){let i=t.replace(e,"").split(", r: "),s=parseInt(i[0]),o=parseInt(i[1]),a=new n.paper.Point(s,o),l=(0,n.stepsToMm)(a);return r.Tipibot.tipibot.lengthsToCartesian(l)}onMessageReceived(t){0==t.indexOf(this.positionPrefix)?this.updatePosition(t):0==t.indexOf(this.subTargetPrefix)?this.setSubTarget(t):0==t.indexOf(this.penPrefix)&&this.updatePen(t)}updatePosition(t){let e=this.computePoint(t,this.positionPrefix);if(!e.isNaN()){if(this.isPenUp)this.drawing=!1;else if(!this.drawing&&this.paths){let t=new n.paper.Path;t.strokeWidth=n.Settings.tipibot.penWidth,t.strokeColor=new n.paper.Color("black"),t.strokeScaling=!0,t.add(e),this.paths.addChild(t),this.drawing=!0}else null!=this.paths.lastChild&&this.paths.lastChild.add(e);this.setPosition(e)}}updatePen(t){let e=t.replace(this.penPrefix,""),i=Math.round(parseFloat(e));this.isPenUp=Math.abs(i-Math.round(n.Settings.servo.position.up))<.1||!(Math.abs(i-Math.round(n.Settings.servo.position.down))<.1)&&null,n.Settings.servo.position.invert&&(this.isPenUp=!this.isPenUp),this.circle.fillColor=new n.paper.Color(this.isPenUp?"rgba(255, 193, 7, 0.25)":"rgba(255, 193, 7, 0.9)")}setSubTarget(t){let e=this.computePoint(t,this.subTargetPrefix);if(!this.isPenUp){let t=new n.paper.Path;t.strokeWidth=.1,t.strokeColor=new n.paper.Color("red"),t.strokeScaling=!0,this.subTargets.addChild(t);let i=2;t.add(e.add(i)),t.add(e.add(-i)),t.add(e),t.add(e.add(new n.paper.Point(i,-i))),t.add(e.add(new n.paper.Point(-i,i)))}}onSettingChanged(t){(t.detail.all||"Machine dimensions"==t.detail.parentNames[0])&&"width"==t.detail.name&&(this.lines.segments[2].point.x=n.Settings.tipibot.width),(t.detail.all||"Feedback"==t.detail.parentNames[0])&&this.setVisible(n.Settings.feedback.enable),(t.detail.all||"Pen"==t.detail.parentNames[0]&&"penOffset"==t.detail.name)&&this.setPosition(this.circle.position)}}e.VisualFeedback=o},858:()=>{},158:()=>{}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var r=e[n]={id:n,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{"use strict";i(755);const t=i(229),e=i(921),n=i(925),s=i(558),r=i(271),o=i(883),a=i(673),l=i(754),h=i(412),u=i(816),c=i(776),d=i(107),p=i(960),f=i(781),g=i(466),m=i(629),v=i(888),b=i(756),_=i(50);let y,w=null,x=null,C=null,S=window;document.addEventListener("DOMContentLoaded",(function(i){!function(){dat.GUI.DEFAULT_WIDTH=325,x=new s.Renderer,S.virtualKeyboard=(0,u.initializeKeyboard)(),y=new c.GUI({autoPlace:!1});let i=new d.Console,r=new h.CommandDisplay;r.createGUI(i),i.createGUI(),document.getElementById("gui").appendChild(y.getDomElement()),w=new l.CommunicationInteractive(y),e.settingsManager.createGUI(y,S.virtualKeyboard),o.SVGPlot.createGUI(y),a.CalibrationInteractive.initialize(y),w.setTipibot(n.TipibotInteractive.tipibot),n.TipibotInteractive.tipibot.initialize(),x.centerOnTipibot(t.Settings.tipibot),p.VisualFeedback.initialize();let C=y.addFolder("Plugins"),P=new f.CommeUnDesseinInteractive;P.createGUI(C);let k=new g.Telescreen;k.createGUI(C),(new m.SVGSplitter).createGUI(C),(new v.FileManager).createGUI(C);let T=new b.LiveDrawing;T.createGUI(C),T.setRenderer(x),(new _.GCodeViewer).createGUI(C),S.tipibot=n.TipibotInteractive.tipibot,S.settingsManager=e.settingsManager,S.Settings=t.Settings,S.gui=y,S.GUI=c.GUI,S.renderer=x,S.communication=w,S.commandDisplay=r,S.visualFeedback=p.visualFeedback,S.SVGPlot=o.SVGPlot,S.commeUnDessein=P,S.telescreen=k}();let P=()=>{S.nCall=0,requestAnimationFrame(P),x.render()};P(),window.addEventListener("resize",(function(){x.windowResize()}),!1),document.body.addEventListener("mousedown",(function(t){x.mouseDown(t)})),document.body.addEventListener("mousemove",(function(e){if(x.mouseMove(e),n.TipibotInteractive.tipibot.settingPosition){let i=x.getWorldPosition(e);null==C&&(C=new t.paper.Path.Circle(i,r.Pen.HOME_RADIUS)),C.position=i,n.TipibotInteractive.tipibot.setPositionSliders(i)}})),document.body.addEventListener("mouseup",(function(t){x.mouseUp(t),n.TipibotInteractive.tipibot.settingPosition&&!e.settingsManager.tipibotPositionFolder.getController("Set position with mouse").contains(t.target)&&(null!=C&&(C.remove(),C=null),n.TipibotInteractive.tipibot.setPosition(x.getWorldPosition(t)),n.TipibotInteractive.tipibot.toggleSetPosition(!1,!1))})),document.body.addEventListener("mouseleave",(function(t){x.mouseLeave(t)})),document.body.addEventListener("keydown",(function(t){n.TipibotInteractive.tipibot.keyDown(t),x.keyDown(t)})),document.body.addEventListener("keyup",(function(t){n.TipibotInteractive.tipibot.keyUp(t),x.keyUp(t)})),addWheelListener(document.body,(function(t){x.mouseWheel(t)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,