/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={634:(e,t,i)=>{"use strict";i.d(t,{Z:()=>a});var n=i(15),o=i.n(n),s=i(645),r=i.n(s)()(o());r.push([e.id,'/*!\n * \n *   simple-keyboard v2.32.68\n *   https://github.com/hodgef/simple-keyboard\n * \n *   Copyright (c) Francisco Hodge (https://github.com/hodgef)\n * \n *   This source code is licensed under the MIT license found in the\n *   LICENSE file in the root directory of this source tree.\n *   \n */.hg-theme-default{width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;box-sizing:border-box;overflow:hidden;touch-action:manipulation}.hg-theme-default .hg-button span{pointer-events:none}.hg-theme-default button.hg-button{border-width:0;outline:0;font-size:inherit}.hg-theme-default{font-family:"HelveticaNeue-Light","Helvetica Neue Light","Helvetica Neue",Helvetica,Arial,"Lucida Grande",sans-serif;background-color:#ececec;padding:5px;border-radius:5px}.hg-theme-default .hg-button{display:inline-block;flex-grow:1}.hg-theme-default .hg-row{display:flex}.hg-theme-default .hg-row:not(:last-child){margin-bottom:5px}.hg-theme-default .hg-row .hg-button-container,.hg-theme-default .hg-row .hg-button:not(:last-child){margin-right:5px}.hg-theme-default .hg-row>div:last-child{margin-right:0}.hg-theme-default .hg-row .hg-button-container{display:flex}.hg-theme-default .hg-button{box-shadow:0 0 3px -1px rgba(0,0,0,.3);height:40px;border-radius:5px;box-sizing:border-box;padding:5px;background:#fff;border-bottom:1px solid #b5b5b5;cursor:pointer;display:flex;align-items:center;justify-content:center;-webkit-tap-highlight-color:rgba(0,0,0,0)}.hg-theme-default .hg-button.hg-activeButton{background:#efefef}.hg-theme-default.hg-layout-numeric .hg-button{width:33.3%;height:60px;align-items:center;display:flex;justify-content:center}.hg-theme-default .hg-button.hg-button-numpadadd,.hg-theme-default .hg-button.hg-button-numpadenter{height:85px}.hg-theme-default .hg-button.hg-button-numpad0{width:105px}.hg-theme-default .hg-button.hg-button-com{max-width:85px}.hg-theme-default .hg-button.hg-standardBtn.hg-button-at{max-width:45px}.hg-theme-default .hg-button.hg-selectedButton{background:rgba(5,25,70,.53);color:#fff}.hg-theme-default .hg-button.hg-standardBtn[data-skbtn=".com"]{max-width:82px}.hg-theme-default .hg-button.hg-standardBtn[data-skbtn="@"]{max-width:60px}\n/*# sourceMappingURL=index.css.map */',"",{version:3,sources:["webpack://./node_modules/simple-keyboard/build/css/index.css","webpack://./src/lib/components/Keyboard.css"],names:[],mappings:"AAAA;;;;;;;;;;EAUE,CCNF,kBACE,UAAW,CACX,wBAAiB,CAAjB,qBAAiB,CAAjB,oBAAiB,CAAjB,gBAAiB,CACjB,qBAAsB,CACtB,eAAgB,CAChB,yBACF,CAEA,kCACE,mBACF,CAGA,mCACE,cAAe,CACf,SAAU,CACV,iBACF,CAEA,kBACE,oHAC+C,CAC/C,wBAAyB,CACzB,WAAY,CACZ,iBACF,CAEA,6BACE,oBAAqB,CACrB,WAEF,CAEA,0BACE,YACF,CAEA,2CACE,iBACF,CAMA,qGACE,gBACF,CAEA,yCACE,cACF,CAEA,+CACE,YACF,CAEA,6BACE,sCAA+C,CAC/C,WAAY,CACZ,iBAAkB,CAClB,qBAAsB,CACtB,WAAY,CACZ,eAAiB,CACjB,+BAAgC,CAChC,cAAe,CACf,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,yCACF,CAEA,6CACE,kBACF,CAEA,+CACE,WAAY,CACZ,WAAY,CACZ,kBAAmB,CACnB,YAAa,CACb,sBACF,CAMA,oGACE,WACF,CAEA,+CACE,WACF,CAEA,2CACE,cACF,CAEA,yDACE,cACF,CAEA,+CACE,4BAAiC,CACjC,UACF,CAEA,+DACE,cACF,CAEA,4DACE,cACF;AD5GA,oCAAoC",sourcesContent:['/*!\n * \n *   simple-keyboard v2.32.68\n *   https://github.com/hodgef/simple-keyboard\n * \n *   Copyright (c) Francisco Hodge (https://github.com/hodgef)\n * \n *   This source code is licensed under the MIT license found in the\n *   LICENSE file in the root directory of this source tree.\n *   \n */\n/**\n * simple-keyboard\n * Theme: hg-theme-default\n */\n.hg-theme-default {\n  width: 100%;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  box-sizing: border-box;\n  overflow: hidden;\n  touch-action: manipulation;\n}\n\n.hg-theme-default .hg-button span {\n  pointer-events: none;\n}\n\n/* When using option "useButtonTag" */\n.hg-theme-default button.hg-button {\n  border-width: 0;\n  outline: 0;\n  font-size: inherit;\n}\n\n.hg-theme-default {\n  font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue",\n    Helvetica, Arial, "Lucida Grande", sans-serif;\n  background-color: #ececec;\n  padding: 5px;\n  border-radius: 5px;\n}\n\n.hg-theme-default .hg-button {\n  display: inline-block;\n  flex-grow: 1;\n  cursor: pointer;\n}\n\n.hg-theme-default .hg-row {\n  display: flex;\n}\n\n.hg-theme-default .hg-row:not(:last-child) {\n  margin-bottom: 5px;\n}\n\n.hg-theme-default .hg-row .hg-button:not(:last-child) {\n  margin-right: 5px;\n}\n\n.hg-theme-default .hg-row .hg-button-container {\n  margin-right: 5px;\n}\n\n.hg-theme-default .hg-row > div:last-child {\n  margin-right: 0;\n}\n\n.hg-theme-default .hg-row .hg-button-container {\n  display: flex;\n}\n\n.hg-theme-default .hg-button {\n  box-shadow: 0px 0px 3px -1px rgba(0, 0, 0, 0.3);\n  height: 40px;\n  border-radius: 5px;\n  box-sizing: border-box;\n  padding: 5px;\n  background: white;\n  border-bottom: 1px solid #b5b5b5;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n.hg-theme-default .hg-button.hg-activeButton {\n  background: #efefef;\n}\n\n.hg-theme-default.hg-layout-numeric .hg-button {\n  width: 33.3%;\n  height: 60px;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.hg-theme-default .hg-button.hg-button-numpadadd {\n  height: 85px;\n}\n\n.hg-theme-default .hg-button.hg-button-numpadenter {\n  height: 85px;\n}\n\n.hg-theme-default .hg-button.hg-button-numpad0 {\n  width: 105px;\n}\n\n.hg-theme-default .hg-button.hg-button-com {\n  max-width: 85px;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn.hg-button-at {\n  max-width: 45px;\n}\n\n.hg-theme-default .hg-button.hg-selectedButton {\n  background: rgba(5, 25, 70, 0.53);\n  color: white;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn[data-skbtn=".com"] {\n  max-width: 82px;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn[data-skbtn="@"] {\n  max-width: 60px;\n}\n\n','/**\n * simple-keyboard\n * Theme: hg-theme-default\n */\n.hg-theme-default {\n  width: 100%;\n  user-select: none;\n  box-sizing: border-box;\n  overflow: hidden;\n  touch-action: manipulation;\n}\n\n.hg-theme-default .hg-button span {\n  pointer-events: none;\n}\n\n/* When using option "useButtonTag" */\n.hg-theme-default button.hg-button {\n  border-width: 0;\n  outline: 0;\n  font-size: inherit;\n}\n\n.hg-theme-default {\n  font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue",\n    Helvetica, Arial, "Lucida Grande", sans-serif;\n  background-color: #ececec;\n  padding: 5px;\n  border-radius: 5px;\n}\n\n.hg-theme-default .hg-button {\n  display: inline-block;\n  flex-grow: 1;\n  cursor: pointer;\n}\n\n.hg-theme-default .hg-row {\n  display: flex;\n}\n\n.hg-theme-default .hg-row:not(:last-child) {\n  margin-bottom: 5px;\n}\n\n.hg-theme-default .hg-row .hg-button:not(:last-child) {\n  margin-right: 5px;\n}\n\n.hg-theme-default .hg-row .hg-button-container {\n  margin-right: 5px;\n}\n\n.hg-theme-default .hg-row > div:last-child {\n  margin-right: 0;\n}\n\n.hg-theme-default .hg-row .hg-button-container {\n  display: flex;\n}\n\n.hg-theme-default .hg-button {\n  box-shadow: 0px 0px 3px -1px rgba(0, 0, 0, 0.3);\n  height: 40px;\n  border-radius: 5px;\n  box-sizing: border-box;\n  padding: 5px;\n  background: white;\n  border-bottom: 1px solid #b5b5b5;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n.hg-theme-default .hg-button.hg-activeButton {\n  background: #efefef;\n}\n\n.hg-theme-default.hg-layout-numeric .hg-button {\n  width: 33.3%;\n  height: 60px;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.hg-theme-default .hg-button.hg-button-numpadadd {\n  height: 85px;\n}\n\n.hg-theme-default .hg-button.hg-button-numpadenter {\n  height: 85px;\n}\n\n.hg-theme-default .hg-button.hg-button-numpad0 {\n  width: 105px;\n}\n\n.hg-theme-default .hg-button.hg-button-com {\n  max-width: 85px;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn.hg-button-at {\n  max-width: 45px;\n}\n\n.hg-theme-default .hg-button.hg-selectedButton {\n  background: rgba(5, 25, 70, 0.53);\n  color: white;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn[data-skbtn=".com"] {\n  max-width: 82px;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn[data-skbtn="@"] {\n  max-width: 60px;\n}\n'],sourceRoot:""}]);const a=r},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=e(t);return t[2]?"@media ".concat(t[2]," {").concat(i,"}"):i})).join("")},t.i=function(e,i,n){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(n)for(var s=0;s<this.length;s++){var r=this[s][0];null!=r&&(o[r]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);n&&o[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),t.push(l))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,n=new Array(t);i<t;i++)n[i]=e[i];return n}e.exports=function(e){var i,n,o=(n=4,function(e){if(Array.isArray(e))return e}(i=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var i=[],n=!0,o=!1,s=void 0;try{for(var r,a=e[Symbol.iterator]();!(n=(r=a.next()).done)&&(i.push(r.value),!t||i.length!==t);n=!0);}catch(e){o=!0,s=e}finally{try{n||null==a.return||a.return()}finally{if(o)throw s}}return i}}(i,n)||function(e,i){if(e){if("string"==typeof e)return t(e,i);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?t(e,i):void 0}}(i,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=o[1],r=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),d="/*# ".concat(l," */"),h=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[s].concat(h).concat([d]).join("\n")}return[s].join("\n")}},86:function(e){e.exports=function(e){var t={};function i(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}return i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)i.d(n,o,function(t){return e[t]}.bind(null,o));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/",i(i.s=0)}([function(e,t,i){e.exports=i(1)},function(e,t,i){"use strict";function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,n=new Array(t);i<t;i++)n[i]=e[i];return n}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}i.r(t);var r,a,l,d=function(){function e(t){var i=t.getOptions,n=t.getCaretPosition,o=t.getCaretPositionEnd,s=t.dispatch;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.getOptions=i,this.getCaretPosition=n,this.getCaretPositionEnd=o,this.dispatch=s,e.bindMethods(e,this)}var t,i,r;return t=e,r=[{key:"bindMethods",value:function(e,t){var i,o=function(e,t){var i;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(i=function(e,t){if(e){if("string"==typeof e)return n(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?n(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){i&&(e=i);var o=0,s=function(){};return{s,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,a=!0,l=!1;return{s:function(){i=e[Symbol.iterator]()},n:function(){var e=i.next();return a=e.done,e},e:function(e){l=!0,r=e},f:function(){try{a||null==i.return||i.return()}finally{if(l)throw r}}}}(Object.getOwnPropertyNames(e.prototype));try{for(o.s();!(i=o.n()).done;){var s=i.value;"constructor"===s||"bindMethods"===s||(t[s]=t[s].bind(t))}}catch(e){o.e(e)}finally{o.f()}}}],(i=[{key:"getButtonClass",value:function(e){var t=e.includes("{")&&e.includes("}")&&"{//}"!==e?"functionBtn":"standardBtn",i=e.replace("{","").replace("}",""),n="";return"standardBtn"!==t&&(n=" hg-button-".concat(i)),"hg-".concat(t).concat(n)}},{key:"getDefaultDiplay",value:function(){return{"{bksp}":"backspace","{backspace}":"backspace","{enter}":"< enter","{shift}":"shift","{shiftleft}":"shift","{shiftright}":"shift","{alt}":"alt","{s}":"shift","{tab}":"tab","{lock}":"caps","{capslock}":"caps","{accept}":"Submit","{space}":" ","{//}":" ","{esc}":"esc","{escape}":"esc","{f1}":"f1","{f2}":"f2","{f3}":"f3","{f4}":"f4","{f5}":"f5","{f6}":"f6","{f7}":"f7","{f8}":"f8","{f9}":"f9","{f10}":"f10","{f11}":"f11","{f12}":"f12","{numpaddivide}":"/","{numlock}":"lock","{arrowup}":"↑","{arrowleft}":"←","{arrowdown}":"↓","{arrowright}":"→","{prtscr}":"print","{scrolllock}":"scroll","{pause}":"pause","{insert}":"ins","{home}":"home","{pageup}":"up","{delete}":"del","{end}":"end","{pagedown}":"down","{numpadmultiply}":"*","{numpadsubtract}":"-","{numpadadd}":"+","{numpadenter}":"enter","{period}":".","{numpaddecimal}":".","{numpad0}":"0","{numpad1}":"1","{numpad2}":"2","{numpad3}":"3","{numpad4}":"4","{numpad5}":"5","{numpad6}":"6","{numpad7}":"7","{numpad8}":"8","{numpad9}":"9"}}},{key:"getButtonDisplayName",value:function(e,t,i){return(t=i?Object.assign({},this.getDefaultDiplay(),t):t||this.getDefaultDiplay())[e]||e}},{key:"getUpdatedInput",value:function(e,t,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:i,o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],s=this.getOptions(),r=[i,n,o],a=t;return("{bksp}"===e||"{backspace}"===e)&&a.length>0?a=this.removeAt.apply(this,[a].concat(r)):"{space}"===e?a=this.addStringAt.apply(this,[a," "].concat(r)):"{tab}"!==e||"boolean"==typeof s.tabCharOnTab&&!1===s.tabCharOnTab?"{enter}"!==e&&"{numpadenter}"!==e||!s.newLineOnEnter?e.includes("numpad")&&Number.isInteger(Number(e[e.length-2]))?a=this.addStringAt.apply(this,[a,e[e.length-2]].concat(r)):"{numpaddivide}"===e?a=this.addStringAt.apply(this,[a,"/"].concat(r)):"{numpadmultiply}"===e?a=this.addStringAt.apply(this,[a,"*"].concat(r)):"{numpadsubtract}"===e?a=this.addStringAt.apply(this,[a,"-"].concat(r)):"{numpadadd}"===e?a=this.addStringAt.apply(this,[a,"+"].concat(r)):"{numpaddecimal}"===e?a=this.addStringAt.apply(this,[a,"."].concat(r)):"{"===e||"}"===e?a=this.addStringAt.apply(this,[a,e].concat(r)):e.includes("{")||e.includes("}")||(a=this.addStringAt.apply(this,[a,e].concat(r))):a=this.addStringAt.apply(this,[a,"\n"].concat(r)):a=this.addStringAt.apply(this,[a,"\t"].concat(r)),a}},{key:"updateCaretPos",value:function(e,t){var i=this.updateCaretPosAction(e,t);this.dispatch((function(e){e.setCaretPosition(i)}))}},{key:"updateCaretPosAction",value:function(e,t){var i=this.getOptions(),n=this.getCaretPosition();return t?n>0&&(n-=e):n+=e,i.debug&&console.log("Caret at:",n,"(".concat(this.keyboardDOMClass,")")),n}},{key:"addStringAt",value:function(e,t){var i,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.length,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:e.length,s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];return n||0===n?(i=[e.slice(0,n),t,e.slice(o)].join(""),this.isMaxLengthReached()||s&&this.updateCaretPos(t.length)):i=e+t,i}},{key:"removeAt",value:function(e){var t,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.length,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.length,o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(0===i&&0===n)return e;if(i===n){var s=/([\uD800-\uDBFF][\uDC00-\uDFFF])/g;i&&i>=0?e.substring(i-2,i).match(s)?(t=e.substr(0,i-2)+e.substr(i),o&&this.updateCaretPos(2,!0)):(t=e.substr(0,i-1)+e.substr(i),o&&this.updateCaretPos(1,!0)):e.slice(-2).match(s)?(t=e.slice(0,-2),o&&this.updateCaretPos(2,!0)):(t=e.slice(0,-1),o&&this.updateCaretPos(1,!0))}else t=e.slice(0,i)+e.slice(n),o&&this.dispatch((function(e){e.setCaretPosition(i)}));return t}},{key:"handleMaxLength",value:function(e,t){var i=this.getOptions(),n=i.maxLength,s=e[i.inputName],r=t.length-1>=n;if(t.length<=s.length)return!1;if(Number.isInteger(n))return i.debug&&console.log("maxLength (num) reached:",r),r?(this.maxLengthReached=!0,!0):(this.maxLengthReached=!1,!1);if("object"===o(n)){var a=t.length-1>=n[i.inputName];return i.debug&&console.log("maxLength (obj) reached:",a),a?(this.maxLengthReached=!0,!0):(this.maxLengthReached=!1,!1)}}},{key:"isMaxLengthReached",value:function(){return Boolean(this.maxLengthReached)}},{key:"isTouchDevice",value:function(){return"ontouchstart"in window||navigator.maxTouchPoints}},{key:"pointerEventsSupported",value:function(){return window.PointerEvent}},{key:"camelCase",value:function(e){return!!e&&e.toLowerCase().trim().split(/[.\-_\s]/g).reduce((function(e,t){return t.length?e+t[0].toUpperCase()+t.slice(1):e}))}}])&&s(t.prototype,i),r&&s(t,r),e}();l=function(){},(a="noop")in(r=d)?Object.defineProperty(r,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):r[a]=l;var h=d;function u(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var p=function(){function e(t){var i=t.dispatch,n=t.getOptions;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.dispatch=i,this.getOptions=n,h.bindMethods(e,this)}var t,i;return t=e,(i=[{key:"handleHighlightKeyDown",value:function(e){var t=this.getOptions(),i=this.getSimpleKeyboardLayoutKey(e);this.dispatch((function(e){var n=e.getButtonElement(i)||e.getButtonElement("{".concat(i,"}"));n&&(n.style.backgroundColor=t.physicalKeyboardHighlightBgColor||"#dadce4",n.style.color=t.physicalKeyboardHighlightTextColor||"black",t.physicalKeyboardHighlightPress&&(n.onpointerdown||n.onmousedown||n.ontouchstart||h.noop)())}))}},{key:"handleHighlightKeyUp",value:function(e){var t=this.getOptions(),i=this.getSimpleKeyboardLayoutKey(e);this.dispatch((function(e){var n=e.getButtonElement(i)||e.getButtonElement("{".concat(i,"}"));n&&n.removeAttribute&&(n.removeAttribute("style"),t.physicalKeyboardHighlightPress&&(n.onpointerup||n.onmouseup||n.ontouchend||h.noop)())}))}},{key:"getSimpleKeyboardLayoutKey",value:function(e){var t;return((t=e.code.includes("Numpad")||e.code.includes("Shift")||e.code.includes("Space")||e.code.includes("Backspace")||e.code.includes("Control")||e.code.includes("Alt")||e.code.includes("Meta")?e.code:e.key)&&t!==t.toUpperCase()||"F"===e.code[0]&&Number.isInteger(Number(e.code[1]))&&e.code.length<=3)&&(t=t?t.toLowerCase():t),t}}])&&u(t.prototype,i),e}();function c(e){return function(e){if(Array.isArray(e))return g(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return g(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?g(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function g(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,n=new Array(t);i<t;i++)n[i]=e[i];return n}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function b(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var v=function(){function e(){var t=this;m(this,e),f(this,"handleParams",(function(e){var t,i,n;if("string"==typeof e[0])t=e[0].split(".").join(""),i=document.querySelector(".".concat(t)),n=e[1];else if(e[0]instanceof HTMLDivElement){if(!e[0].className)throw console.warn("Any DOM element passed as parameter must have a class."),new Error("KEYBOARD_DOM_CLASS_ERROR");t=e[0].className.split(" ")[0],i=e[0],n=e[1]}else t="simple-keyboard",i=document.querySelector(".".concat(t)),n=e[0];return{keyboardDOMClass:t,keyboardDOM:i,options:n}})),f(this,"getOptions",(function(){return t.options})),f(this,"getCaretPosition",(function(){return t.caretPosition})),f(this,"getCaretPositionEnd",(function(){return t.caretPositionEnd})),f(this,"registerModule",(function(e,i){t.modules[e]||(t.modules[e]={}),i(t.modules[e])})),f(this,"getKeyboardClassString",(function(){for(var e=arguments.length,i=new Array(e),n=0;n<e;n++)i[n]=arguments[n];return[t.keyboardDOMClass].concat(i).filter((function(e){return!!e})).join(" ")}));for(var i=arguments.length,n=new Array(i),o=0;o<i;o++)n[o]=arguments[o];var s=this.handleParams(n),r=s.keyboardDOMClass,a=s.keyboardDOM,l=s.options,d=void 0===l?{}:l;if(this.utilities=new h({getOptions:this.getOptions,getCaretPosition:this.getCaretPosition,getCaretPositionEnd:this.getCaretPositionEnd,dispatch:this.dispatch}),this.caretPosition=null,this.caretPositionEnd=null,this.keyboardDOM=a,this.options=d,this.options.layoutName=this.options.layoutName||"default",this.options.theme=this.options.theme||"hg-theme-default",this.options.inputName=this.options.inputName||"default",this.options.preventMouseDownDefault=this.options.preventMouseDownDefault||!1,this.keyboardPluginClasses="",h.bindMethods(e,this),this.input={},this.input[this.options.inputName]="",this.keyboardDOMClass=r,this.buttonElements={},window.SimpleKeyboardInstances||(window.SimpleKeyboardInstances={}),this.currentInstanceName=this.utilities.camelCase(this.keyboardDOMClass),window.SimpleKeyboardInstances[this.currentInstanceName]=this,this.allKeyboardInstances=window.SimpleKeyboardInstances,this.keyboardInstanceNames=Object.keys(window.SimpleKeyboardInstances),this.isFirstKeyboardInstance=this.keyboardInstanceNames[0]===this.currentInstanceName,this.physicalKeyboard=new p({dispatch:this.dispatch,getOptions:this.getOptions}),!this.keyboardDOM)throw console.warn('".'.concat(r,'" was not found in the DOM.')),new Error("KEYBOARD_DOM_ERROR");this.render(),this.modules={},this.loadModules()}var t,i;return t=e,(i=[{key:"setCaretPosition",value:function(e,t){this.caretPosition=e,this.caretPositionEnd=t||e}},{key:"handleButtonClicked",value:function(e){var t=this.options.debug;if("{//}"===e)return!1;"function"==typeof this.options.onKeyPress&&this.options.onKeyPress(e),this.input[this.options.inputName]||(this.input[this.options.inputName]="");var i=this.utilities.getUpdatedInput(e,this.input[this.options.inputName],this.caretPosition,this.caretPositionEnd);if(this.input[this.options.inputName]!==i&&(!this.options.inputPattern||this.options.inputPattern&&this.inputPatternIsValid(i))){if(this.options.maxLength&&this.utilities.handleMaxLength(this.input,i))return!1;this.input[this.options.inputName]=this.utilities.getUpdatedInput(e,this.input[this.options.inputName],this.caretPosition,this.caretPositionEnd,!0),t&&console.log("Input changed:",this.getAllInputs()),this.options.debug&&console.log("Caret at: ",this.getCaretPosition(),this.getCaretPositionEnd(),"(".concat(this.keyboardDOMClass,")")),this.options.syncInstanceInputs&&this.syncInstanceInputs(),"function"==typeof this.options.onChange&&this.options.onChange(this.getInput(this.options.inputName,!0)),"function"==typeof this.options.onChangeAll&&this.options.onChangeAll(this.getAllInputs())}t&&console.log("Key pressed:",e)}},{key:"handleButtonMouseDown",value:function(e,t){var i=this;t&&(this.options.preventMouseDownDefault&&t.preventDefault(),this.options.stopMouseDownPropagation&&t.stopPropagation(),t.target.classList.add(this.activeButtonClass)),this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),this.holdTimeout&&clearTimeout(this.holdTimeout),this.isMouseHold=!0,this.options.disableButtonHold||(this.holdTimeout=setTimeout((function(){(i.isMouseHold&&(!e.includes("{")&&!e.includes("}")||"{delete}"===e||"{backspace}"===e||"{bksp}"===e||"{space}"===e||"{tab}"===e)||"{arrowright}"===e||"{arrowleft}"===e||"{arrowup}"===e||"{arrowdown}"===e)&&(i.options.debug&&console.log("Button held:",e),i.handleButtonHold(e,t)),clearTimeout(i.holdTimeout)}),500))}},{key:"handleButtonMouseUp",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;i&&(this.options.preventMouseUpDefault&&i.preventDefault(),this.options.stopMouseUpPropagation&&i.stopPropagation()),this.recurseButtons((function(t){t.classList.remove(e.activeButtonClass)})),this.isMouseHold=!1,this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),t&&"function"==typeof this.options.onKeyReleased&&this.options.onKeyReleased(t)}},{key:"handleKeyboardContainerMouseDown",value:function(e){this.options.preventMouseDownDefault&&e.preventDefault()}},{key:"handleButtonHold",value:function(e){var t=this;this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),this.holdInteractionTimeout=setTimeout((function(){t.isMouseHold?(t.handleButtonClicked(e),t.handleButtonHold(e)):clearTimeout(t.holdInteractionTimeout)}),100)}},{key:"syncInstanceInputs",value:function(){var e=this;this.dispatch((function(t){t.replaceInput(e.input),t.setCaretPosition(e.caretPosition,e.caretPositionEnd)}))}},{key:"clearInput",value:function(e){e=e||this.options.inputName,this.input[e]="",this.setCaretPosition(0),this.options.syncInstanceInputs&&this.syncInstanceInputs()}},{key:"getInput",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e=e||this.options.inputName,this.options.syncInstanceInputs&&!t&&this.syncInstanceInputs(),this.options.rtl?"‫"+this.input[e].replace("‫","").replace("‬","")+"‬":this.input[e]}},{key:"getAllInputs",value:function(){var e=this,t={};return Object.keys(this.input).forEach((function(i){t[i]=e.getInput(i,!0)})),t}},{key:"setInput",value:function(e,t){t=t||this.options.inputName,this.input[t]=e,this.options.syncInstanceInputs&&this.syncInstanceInputs()}},{key:"replaceInput",value:function(e){this.input=e}},{key:"setOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=this.changedOptions(e);this.options=Object.assign(this.options,e),t.length&&(this.options.debug&&console.log("changedOptions",t),this.onSetOptions(e),this.render())}},{key:"changedOptions",value:function(e){var t=this;return Object.keys(e).filter((function(i){return JSON.stringify(e[i])!==JSON.stringify(t.options[i])}))}},{key:"onSetOptions",value:function(e){e.inputName&&(this.options.debug&&console.log("inputName changed. caretPosition reset."),this.setCaretPosition(null))}},{key:"clear",value:function(){this.keyboardDOM.innerHTML="",this.keyboardDOM.className=this.keyboardDOMClass,this.buttonElements={}}},{key:"dispatch",value:function(e){if(!window.SimpleKeyboardInstances)throw console.warn("SimpleKeyboardInstances is not defined. Dispatch cannot be called."),new Error("INSTANCES_VAR_ERROR");return Object.keys(window.SimpleKeyboardInstances).forEach((function(t){e(window.SimpleKeyboardInstances[t],t)}))}},{key:"addButtonTheme",value:function(e,t){var i=this;if(!t||!e)return!1;e.split(" ").forEach((function(n){t.split(" ").forEach((function(t){i.options.buttonTheme||(i.options.buttonTheme=[]);var o=!1;i.options.buttonTheme.map((function(e){if(e.class.split(" ").includes(t)){o=!0;var i=e.buttons.split(" ");i.includes(n)||(o=!0,i.push(n),e.buttons=i.join(" "))}return e})),o||i.options.buttonTheme.push({class:t,buttons:e})}))})),this.render()}},{key:"removeButtonTheme",value:function(e,t){var i=this;if(!e&&!t)return this.options.buttonTheme=[],this.render(),!1;e&&Array.isArray(this.options.buttonTheme)&&this.options.buttonTheme.length&&(e.split(" ").forEach((function(e){i.options.buttonTheme.map((function(n,o){if(t&&t.includes(n.class)||!t){var s=n.buttons.split(" ").filter((function(t){return t!==e}));s.length?n.buttons=s.join(" "):(i.options.buttonTheme.splice(o,1),n=null)}return n}))})),this.render())}},{key:"getButtonElement",value:function(e){var t,i=this.buttonElements[e];return i&&(t=i.length>1?i:i[0]),t}},{key:"inputPatternIsValid",value:function(e){var t,i=this.options.inputPattern;if((t=i instanceof RegExp?i:i[this.options.inputName])&&e){var n=t.test(e);return this.options.debug&&console.log('inputPattern ("'.concat(t,'"): ').concat(n?"passed":"did not pass!")),n}return!0}},{key:"setEventListeners",value:function(){!this.isFirstKeyboardInstance&&this.allKeyboardInstances||(this.options.debug&&console.log("Caret handling started (".concat(this.keyboardDOMClass,")")),document.addEventListener("keyup",this.handleKeyUp),document.addEventListener("keydown",this.handleKeyDown),document.addEventListener("mouseup",this.handleMouseUp),document.addEventListener("touchend",this.handleTouchEnd))}},{key:"handleKeyUp",value:function(e){this.caretEventHandler(e),this.options.physicalKeyboardHighlight&&this.physicalKeyboard.handleHighlightKeyUp(e)}},{key:"handleKeyDown",value:function(e){this.options.physicalKeyboardHighlight&&this.physicalKeyboard.handleHighlightKeyDown(e)}},{key:"handleMouseUp",value:function(e){this.caretEventHandler(e)}},{key:"handleTouchEnd",value:function(e){this.caretEventHandler(e)}},{key:"caretEventHandler",value:function(e){var t;e.target.tagName&&(t=e.target.tagName.toLowerCase()),this.dispatch((function(i){var n=e.target===i.keyboardDOM||e.target&&i.keyboardDOM.contains(e.target);i.isMouseHold&&(i.isMouseHold=!1),"textarea"!==t&&"input"!==t||i.options.disableCaretPositioning?!i.options.disableCaretPositioning&&n||i.setCaretPosition(null):(i.setCaretPosition(e.target.selectionStart,e.target.selectionEnd),i.options.debug&&console.log("Caret at: ",i.getCaretPosition(),i.getCaretPositionEnd(),e&&e.target.tagName.toLowerCase(),"(".concat(i.keyboardDOMClass,")")))}))}},{key:"recurseButtons",value:function(e){var t=this;e&&Object.keys(this.buttonElements).forEach((function(i){return t.buttonElements[i].forEach(e)}))}},{key:"destroy",value:function(){this.options.debug&&console.log("Destroying simple-keyboard instance: ".concat(this.currentInstanceName)),document.removeEventListener("keyup",this.handleKeyUp),document.removeEventListener("keydown",this.handleKeyDown),document.removeEventListener("mouseup",this.handleMouseUp),document.removeEventListener("touchend",this.handleTouchEnd),document.onpointerup=null,document.ontouchend=null,document.ontouchcancel=null,document.onmouseup=null;var e=function(e){e.onpointerdown=null,e.onpointerup=null,e.onpointercancel=null,e.ontouchstart=null,e.ontouchend=null,e.ontouchcancel=null,e.onclick=null,e.onmousedown=null,e.onmouseup=null,e.remove(),e=null};this.recurseButtons(e),this.recurseButtons=null,e=null,this.keyboardDOM.onpointerdown=null,this.keyboardDOM.ontouchstart=null,this.keyboardDOM.onmousedown=null,this.clear(),window.SimpleKeyboardInstances[this.currentInstanceName]=null,delete window.SimpleKeyboardInstances[this.currentInstanceName],this.initialized=!1}},{key:"getButtonThemeClasses",value:function(e){var t=this.options.buttonTheme,i=[];return Array.isArray(t)&&t.forEach((function(t){if(t.class&&"string"==typeof t.class&&t.buttons&&"string"==typeof t.buttons){var n=t.class.split(" ");t.buttons.split(" ").includes(e)&&(i=[].concat(c(i),c(n)))}else console.warn('Incorrect "buttonTheme". Please check the documentation.',t)})),i}},{key:"setDOMButtonAttributes",value:function(e,t){var i=this.options.buttonAttributes;Array.isArray(i)&&i.forEach((function(i){i.attribute&&"string"==typeof i.attribute&&i.value&&"string"==typeof i.value&&i.buttons&&"string"==typeof i.buttons?i.buttons.split(" ").includes(e)&&t(i.attribute,i.value):console.warn('Incorrect "buttonAttributes". Please check the documentation.',i)}))}},{key:"onTouchDeviceDetected",value:function(){this.processAutoTouchEvents(),this.disableContextualWindow()}},{key:"disableContextualWindow",value:function(){window.oncontextmenu=function(e){if(e.target.classList.contains("hg-button"))return e.preventDefault(),e.stopPropagation(),!1}}},{key:"processAutoTouchEvents",value:function(){this.options.autoUseTouchEvents&&(this.options.useTouchEvents=!0,this.options.debug&&console.log("autoUseTouchEvents: Touch device detected, useTouchEvents enabled."))}},{key:"onInit",value:function(){this.options.debug&&console.log("".concat(this.keyboardDOMClass," Initialized")),this.setEventListeners(),"function"==typeof this.options.onInit&&this.options.onInit()}},{key:"beforeFirstRender",value:function(){this.utilities.isTouchDevice()&&this.onTouchDeviceDetected(),"function"==typeof this.options.beforeFirstRender&&this.options.beforeFirstRender(),this.isFirstKeyboardInstance&&this.utilities.pointerEventsSupported()&&!this.options.useTouchEvents&&!this.options.useMouseEvents&&this.options.debug&&console.log("Using PointerEvents as it is supported by this browser"),this.options.useTouchEvents&&this.options.debug&&console.log("useTouchEvents has been enabled. Only touch events will be used.")}},{key:"beforeRender",value:function(){"function"==typeof this.options.beforeRender&&this.options.beforeRender()}},{key:"onRender",value:function(){"function"==typeof this.options.onRender&&this.options.onRender()}},{key:"onModulesLoaded",value:function(){"function"==typeof this.options.onModulesLoaded&&this.options.onModulesLoaded(this)}},{key:"loadModules",value:function(){var e=this;Array.isArray(this.options.modules)&&(this.options.modules.forEach((function(t){(new t).init(e)})),this.keyboardPluginClasses="modules-loaded",this.render(),this.onModulesLoaded())}},{key:"getModuleProp",value:function(e,t){return!!this.modules[e]&&this.modules[e][t]}},{key:"getModulesList",value:function(){return Object.keys(this.modules)}},{key:"parseRowDOMContainers",value:function(e,t,i,n){var o=this,s=Array.from(e.children),r=0;return s.length&&i.forEach((function(i,a){var l=n[a];if(!(l&&l>i))return!1;var d=i-r,h=l-r,u=document.createElement("div");u.className+="hg-button-container";var p="".concat(o.options.layoutName,"-r").concat(t,"c").concat(a);u.setAttribute("data-skUID",p);var c=s.splice(d,h-d+1);r=h-d,c.forEach((function(e){return u.appendChild(e)})),s.splice(d,0,u),e.innerHTML="",s.forEach((function(t){return e.appendChild(t)})),o.options.debug&&console.log("rowDOMContainer",c,d,h,r+1)})),e}},{key:"render",value:function(){var e=this;this.clear(),this.initialized||this.beforeFirstRender(),this.beforeRender();var t="hg-layout-".concat(this.options.layoutName),i=this.options.layout||{default:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w e r t y u i o p [ ] \\","{lock} a s d f g h j k l ; ' {enter}","{shift} z x c v b n m , . / {shift}",".com @ {space}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W E R T Y U I O P { } |",'{lock} A S D F G H J K L : " {enter}',"{shift} Z X C V B N M < > ? {shift}",".com @ {space}"]},n=this.options.useTouchEvents||!1,o=n?"hg-touch-events":"",s=this.options.useMouseEvents||!1,r=this.options.disableRowButtonContainers;this.keyboardDOM.className=this.getKeyboardClassString(this.options.theme,t,this.keyboardPluginClasses,o),i[this.options.layoutName].forEach((function(t,i){var o=t.split(" "),a=document.createElement("div");a.className+="hg-row";var l=[],d=[];o.forEach((function(t,o){var h,u=!r&&"string"==typeof t&&t.length>1&&0===t.indexOf("["),p=!r&&"string"==typeof t&&t.length>1&&t.indexOf("]")===t.length-1;u&&(l.push(o),t=t.replace(/\[/g,"")),p&&(d.push(o),t=t.replace(/\]/g,""));var g=e.utilities.getButtonClass(t),m=e.utilities.getButtonDisplayName(t,e.options.display,e.options.mergeDisplay),b=e.options.useButtonTag?"button":"div",f=document.createElement(b);f.className+="hg-button ".concat(g),(h=f.classList).add.apply(h,c(e.getButtonThemeClasses(t))),e.setDOMButtonAttributes(t,(function(e,t){f.setAttribute(e,t)})),e.activeButtonClass="hg-activeButton",!e.utilities.pointerEventsSupported()||n||s?n?(f.ontouchstart=function(i){e.handleButtonClicked(t),e.handleButtonMouseDown(t,i)},f.ontouchend=function(i){e.handleButtonMouseUp(t,i)},f.ontouchcancel=function(i){e.handleButtonMouseUp(t,i)}):(f.onclick=function(){e.isMouseHold=!1,e.handleButtonClicked(t)},f.onmousedown=function(i){e.handleButtonMouseDown(t,i)},f.onmouseup=function(i){e.handleButtonMouseUp(t,i)}):(f.onpointerdown=function(i){e.handleButtonClicked(t),e.handleButtonMouseDown(t,i)},f.onpointerup=function(i){e.handleButtonMouseUp(t,i)},f.onpointercancel=function(i){e.handleButtonMouseUp(t,i)}),f.setAttribute("data-skBtn",t);var v="".concat(e.options.layoutName,"-r").concat(i,"b").concat(o);f.setAttribute("data-skBtnUID",v);var C=document.createElement("span");C.innerHTML=m,f.appendChild(C),e.buttonElements[t]||(e.buttonElements[t]=[]),e.buttonElements[t].push(f),a.appendChild(f)})),a=e.parseRowDOMContainers(a,i,l,d),e.keyboardDOM.appendChild(a)})),this.onRender(),this.initialized||(this.initialized=!0,!this.utilities.pointerEventsSupported()||n||s?n?(document.ontouchend=function(){return e.handleButtonMouseUp()},document.ontouchcancel=function(){return e.handleButtonMouseUp()},this.keyboardDOM.ontouchstart=function(t){return e.handleKeyboardContainerMouseDown(t)}):n||(document.onmouseup=function(){return e.handleButtonMouseUp()},this.keyboardDOM.onmousedown=function(t){return e.handleKeyboardContainerMouseDown(t)}):(document.onpointerup=function(){return e.handleButtonMouseUp()},this.keyboardDOM.onpointerdown=function(t){return e.handleKeyboardContainerMouseDown(t)}),this.onInit())}}])&&b(t.prototype,i),e}();t.default=v}])},23:(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>r});var n=i(379),o=i.n(n),s=i(634);o()(s.Z,{insert:"head",singleton:!1});const r=s.Z.locals||{}},379:(e,t,i)=>{"use strict";var n,o=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),s=[];function r(e){for(var t=-1,i=0;i<s.length;i++)if(s[i].identifier===e){t=i;break}return t}function a(e,t){for(var i={},n=[],o=0;o<e.length;o++){var a=e[o],l=t.base?a[0]+t.base:a[0],d=i[l]||0,h="".concat(l," ").concat(d);i[l]=d+1;var u=r(h),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==u?(s[u].references++,s[u].updater(p)):s.push({identifier:h,updater:m(p,t),references:1}),n.push(h)}return n}function l(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var s=i.nc;s&&(n.nonce=s)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var r=o(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var d,h=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join("\n")});function u(e,t,i,n){var o=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=h(t,o);else{var s=document.createTextNode(o),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(s,r[t]):e.appendChild(s)}}function p(e,t,i){var n=i.css,o=i.media,s=i.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var c=null,g=0;function m(e,t){var i,n,o;if(t.singleton){var s=g++;i=c||(c=l(t)),n=u.bind(null,i,s,!1),o=u.bind(null,i,s,!0)}else i=l(t),n=p.bind(null,i,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var i=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<i.length;n++){var o=r(i[n]);s[o].references--}for(var l=a(e,t),d=0;d<i.length;d++){var h=r(i[d]);0===s[h].references&&(s[h].updater(),s.splice(h,1))}i=l}}}},958:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Calibration=t.calibration=void 0;const n=i(229),o=i(670);t.calibration=null;class s{constructor(e){this.amount=10,this.width=200,this.height=287,this.applyTransform=!1,this.previewTransform=!1,this.previewRectangle=!1,this.previewRectangleItem=null,this.previewTransformItem=null,this.cornersOnly=!1,this.points=[],this.transformMatrix=null,this.loadPoints(),this.createGUI(e)}static initialize(e){t.calibration=new s(e)}loadPoints(){if(null==!n.Settings.transformMatrix||null==n.Settings.transformMatrix.destinationPoints||n.Settings.transformMatrix.destinationPoints.length<8)return this.points=this.getDrawAreaPoints(),void(n.Settings.transformMatrix.destinationPoints=this.points.slice());this.points=n.Settings.transformMatrix.destinationPoints,this.applyTransform=n.Settings.transformMatrix.apply,this.updateTransformMatrix()}createGUI(e){this.gui=e.addFolder("Calibration"),this.gui.addButton("Set top left",(()=>this.updateTransform(0))),this.gui.addButton("Set top right",(()=>this.updateTransform(1))),this.gui.addButton("Set bottom right",(()=>this.updateTransform(2))),this.gui.addButton("Set bottom left",(()=>this.updateTransform(3))),this.gui.addButton("Reset transform",(()=>this.resetTransform())),this.previewTransformController=this.gui.add(this,"previewTransform").name("Preview transform").onFinishChange((()=>this.togglePreviewTransform())),this.gui.add(this,"applyTransform").name("Apply transform").onFinishChange((e=>{n.Settings.transformMatrix.apply=this.applyTransform,n.settingsManager.save(!1)}));let t=this.gui.addFolder("Rectangle test");t.add(this,"width",0,5e3,1).name("Width").onChange((()=>this.updatePreviewRectangle())),t.add(this,"height",0,5e3,1).name("Height").onChange((()=>this.updatePreviewRectangle())),t.add(this,"previewRectangle").name("Preview rectangle").onFinishChange((()=>this.togglePreviewRectangle())),t.add(this,"cornersOnly").name("Corners only").onFinishChange((()=>this.updatePreviewRectangle())),t.addButton("Draw rectangle",(()=>this.drawRectangle()));let i=t.addFolder("Parameter calibration");i.add(this,"amount",0,100,1).name("Amount"),i.addButton("Calibrate Y",(()=>this.calibrateY())),i.addButton("Calibrate Width",(()=>this.calibrateWidth()))}getDrawAreaPoints(){let e=o.tipibot.computeDrawArea(),t=[];return t.push(e.topLeft.x),t.push(e.topLeft.y),t.push(e.topRight.x),t.push(e.topRight.y),t.push(e.bottomRight.x),t.push(e.bottomRight.y),t.push(e.bottomLeft.x),t.push(e.bottomLeft.y),t}updateTransformMatrix(){let e=this.getDrawAreaPoints(),t=this.points;this.transformMatrix=PerspT(e,t)}updateTransform(e){let t=o.tipibot.getPosition();n.Settings.transformMatrix.destinationPoints[2*e]=t.x,n.Settings.transformMatrix.destinationPoints[2*e+1]=t.y,n.settingsManager.save(!1),this.points[2*e]=t.x,this.points[2*e+1]=t.y,this.updateTransformMatrix(),this.previewTransformController.setValue(!0,!0),this.updatePreviewTransform()}resetTransform(){this.points=this.getDrawAreaPoints(),this.transformMatrix=null,this.previewTransform?this.updatePreviewTransform():null!=this.previewRectangleItem&&(this.previewTransformItem.remove(),this.previewTransformItem=null)}transform(e){return null!=this.transformMatrix?new paper.Point(this.transformMatrix.transform(e.x,e.y)):e}getRectangle(){let e=o.tipibot.computeDrawArea().center.subtract(new paper.Point(this.width/2,this.height/2));return new paper.Rectangle(e,new paper.Size(this.width,this.height))}updatePreviewRectangle(){null!=this.previewRectangleItem&&(this.previewRectangleItem.remove(),this.previewRectangleItem=null);let e=this.getRectangle();if(this.cornersOnly){this.previewRectangleItem=new paper.Group;let t=new paper.Path;t.add(e.topLeft.add(new paper.Point(0,10))),t.add(e.topLeft),t.add(e.topLeft.add(new paper.Point(10,0)));let i=new paper.Path;i.add(e.topRight.add(new paper.Point(-10,0))),i.add(e.topRight),i.add(e.topRight.add(new paper.Point(0,10)));let n=new paper.Path;n.add(e.bottomRight.add(new paper.Point(0,-10))),n.add(e.bottomRight),n.add(e.bottomRight.add(new paper.Point(-10,0)));let o=new paper.Path;o.add(e.bottomLeft.add(new paper.Point(10,0))),o.add(e.bottomLeft),o.add(e.bottomLeft.add(new paper.Point(0,-10))),this.previewRectangleItem.addChild(t),this.previewRectangleItem.addChild(i),this.previewRectangleItem.addChild(n),this.previewRectangleItem.addChild(o)}else this.previewRectangleItem=paper.Path.Rectangle(e);this.previewRectangleItem.strokeColor="green",this.previewRectangleItem.strokeWidth=1}togglePreviewRectangle(){this.previewRectangle?this.updatePreviewRectangle():null!=this.previewRectangleItem&&(this.previewRectangleItem.remove(),this.previewRectangleItem=null)}updatePreviewTransform(){let e=o.tipibot.computeDrawArea(),t=this.transform(e.topLeft),i=this.transform(e.topRight),n=this.transform(e.bottomRight),s=this.transform(e.bottomLeft);null!=this.previewTransformItem&&(this.previewTransformItem.remove(),this.previewTransformItem=null),this.previewTransformItem=new paper.Path,this.previewTransformItem.add(t),this.previewTransformItem.add(i),this.previewTransformItem.add(n),this.previewTransformItem.add(s),this.previewTransformItem.add(t),this.previewTransformItem.strokeColor="orange",this.previewTransformItem.strokeWidth=1}togglePreviewTransform(){this.previewTransform?this.updatePreviewTransform():null!=this.previewTransformItem&&(this.previewTransformItem.remove(),this.previewTransformItem=null)}drawRectangle(){let e=this.getRectangle(),t=o.tipibot.getPosition();o.tipibot.sendSpecs(),o.tipibot.penUp(),this.cornersOnly?(o.tipibot.moveDirect(e.topLeft.add(new paper.Point(0,10))),o.tipibot.penDown(),o.tipibot.moveLinear(e.topLeft),o.tipibot.moveLinear(e.topLeft.add(new paper.Point(10,0))),o.tipibot.penUp(),o.tipibot.moveDirect(e.topRight.add(new paper.Point(-10,0))),o.tipibot.penDown(),o.tipibot.moveLinear(e.topRight),o.tipibot.moveLinear(e.topRight.add(new paper.Point(0,10))),o.tipibot.penUp(),o.tipibot.moveDirect(e.bottomRight.add(new paper.Point(0,-10))),o.tipibot.penDown(),o.tipibot.moveLinear(e.bottomRight),o.tipibot.moveLinear(e.bottomRight.add(new paper.Point(-10,0))),o.tipibot.penUp(),o.tipibot.moveDirect(e.bottomLeft.add(new paper.Point(10,0))),o.tipibot.penDown(),o.tipibot.moveLinear(e.bottomLeft),o.tipibot.moveLinear(e.bottomLeft.add(new paper.Point(0,-10)))):(o.tipibot.moveDirect(e.topLeft),o.tipibot.penDown(),o.tipibot.moveLinear(e.topRight),o.tipibot.moveLinear(e.bottomRight),o.tipibot.moveLinear(e.bottomLeft),o.tipibot.moveLinear(e.topLeft)),o.tipibot.penUp(),o.tipibot.moveDirect(t)}calibrateY(){let e=o.tipibot.getPosition();for(let t=-this.amount;t<=this.amount;t+=this.amount)o.tipibot.setPosition(new paper.Point(e.x,e.y+t),!0,!1),this.drawRectangle();o.tipibot.setPosition(e,!1,!1)}calibrateWidth(){let e=o.tipibot.getPosition(),t=n.Settings.tipibot.width,i=n.Settings.tipibot.height;for(let i=-this.amount;i<=this.amount;i+=this.amount)n.Settings.tipibot.width=t+i,o.tipibot.setPosition(new paper.Point(e.x+i/2,e.y),!1,!1),this.drawRectangle();n.Settings.tipibot.width=t,n.Settings.tipibot.height=i,o.tipibot.setPosition(e,!1,!1),o.tipibot.sendSpecs()}}t.Calibration=s},412:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommandDisplay=void 0;const n=i(229),o=i(107),s=i(758),r=i(271),a=i(670);t.CommandDisplay=class{constructor(){document.addEventListener("QueueCommand",(e=>this.queueCommand(e.detail)),!1),document.addEventListener("QueueCommands",(e=>this.queueCommands(e.detail)),!1),document.addEventListener("SendCommand",(e=>this.sendCommand(e.detail)),!1),document.addEventListener("CommandExecuted",(e=>this.commandExecuted(e.detail)),!1),document.addEventListener("ClearQueue",(e=>this.clearQueue()),!1),document.addEventListener("CancelCommand",(e=>this.commandExecuted(e.detail)),!1)}createGUI(e){this.gui=e.addFolder("Commands"),this.gui.open(),a.tipibot.gui=this.gui;let t={moveX:n.Settings.tipibot.homeX,moveY:n.Settings.tipibot.homeY};this.gui.add(t,"moveX",0,n.Settings.tipibot.width).name("Move X").onFinishChange((e=>a.tipibot.move(r.MoveType.Direct,new paper.Point(e,a.tipibot.getPosition().y)))),this.gui.add(t,"moveY",0,n.Settings.tipibot.height).name("Move Y").onFinishChange((e=>a.tipibot.move(r.MoveType.Direct,new paper.Point(a.tipibot.getPosition().x,e)))),this.gui.addButton("Go home",(()=>a.tipibot.goHome((()=>console.log("I am home :-)"))))),a.tipibot.penStateButton=this.gui.addButton("Pen down",(()=>a.tipibot.togglePenState())),a.tipibot.motorsEnableButton=this.gui.addButton("Disable motors",(()=>a.tipibot.toggleMotors())),this.gui.addButton("Initialize",(()=>o.communication.interpreter.initialize(!1))),this.pauseButton=this.gui.add({Pause:!1},"Pause").onChange((e=>o.communication.interpreter.setPause(e))),this.gui.addButton("Emergency stop",(()=>{this.pauseButton.setValue(!0),o.communication.interpreter.sendStop(!0)})),this.gui.addButton("Save commands",(()=>this.saveCommands())),this.gui.addButton("Clear commands",(()=>o.communication.interpreter.clearQueue()));let i=this.gui.addFolder("Command list");this.listJ=$('<ul id="command-list" class="c-list">'),i.open(),this.listJ.insertAfter($(i.gui.domElement).find("li"))}saveCommands(){let e=o.communication.interpreter.getGCode(),t=new Blob([e],{type:"text/plain;charset=utf-8"});saveAs(t,"gcode.txt")}click(e){if("BUTTON"==e.target.tagName){let t=parseInt(e.target.parentNode.id);o.communication.interpreter.removeCommand(t),this.removeCommand(t)}}createCommandItem(e){let t=$('<li id="'+e.id+'"">'),i=$("<div>").append(e.message).addClass("message"),n=$("<div>").append(e.data).addClass("data");t.append(i),t.append(n);let s=$("<button>x</button>");return s.click((t=>{o.communication.interpreter.removeCommand(e.id),this.removeCommand(e.id)})),t.append(s),t}queueCommands(e){let t=(""+Math.random()).replace(".",""),i=$('<li id="'+t+'" class="commands">'),n=e.length,s=$("<div>").text(n+"/"+n+" commands").addClass("message").attr("data-n-commands",n).attr("data-total-commands",n);i.append(s);let r=$("<button>x</button>");r.click((i=>{for(let t of e)o.communication.interpreter.removeCommand(t);this.removeCommand(t)})),i.append(r),this.listJ.append(i)}removeCommand(e){let t=this.listJ.find("#"+e);0!=t.length&&(t.remove(),this.updateName(),document.dispatchEvent(new CustomEvent("CommandListChanged")))}updateName(){$("#commands h3").text("Command list ("+this.listJ.children().length+")")}queueCommand(e){this.listJ.append(this.createCommandItem(e)),this.updateName(),document.dispatchEvent(new CustomEvent("CommandListChanged"))}sendCommand(e){e.special!=s.SpecialCommandTypes.ChangePen?this.listJ.find("#"+e.id).addClass("sent"):this.pauseButton.setValue(!0)}commandExecuted(e){let t=this.listJ.children().first();if(t.hasClass("commands")){let e=t.find(".message"),i=parseInt(e.attr("data-n-commands"))-1;e.attr("data-n-commands",i);let n=e.attr("data-total-commands");return e.text(i+"/"+n+" commands"),void(0==i&&this.removeCommand(t.attr("id")))}this.removeCommand(e.id)}clearQueue(){this.listJ.children().remove(),this.updateName(),document.dispatchEvent(new CustomEvent("CommandListChanged"))}}},107:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.communication=t.Communication=t.SERIAL_COMMUNICATION_SPEED=void 0;const n=i(229),o=i(758),s=i(24),r=i(388),a=i(108),l=i(705),d=i(595);t.SERIAL_COMMUNICATION_SPEED=o.SERIAL_COMMUNICATION_SPEED;let h=window.localStorage.getItem("port")||6842;t.Communication=class{constructor(e){this.autoConnectIntervalID=null,this.serialPortConnectionOpened=!1,t.communication=this,this.socket=null,this.createGUI(e),this.portController=null,this.initializeInterpreter(n.Settings.firmware),this.connectToSerial()}createGUI(e){this.gui=e.addFolder("Communication"),this.folderTitle=$(this.gui.getDomElement()).find(".title"),this.folderTitle.append($("<icon>").addClass("serial").append(String.fromCharCode(9679))),this.folderTitle.append($("<icon>").addClass("websocket").append(String.fromCharCode(9679)))}setTipibot(e){this.interpreter.setTipibot(e)}startAutoConnection(){this.autoConnectIntervalID=setInterval((()=>this.tryConnectSerialPort()),1e3)}stopAutoConnection(){clearInterval(this.autoConnectIntervalID),this.autoConnectIntervalID=null}setPortName(e){this.portController.object[this.portController.property]=e.path,this.portController.updateDisplay()}onSerialPortConnectionOpened(e=null){null!=e&&this.setPortName(e),this.serialPortConnectionOpened=!0,this.stopAutoConnection(),this.interpreter.serialPortConnectionOpened(),this.folderTitle.find(".serial").addClass("connected")}onSerialPortConnectionClosed(){this.serialPortConnectionOpened=!1,n.Settings.autoConnect&&this.startAutoConnection(),this.folderTitle.find(".serial").removeClass("connected")}initializePortController(e){this.portController=this.portController.options(e),$(this.portController.domElement.parentElement.parentElement).mousedown((e=>{this.autoConnectController.setValue(!1)})),this.portController.onFinishChange((e=>this.serialConnectionPortChanged(e)))}initializeInterpreter(e){let t=this.interpreter?this.interpreter.tipibot:null;this.serialPortConnectionOpened&&this.disconnectSerialPort(),"Tipibot"==e?this.interpreter=new a.TipibotInterpreter(this):"Polargraph"==e?this.interpreter=new s.Polargraph(this):"PenPlotter"==e?this.interpreter=new r.PenPlotter(this):"FredBot"==e?this.interpreter=new l.FredBot(this):"Makelangelo"==e&&(this.interpreter=new d.Makelangelo(this)),this.interpreter.setTipibot(t),console.log("initialize "+e)}onMessage(e){let t=JSON.parse(e.data),i=t.type,o=t.data;if(document.dispatchEvent(new CustomEvent("ServerMessage",{detail:t})),"opened"==i)this.onSerialPortConnectionOpened();else if("closed"==i)this.onSerialPortConnectionClosed();else if("list"==i){let e=["Disconnected"];for(let t of o)e.push(t.path);if(this.initializePortController(e),n.Settings.autoConnect)for(let e of o)if(null!=e.manufacturer&&e.manufacturer.indexOf("Arduino")>=0){this.portController.setValue(e.path);break}}else"connected"==i?this.setPortName(o):"not-connected"==i?(this.folderTitle.find(".serial").removeClass("connected").removeClass("simulator"),n.Settings.autoConnect&&this.startAutoConnection()):"connected-to-simulator"==i?this.folderTitle.find(".serial").removeClass("connected").addClass("simulator"):"data"==i?this.interpreter.messageReceived(o):"info"==i?console.info(o):"warning"==i?console.warn(o):"already-opened"==i?this.onSerialPortConnectionOpened(o):"error"==i&&console.error(o)}connectToSerial(){this.gui.add(n.Settings,"firmware",["Tipibot","Polargraph","PenPlotter","Makelangelo","FredBot"]).name("Firmware").onFinishChange((e=>{n.settingsManager.save(!1),this.initializeInterpreter(e)})),this.autoConnectController=this.gui.add(n.Settings,"autoConnect").name("Auto connect").onFinishChange((e=>{n.settingsManager.save(!1),e?this.startAutoConnection():this.stopAutoConnection()})),this.portController=this.gui.add({Connection:"Disconnected"},"Connection"),this.gui.addButton("Disconnect",(()=>this.disconnectSerialPort())),this.gui.addButton("Refresh",(()=>{this.send("list")})),this.initializePortController(["Disconnected"]),this.socket=new WebSocket("ws://localhost:"+h),this.socket.addEventListener("message",(e=>this.onMessage(e))),this.socket.addEventListener("open",(e=>this.onWebSocketOpen(e))),this.socket.addEventListener("close",(e=>this.onWebSocketClose(e))),this.socket.addEventListener("error",(e=>this.onWebSocketError(e)))}onWebSocketOpen(e){this.folderTitle.find(".websocket").addClass("connected"),this.send("is-connected")}onWebSocketClose(e){this.folderTitle.find(".websocket").removeClass("connected"),console.error("WebSocket disconnected")}onWebSocketError(e){console.error("WebSocket error")}disconnectSerialPort(){this.interpreter.clearQueue(),this.interpreter.sendStop(!0),this.autoConnectController.setValue(!1),this.onSerialPortConnectionClosed(),this.send("close"),document.dispatchEvent(new CustomEvent("Disconnect")),this.portController.setValue("Disconnected")}serialConnectionPortChanged(e){"Disconnected"==e&&this.serialPortConnectionOpened?this.disconnectSerialPort():"Disconnected"!=e&&(this.interpreter.setSerialPort(e),document.dispatchEvent(new CustomEvent("Connect",{detail:e})),console.log("open: "+e+", at: "+this.interpreter.serialCommunicationSpeed),this.send("open",{name:e,baudRate:this.interpreter.serialCommunicationSpeed}))}tryConnectSerialPort(){n.Settings.autoConnect&&!this.serialPortConnectionOpened&&this.send("list")}send(e,t=null){let i={type:e,data:t};this.socket.send(JSON.stringify(i))}},t.communication=null},705:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FredBot=void 0;const n=i(388);class o extends n.PenPlotter{constructor(e){super(e),this.continueMessage="ok",this.initializationMessage="Initialize",this.serialCommunicationSpeed=25e4}serialPortConnectionOpened(){}convertServoValue(e){return.2+2*e/180}sendPenState(e,t=0,i=0,n=null){let o="Move servo: "+(e=this.convertServoValue(e));t>0&&this.sendPause(t),this.queue("G1 Z"+e+"\n",o),i>0&&this.sendPause(i,n)}}t.FredBot=o},758:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Interpreter=t.SERIAL_COMMUNICATION_SPEED=t.SpecialCommandTypes=void 0;const n=i(229);var o;!function(e){e[e.Idle=0]="Idle",e[e.ChangePen=1]="ChangePen"}(o=t.SpecialCommandTypes||(t.SpecialCommandTypes={})),t.SERIAL_COMMUNICATION_SPEED=115200,t.Interpreter=class{constructor(e){this.commandID=0,this.continueMessage="READY",this.serialCommunicationSpeed=t.SERIAL_COMMUNICATION_SPEED,this.name="interpreter",this.justQueueCommands=!1,this.commandQueue=[],this.pause=!1,this.serialInput="",this.tempoNextCommand=!1,this.communication=e}setSerialPort(e){this.serialPort=e}setTipibot(e){this.tipibot=e}serialPortConnectionOpened(){this.initialize()}initialize(e=!0){this.sendPenWidth(n.Settings.tipibot.penWidth),this.sendSpecs(),this.sendInvertXY(),this.sendSetPosition(e?new paper.Point(n.Settings.tipibot.homeX,n.Settings.tipibot.homeY-n.Settings.tipibot.penOffset):this.tipibot.getGondolaPosition()),this.sendMaxSpeedAndAcceleration(),this.sendServoSpeed(),this.sendFeedback(),this.tipibot.initializedCommunication=!0}getGCode(){let e="";for(let t of this.commandQueue)e+=t.data;return e}send(e){if(!this.pause){if(document.dispatchEvent(new CustomEvent("SendCommand",{detail:e})),e.special==o.ChangePen)return this.pause=!0,console.log("send: "+e.message+" - "+e.data),void console.info(e.message+" and then resume (uncheck pause)");console.log("send: "+e.message+" - "+e.data),this.communication.send("data",e.data)}}messageReceived(e){if(null==e)return;if(this.serialInput+=e,this.serialInput.indexOf(this.continueMessage)>0){var t=new RegExp(this.continueMessage,"g");this.serialInput=this.serialInput.replace(t,"\n"+this.continueMessage)}let i=this.serialInput.split("\n");for(let e=0;e<i.length-1;e++)this.processMessage(i[e]);this.serialInput.endsWith("\n")?this.serialInput="":this.serialInput=i[i.length-1]}processMessage(e){if(document.dispatchEvent(new CustomEvent("MessageReceived",{detail:e})),0==e.indexOf(this.continueMessage)&&this.commandQueue.length>0){let e=this.commandQueue.shift();null!=e.callback&&e.callback(),document.dispatchEvent(new CustomEvent("CommandExecuted",{detail:e})),this.startQueue()}}setPause(e){this.pause=e,this.pause||this.startQueue()}queue(e,t,i=null,n=null){let o={id:this.commandID++,data:e,callback:i,message:t,special:n};this.justQueueCommands?this.commandQueue.push(o):(document.dispatchEvent(new CustomEvent("QueueCommand",{detail:o})),this.commandQueue.push(o),1==this.commandQueue.length&&this.send(o))}startQueue(){this.commandQueue.length>0&&this.send(this.commandQueue[0])}removeCommand(e){let t=this.commandQueue.findIndex((t=>t.id==e));t>=0&&this.commandQueue.splice(t,1)}clearQueue(){this.commandQueue=[],document.dispatchEvent(new CustomEvent("ClearQueue",{detail:null}))}executeOnceFinished(e){0==this.commandQueue.length&&e();let t=this.commandQueue[this.commandQueue.length-1],i=t.callback;t.callback=()=>{i(),e()}}sendSetHome(e=this.tipibot.getPosition()){}sendSetPosition(e=this.tipibot.getPosition()){}sendMoveDirect(e,t=null){}sendMoveLinear(e,t=0,i=n.Settings.tipibot.maxSpeed,o=null){}sendDrawSpeed(e=n.Settings.tipibot.drawSpeed,t=n.Settings.tipibot.acceleration){}sendMaxSpeed(e=n.Settings.tipibot.maxSpeed,t=n.Settings.tipibot.acceleration){}sendAcceleration(e=n.Settings.tipibot.acceleration){}sendMaxSpeedAndAcceleration(e=n.Settings.tipibot.maxSpeed,t=n.Settings.tipibot.acceleration){}sendSize(e=n.Settings.tipibot.width,t=n.Settings.tipibot.height){}sendStepsPerRev(e=n.Settings.tipibot.stepsPerRev){}sendMmPerRev(e=n.Settings.tipibot.mmPerRev){}sendStepMultiplier(e=n.Settings.tipibot.microstepResolution){}sendPenWidth(e=n.Settings.tipibot.penWidth){}sendChangePen(e,t){this.queue("Change pen "+t+"\n","Change pen to "+e+", index "+t,null,o.ChangePen)}sendServoSpeed(e=n.Settings.servo.speed){}sendSpecs(e=n.Settings.tipibot.width,t=n.Settings.tipibot.height,i=n.Settings.tipibot.stepsPerRev,o=n.Settings.tipibot.mmPerRev,s=n.Settings.tipibot.microstepResolution){}sendInvertXY(e=n.Settings.tipibot.invertMotorLeft,t=n.Settings.tipibot.invertMotorRight){}sendProgressiveMicrosteps(e=n.Settings.tipibot.progressiveMicrosteps){}sendPause(e){}sendMotorOff(){}sendMotorOn(){}sendPenState(e,t=0){}sendPenUp(e=n.SettingsManager.servoUpAngle(),t=n.Settings.servo.delay.up.before,i=n.Settings.servo.delay.up.after,o=null){}sendPenDown(e=n.SettingsManager.servoDownAngle(),t=n.Settings.servo.delay.down.before,i=n.Settings.servo.delay.down.after,o=null){}sendStop(e=!0){}sendPenLiftRange(e=n.SettingsManager.servoDownAngle(),t=n.SettingsManager.servoUpAngle()){}sendPenDelays(e=n.Settings.servo.delay.down.before,t=n.Settings.servo.delay.up.before){}sendFeedback(e=n.Settings.feedback.enable,t=n.Settings.feedback.rate){}}},595:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Makelangelo=void 0;const n=i(229),o=i(758);class s extends o.Interpreter{constructor(e){super(e),this.name="makelangelo",this.lastCommandWasMove=!1,this.continueMessage="> "}initialize(e=!0){this.sendSpecs(),this.sendSetPosition(e?new paper.Point(n.Settings.tipibot.homeX,n.Settings.tipibot.homeY-n.Settings.tipibot.penOffset):this.tipibot.getGondolaPosition()),this.sendMaxSpeed(),this.tipibot.initializedCommunication=!0}convertToMakelangeloCoordinates(e){let t=new paper.Size(n.Settings.tipibot.width,n.Settings.tipibot.height),i=e.subtract(t.multiply(.5));return i.y*=-1,i}sendSetHome(e=this.tipibot.getHome()){super.sendSetHome(e),this.lastCommandWasMove=!1;let t="Set home: "+(e=this.convertToMakelangeloCoordinates(e)).x.toFixed(2)+", "+e.y.toFixed(2);this.queue("D6 X"+e.x.toFixed(2)+" Y"+e.y.toFixed(2)+"\n",t)}sendSetPosition(e=this.tipibot.getPosition()){super.sendSetPosition(e),this.lastCommandWasMove=!1;let t="Set position: "+(e=this.convertToMakelangeloCoordinates(e)).x.toFixed(2)+", "+e.y.toFixed(2);this.queue("G92 X"+e.x.toFixed(2)+" Y"+e.y.toFixed(2)+"\n",t)}sendMoveDirect(e,t=null){super.sendMoveDirect(e,t),e=this.convertToMakelangeloCoordinates(e);let i=n.Settings.tipibot.maxSpeed*n.SettingsManager.mmPerSteps(),o="Move linear: "+e.x.toFixed(2)+", "+e.y.toFixed(2)+", speed: "+i.toFixed(2),s=this.lastCommandWasMove?"":" F"+i.toFixed(2);this.lastCommandWasMove=!0,this.queue("G1"+s+" X"+e.x.toFixed(2)+" Y"+e.y.toFixed(2)+"\n",o,t)}sendMoveLinear(e,t=0,i=n.Settings.tipibot.maxSpeed,o=null){super.sendMoveLinear(e,t,i,o),e=this.convertToMakelangeloCoordinates(e);let s=i*n.SettingsManager.mmPerSteps(),r="Move linear: "+e.x.toFixed(2)+", "+e.y.toFixed(2)+", speed: "+s.toFixed(2),a=this.lastCommandWasMove?"":" F"+s.toFixed(2);this.lastCommandWasMove=!0,this.queue("G0"+a+" X"+e.x.toFixed(2)+" Y"+e.y.toFixed(2)+"\n",r,o)}sendMaxSpeed(e=n.Settings.tipibot.maxSpeed){this.sendMaxSpeedAndAcceleration(e,n.Settings.tipibot.acceleration)}sendAcceleration(e=n.Settings.tipibot.acceleration){this.sendMaxSpeedAndAcceleration(n.Settings.tipibot.maxSpeed,e)}sendMaxSpeedAndAcceleration(e=n.Settings.tipibot.maxSpeed,t=n.Settings.tipibot.acceleration){this.lastCommandWasMove=!1;let i=e*n.SettingsManager.mmPerSteps(),o="Set speed: "+i.toFixed(2)+", set acceleration: "+t.toFixed(2),s="G0 F"+i.toFixed(2)+" A"+t.toFixed(2)+"\n";this.queue(s,o)}sendInvertXY(e=n.Settings.tipibot.invertMotorLeft,t=n.Settings.tipibot.invertMotorRight){console.log("error: command not implemented")}sendProgressiveMicrosteps(e=n.Settings.tipibot.progressiveMicrosteps){console.log("error: command not implemented")}sendSize(e=n.Settings.tipibot.width,t=n.Settings.tipibot.height){this.lastCommandWasMove=!1;let i="Send size: "+e.toFixed(2);this.queue("M4 X"+e.toFixed(2)+"\n",i)}sendStepsPerRev(e=n.Settings.tipibot.stepsPerRev){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,e,n.Settings.tipibot.mmPerRev,n.Settings.tipibot.microstepResolution)}sendMmPerRev(e=n.Settings.tipibot.mmPerRev){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,n.Settings.tipibot.stepsPerRev,e,n.Settings.tipibot.microstepResolution)}sendStepMultiplier(e=n.Settings.tipibot.microstepResolution){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,n.Settings.tipibot.stepsPerRev,n.Settings.tipibot.mmPerRev,e)}sendSpecs(e=n.Settings.tipibot.width,t=n.Settings.tipibot.height,i=n.Settings.tipibot.stepsPerRev,o=n.Settings.tipibot.mmPerRev,s=n.Settings.tipibot.microstepResolution){this.lastCommandWasMove=!1;let r=e/2,a=-e/2,l=t/2,d=-t/2,h="Set limit right: "+r.toFixed(2)+", limit left: "+a.toFixed(2),u="M101 A0 T"+r.toFixed(2)+" B"+a.toFixed(2)+"\n";this.queue(u,h),h="Set limit top: "+l.toFixed(2)+", limit bottom: "+d.toFixed(2);let p="M101 A1 T"+l.toFixed(2)+" B"+d.toFixed(2)+"\n";this.queue(p,h),h="Set limit servo: ",this.queue("M101 A2 T170 B10\n",h),this.sendSetHome(),this.sendMaxSpeedAndAcceleration()}sendPause(e,t=null){this.lastCommandWasMove=!1;let i="Wait: "+e,n=Math.floor(e),o=1e3*(n-e);this.queue("G4 S"+o+" P"+n+"\n",i,t)}sendMotorOn(){this.queue("M17\n","Enable motors")}sendMotorOff(){this.queue("M18\n","Disable motors")}sendPenState(e,t=0,i=0,o=null){this.lastCommandWasMove=!1;let s=n.Settings.servo.speed,r="Move pen"+(e==n.Settings.servo.position.up?" up":e==n.Settings.servo.position.down?" down":"")+": "+e+" servo speed: "+s;t>0&&this.sendPause(t),this.queue("G0 F"+s+" Z"+e+"\n",r,i<=0?o:void 0),i>0&&this.sendPause(i,o)}sendPenUp(e=n.SettingsManager.servoUpAngle(),t=n.Settings.servo.delay.up.before,i=n.Settings.servo.delay.up.after,o=null){this.sendPenState(e,t,i,o)}sendPenDown(e=n.SettingsManager.servoDownAngle(),t=n.Settings.servo.delay.down.before,i=n.Settings.servo.delay.down.after,o=null){this.sendPenState(e,t,i,o)}sendChangePen(e,t){let i="";switch(e){case"0xff0000":i="red";break;case"0x00ff00":i="green";break;case"0x0000ff":i="blue";break;case"0x000000":i="black";break;case"0x00ffff":i="cyan";break;case"0xff00ff":i="magenta";break;case"0xffff00":i="yellow";break;case"0xffffff":i="white";break;default:i=e}this.queue("M117\n","Clear message");let n="Pen "+i,o="Click to continue";this.queue("M06 T"+t+"\n","Change pen to "+parseInt(e)),this.queue("M117 "+n+" "+o+"\n",n+" "+o),this.queue("M300 S60 P250\n","Beep"),this.queue("M226\n","Pause for user input"),this.queue("M117\n","Clear message")}sendStop(e=!0){e?this.communication.send("data","M0\n"):(this.queue("M0\n","Stop"),console.log("error: command not implemented"))}}t.Makelangelo=s},388:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PenPlotter=void 0;const n=i(229),o=i(758);class s extends o.Interpreter{constructor(e){super(e),this.name="penplotter",this.continueMessage="ok"}initialize(e=!0){this.sendSpecs(),this.sendSetPosition(e?new paper.Point(n.Settings.tipibot.homeX,n.Settings.tipibot.homeY-n.Settings.tipibot.penOffset):this.tipibot.getGondolaPosition()),this.sendMaxSpeed(),this.tipibot.initializedCommunication=!0}sendSetPosition(e=this.tipibot.getPosition()){super.sendSetPosition(e);let t=this.tipibot.cartesianToLengths(e),i=(n.SettingsManager.mmToSteps(t),"Set position: "+e.x.toFixed(2)+", "+e.y.toFixed(2));this.queue("M1 Y"+e.y.toFixed(2)+"\n",i)}sendMoveDirect(e,t=null){super.sendMoveDirect(e,t);let i=this.tipibot.cartesianToLengths(e),o=(n.SettingsManager.mmToSteps(i),"Move direct: "+e.x.toFixed(2)+", "+e.y.toFixed(2));this.queue("G0 X"+e.x.toFixed(2)+" Y"+e.y.toFixed(2)+"\n",o,t)}sendMoveLinear(e,t=0,i=n.Settings.tipibot.maxSpeed,o=null){super.sendMoveLinear(e,t,i,o);let s=this.tipibot.cartesianToLengths(e),r=(n.SettingsManager.mmToSteps(s),"Move linear: "+e.x.toFixed(2)+", "+e.y.toFixed(2)+", min speed: "+t.toFixed(2));this.queue("G1 X"+e.x.toFixed(2)+" Y"+e.y.toFixed(2)+"\n",r,o)}sendMaxSpeed(e=n.Settings.tipibot.maxSpeed){let t="Set max speed: "+e.toFixed(2);this.queue("G0 F"+e.toFixed(2)+"\n",t)}sendAcceleration(e=n.Settings.tipibot.acceleration){console.log("set acceleration: "+e);let t="Set acceleration: "+e.toFixed(2);this.queue("G0 S"+e.toFixed(2)+"\n",t)}sendMaxSpeedAndAcceleration(e=n.Settings.tipibot.maxSpeed,t=n.Settings.tipibot.acceleration){console.log("set speed: "+e),console.log("set acceleration: "+t);let i="Set speed: "+t.toFixed(2)+", set acceleration: "+t.toFixed(2);this.queue("G0 F"+e.toFixed(2)+" S"+t.toFixed(2)+"\n",i)}sendInvertXY(e=n.Settings.tipibot.invertMotorLeft,t=n.Settings.tipibot.invertMotorRight){let i="Invert motors: left: "+e+", right: "+t;this.queue("M12 X"+(e?-1:1)+" Y"+(t?-1:1)+"\n",i)}sendProgressiveMicrosteps(e=n.Settings.tipibot.progressiveMicrosteps){let t="Set progressiveMicrosteps: "+e;this.queue("M13 F"+(e?-1:1)+"\n",t)}sendSize(e=n.Settings.tipibot.width,t=n.Settings.tipibot.height){let i="Send size: "+e.toFixed(2);this.queue("M4 X"+e.toFixed(2)+"\n",i)}sendStepsPerRev(e=n.Settings.tipibot.stepsPerRev){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,e,n.Settings.tipibot.mmPerRev,n.Settings.tipibot.microstepResolution)}sendMmPerRev(e=n.Settings.tipibot.mmPerRev){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,n.Settings.tipibot.stepsPerRev,e,n.Settings.tipibot.microstepResolution)}sendStepMultiplier(e=n.Settings.tipibot.microstepResolution){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,n.Settings.tipibot.stepsPerRev,n.Settings.tipibot.mmPerRev,e)}sendSpecs(e=n.Settings.tipibot.width,t=n.Settings.tipibot.height,i=n.Settings.tipibot.stepsPerRev,o=n.Settings.tipibot.mmPerRev,s=n.Settings.tipibot.microstepResolution){let r="Setup: tipibotWidth: "+e+", stepsPerRevolution: "+i*s+", mmPerRev: "+o+", millimetersPerStep: "+o/(i*s);console.log(r),this.queue("M4 X"+e+" E0.5 S"+i*s+" P"+o+"\n",r)}sendPause(e,t=null){let i="Wait: "+e;this.queue("G4 P"+e+"\n",i,t)}sendMotorOff(){this.queue("M84\n","Disable motors")}convertServoValue(e){return 700+1600*e/180}sendPenState(e,t=0,i=0,o=null){let s="Move pen"+(e==n.Settings.servo.position.up?" up":e==n.Settings.servo.position.down?" down":"")+": "+e;e=this.convertServoValue(e),t>0&&this.sendPause(t),this.queue("M340 P3 S"+e+"\n",s,i<=0?o:void 0),i>0&&this.sendPause(i,o)}sendPenUp(e=n.SettingsManager.servoUpAngle(),t=n.Settings.servo.delay.up.before,i=n.Settings.servo.delay.up.after,o=null){this.sendPenState(e,t,i,o)}sendPenDown(e=n.SettingsManager.servoDownAngle(),t=n.Settings.servo.delay.down.before,i=n.Settings.servo.delay.down.after,o=null){this.sendPenState(e,t,i,o)}sendStop(e=!0){e?this.communication.send("data","M0\n"):this.queue("M0\n","Stop")}}t.PenPlotter=s},24:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Polargraph=void 0;const n=i(229),o=i(758),s={CMD_CHANGELENGTH:"C01,",CMD_CHANGEPENWIDTH:"C02,",CMD_CHANGEMOTORSPEED:"C03,",CMD_CHANGEMOTORACCEL:"C04,",CMD_DRAWPIXEL:"C05,",CMD_DRAWSCRIBBLEPIXEL:"C06,",CMD_DRAWRECT:"C07,",CMD_CHANGEDRAWINGDIRECTION:"C08,",CMD_SETPOSITION:"C09,",CMD_TESTPATTERN:"C10,",CMD_TESTPENWIDTHSQUARE:"C11,",CMD_TESTPENWIDTHSCRIBBLE:"C12,",CMD_PENDOWN:"C13,",CMD_PENUP:"C14,",CMD_DRAWSAWPIXEL:"C15,",CMD_DRAWROUNDPIXEL:"C16,",CMD_CHANGELENGTHDIRECT:"C17,",CMD_TXIMAGEBLOCK:"C18,",CMD_STARTROVE:"C19,",CMD_STOPROVE:"C20,",CMD_SET_ROVE_AREA:"C21,",CMD_LOADMAGEFILE:"C23,",CMD_CHANGEMACHINESIZE:"C24,",CMD_CHANGEMACHINENAME:"C25,",CMD_REQUESTMACHINESIZE:"C26,",CMD_RESETMACHINE:"C27,",CMD_DRAWDIRECTIONTEST:"C28,",CMD_CHANGEMACHINEMMPERREV:"C29,",CMD_CHANGEMACHINESTEPSPERREV:"C30,",CMD_SETMOTORSPEED:"C31,",CMD_SETMOTORACCEL:"C32,",CMD_MACHINE_MODE_STORE_COMMANDS:"C33,",CMD_MACHINE_MODE_EXEC_FROM_STORE:"C34,",CMD_MACHINE_MODE_LIVE:"C35,",CMD_RANDOM_DRAW:"C36,",CMD_SETMACHINESTEPMULTIPLIER:"C37,",CMD_START_TEXT:"C38,",CMD_DRAW_SPRITE:"C39,",CMD_CHANGELENGTH_RELATIVE:"C40,",CMD_SWIRLING:"C41,",CMD_DRAW_RANDOM_SPRITE:"C42,",CMD_DRAW_NORWEGIAN:"C43,",CMD_DRAW_NORWEGIAN_OUTLINE:"C44,",CMD_SETPENLIFTRANGE:"C45,",CMD_SELECT_ROVE_SOURCE_IMAGE:"C46",CMD_RENDER_ROVE:"C47",CMD_ACTIVATE_MACHINE_BUTTON:"C49",CMD_DEACTIVATE_MACHINE_BUTTON:"C50",CMD_DELAY:"C60,"};class r extends o.Interpreter{constructor(e){super(e),this.keepTipibotAwakeInterval=null,this.name="polargraph",this.serialCommunicationSpeed=57600}initialize(e=!0){super.initialize(e),this.sendPenDown(),this.sendPenUp()}send(e){e.data+=String.fromCharCode(10),super.send(e)}queue(e,t,i=null){e.substr(0,3);for(let e in s)s[e].substr(0,3);super.queue(e,t,i)}queueEmpty(){}messageReceived(e){super.messageReceived(e)}getMaxSegmentLength(){return 2}sendMoveToNativePosition(e,t,i=null){t=this.tipibot.cartesianToLengths(t),t=n.SettingsManager.mmToSteps(t).divide(n.Settings.tipibot.microstepResolution);let o=null;o=e?s.CMD_CHANGELENGTHDIRECT+Math.round(t.x)+","+Math.round(t.y)+","+this.getMaxSegmentLength()+",END":s.CMD_CHANGELENGTH+Math.round(t.x)+","+Math.round(t.y)+",END",this.queue(o,"direct",i)}sendSetPosition(e=this.tipibot.getPosition()){e=this.tipibot.cartesianToLengths(e);let t=n.SettingsManager.mmToSteps(e).divide(n.Settings.tipibot.microstepResolution),i=s.CMD_SETPOSITION+Math.round(t.x)+","+Math.round(t.y)+",END",o="Set position: "+e.x.toFixed(2)+", "+e.y.toFixed(2);this.queue(i,o)}sendMoveDirect(e,t=null){this.sendMoveToNativePosition(!0,e,t)}sendMoveLinear(e,t=0,i=n.Settings.tipibot.maxSpeed,o=null){this.sendMoveToNativePosition(!0,e,o)}sendMaxSpeed(e=n.Settings.tipibot.maxSpeed,t=n.Settings.tipibot.acceleration){let i="Set max speed: "+e.toFixed(2);this.queue(s.CMD_SETMOTORSPEED+e.toFixed(2)+",1,END",i),i="Set acceleration: "+t.toFixed(2),this.queue(s.CMD_SETMOTORACCEL+t.toFixed(2)+",1,END",i)}sendSize(e=n.Settings.tipibot.width,t=n.Settings.tipibot.height){let i="Set size: "+e.toFixed(2)+","+t.toFixed(2);this.queue(s.CMD_CHANGEMACHINESIZE+e+","+t+",END",i)}sendStepsPerRev(e=n.Settings.tipibot.stepsPerRev){let t="Set steps per rev: "+e;this.queue(s.CMD_CHANGEMACHINESTEPSPERREV+e+",END",t)}sendMmPerRev(e=n.Settings.tipibot.mmPerRev){let t="Set mm per rev: "+e;this.queue(s.CMD_CHANGEMACHINEMMPERREV+e+",END",t)}sendStepMultiplier(e=n.Settings.tipibot.microstepResolution){let t="Set microstepResolution: "+e;this.queue(s.CMD_SETMACHINESTEPMULTIPLIER+e+",END",t)}sendSpecs(e=n.Settings.tipibot.width,t=n.Settings.tipibot.height,i=n.Settings.tipibot.stepsPerRev,o=n.Settings.tipibot.mmPerRev,s=n.Settings.tipibot.microstepResolution){this.sendSize(e,t),this.sendMmPerRev(o),this.sendStepsPerRev(i),this.sendStepMultiplier(s)}sendPause(e,t=null){let i="Wait: "+e;this.queue(s.CMD_DELAY+e+",END",i,t)}sendMotorOff(){}sendPenLiftRange(e=n.SettingsManager.servoDownAngle(),t=n.SettingsManager.servoUpAngle()){let i="Set pen lift range: "+e.toFixed(2)+","+t.toFixed(2);this.queue(s.CMD_SETPENLIFTRANGE+e.toFixed(2)+","+t.toFixed(2)+",1,END",i)}sendPenDelays(e=n.Settings.servo.delay.down.before,t=n.Settings.servo.delay.up.before){}sendPenUp(e=n.SettingsManager.servoUpAngle(),t=n.Settings.servo.delay.up.before,i=n.Settings.servo.delay.up.after,o=null){t>0&&this.sendPause(t);let r="Set pen up: "+n.SettingsManager.servoUpAngle().toFixed(2);this.queue(s.CMD_PENUP+n.SettingsManager.servoUpAngle().toFixed(2)+",END",r),i>0&&this.sendPause(i,o)}sendPenDown(e=n.SettingsManager.servoDownAngle(),t=n.Settings.servo.delay.down.before,i=n.Settings.servo.delay.down.after,o=null){t>0&&this.sendPause(t);let r="Set pen down: "+n.SettingsManager.servoDownAngle().toFixed(2);this.queue(s.CMD_PENDOWN+n.SettingsManager.servoDownAngle().toFixed(2)+",END",r),i>0&&this.sendPause(i,o)}sendStop(){}sendPenWidth(e){let t="Set pen width: "+e.toFixed(2);this.queue(s.CMD_CHANGEPENWIDTH+e.toFixed(2)+",END",t)}}t.Polargraph=r},108:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TipibotInterpreter=void 0;const n=i(229),o=i(388);class s extends o.PenPlotter{constructor(){super(...arguments),this.initializationMessage="Initialize",this.name="tipibot",this.continueMessage="READY"}serialPortConnectionOpened(){}sendSpecs(e=n.Settings.tipibot.width,t=n.Settings.tipibot.height,i=n.Settings.tipibot.stepsPerRev,o=n.Settings.tipibot.mmPerRev,s=n.Settings.tipibot.microstepResolution){let r="Setup: tipibotWidth: "+e+", stepsPerRevolution: "+i+", microstepResolution: "+s+", mmPerRev: "+o+", millimetersPerStep: "+o/(i*s);this.queue("M4 X"+e+" S"+i+" F"+s+" P"+o+"\n",r)}sendSetPosition(e=this.tipibot.getPosition()){super.sendSetPosition(e);let t="Set position: "+e.x.toFixed(2)+", "+e.y.toFixed(2);this.queue("G92 X"+e.x.toFixed(2)+" Y"+e.y.toFixed(2)+"\n",t)}sendServoSpeed(e=n.Settings.servo.speed){let t="Set servo speed: "+e;this.queue("M14 F"+e+"\n",t)}sendFeedback(e=n.Settings.feedback.enable,t=n.Settings.feedback.rate){e||(t=0);let i="Set feedback: "+e+", rate: "+t.toFixed(2);this.queue("M15 F"+t.toFixed(2)+"\n",i)}convertServoValue(e){return Math.round(e)}sendMotorOn(){this.queue("M85\n","Enable motors")}processMessage(e){super.processMessage(e),0==e.indexOf(this.initializationMessage)&&this.initialize()}}t.TipibotInterpreter=s},518:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Console=void 0;const n=i(776);t.Console=class{constructor(){this.MAX_NUM_MESSAGES=1e3,this.scrollingToBottom=!1,this.skipScrollToBottom=!1,document.addEventListener("CommandListChanged",(e=>this.scrollToBottom()),!1),this.log=console.log.bind(console),this.error=console.error.bind(console),this.info=console.info.bind(console),this.warn=console.warn.bind(console),this.table=console.table.bind(console);let e=(e,t,i)=>{"function"==typeof t&&t.apply(console,e);let n=$("<li>");if("table"==i){let t=this.logTable.apply(this,e);n.append(t)}else for(let t of e){let e=null;if("object"==typeof t)e=$("<p>").append(t).addClass(i);else if(t instanceof Array){let n=JSON.stringify(t);n.length>100&&(n=n.substr(0,20)+"..."+n.substr(n.length-20)),e=$("<p>").append(n).addClass(i)}else e=$("<p>").append(t).addClass(i);n.append(e)}let o=this.listJ;o.children().length>=this.MAX_NUM_MESSAGES&&o.find("li:first-child").remove(),o.append(n),this.scrollToBottom(o)};console.log=(...t)=>e(t,this.log,"log"),console.error=(...t)=>e(t,this.error,"error"),console.info=(...t)=>e(t,this.info,"info"),console.warn=(...t)=>e(t,this.warn,"warn"),console.table=(...t)=>e(t,this.table,"table"),this.gui=new n.GUI({autoPlace:!1}),document.getElementById("info").appendChild(this.gui.getDomElement())}createGUI(){this.folder=this.gui.addFolder("Console"),this.folder.open(),this.listJ=$('<ul id="console-list" class="c-list">'),this.listJ.insertAfter($(this.folder.gui.domElement).find("li")),this.listJ.scroll((e=>{if(!this.scrollingToBottom){let e=this.listJ.get(0);this.skipScrollToBottom=e.scrollTop+e.clientHeight<e.scrollHeight}this.scrollingToBottom=!1})),this.updateMaxHeight(),window.addEventListener("resize",(()=>this.updateMaxHeight()),!1),$("#info").click((()=>this.updateMaxHeight()))}updateMaxHeight(){this.listJ.css("max-height",$("#info").outerHeight()-this.listJ.offset().top)}scrollToBottom(e=this.listJ){this.updateMaxHeight(),this.skipScrollToBottom||(this.scrollingToBottom=!0,e.scrollTop(e.get(0).scrollHeight))}printTable(e,t){var i=t.length,n=e.length,o=document.createElement("table");o.style.width="100%",o.setAttribute("border","1");var s=document.createElement("thead"),r=document.createElement("td");r.innerHTML="Index",s.appendChild(r);for(var a=0;a<i;a++)(r=document.createElement("td")).innerHTML=t[a],s.appendChild(r);o.appendChild(s);for(var l=0;l<n;l++){var d=document.createElement("tr");let n=document.createElement("td");n.innerHTML=l,d.appendChild(n);for(var h=0;h<i;h++)n=document.createElement("td"),n.innerHTML=e[l][t[h]],d.appendChild(n);o.appendChild(d)}return o}logObject(e){let t=[];for(let i in e)t.push({name:i,value:e[i]});return this.printTable(t,["name","value"])}logTable(...e){var t,i=e[0];return void 0!==i&&(t=Object.keys(i)),this.printTable(i,t)}}},776:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GUI=t.Controller=void 0;const n=i(816);class o{constructor(e,t){this.controller=e,this.gui=t}getDomElement(){return this.controller.domElement}getParentNames(){let e=[],t=this.gui;do{e.push(t.name),t=t.parent}while(null!=t);return e}getParentDomElement(){return this.getDomElement().parentElement.parentElement}contains(e){return this.getParentDomElement().contains(e)}getProperty(){return this.controller.property}getName(){return this.controller.property}getValue(){return this.controller.object[this.controller.property]}onChange(e){return this.controller.onChange(e),this}onFinishChange(e){return this.controller.onFinishChange(e),this}setValue(e,t=!0){if(t)return this.controller.setValue(e);this.setValueNoCallback(e)}setValueNoCallback(e){this.controller.object[this.controller.property]=e,this.controller.updateDisplay()}max(e,t=!1){this.controller.max(e),this.setValue(Math.min(e,this.getValue()),t)}min(e,t=!1){this.controller.min(e),this.setValue(Math.max(e,this.getValue()),t)}step(e){this.controller.step(e)}updateDisplay(){this.controller.updateDisplay()}options(e){return this.controller.options(e)}setName(e){return this.name(e),this}name(e){return this.controller.name(e),this}hide(){$(this.getParentDomElement()).hide()}show(){$(this.getParentDomElement()).show()}}t.Controller=o;class s{constructor(e,t,i){this.gui=null!=i&&null!=t?i.gui.addFolder(t):new dat.GUI(e),this.name=t,this.parent=i,this.nameToController=new Map,this.nameToFolder=new Map}static startLoadingAnimation(e=null){$("#loading").removeClass("hidden"),clearTimeout(s.loadingTimeoutID),s.loadingTimeoutID=setTimeout((()=>{$("#loading").addClass("loading"),null!=e&&setTimeout((()=>{e()}),400)}),100)}static stopLoadingAnimation(){$("#loading").removeClass("loading"),clearTimeout(s.loadingTimeoutID),s.loadingTimeoutID=setTimeout((()=>$("#loading").addClass("hidden")),1e3)}getDomElement(){return this.gui.domElement}add(e,t,i,s,r){let a=new o(this.gui.add(e,t,i,s,r),this);this.nameToController.set(t,a);let l=$(a.getDomElement()).find('input[type="text"]').first();return l.length>0&&l.on("focus",(e=>n.keyboard.onInputFocus(a))),a}addButton(e,t){let i={};return i[e]=t,this.add(i,e)}setName(e){$(this.getDomElement()).find("li.title").text(e)}addFileSelectorButton(e,t,i=!0,n){let o=$("<input data-name='file-selector' type='file' class='form-control' name='file[]'  accept='"+t+"' "+(i?"multiple":"")+"/>"),s=this.addButton(e,(e=>o.click()));return o.insertAfter(s.getParentDomElement()),o.hide(),o.change((e=>{n(e),o.val("")})),s}addSlider(e,t,i,n,o){let s={};s[e]=t;let r=this.add(s,e,i,n);return null!=o&&r.step(o),r}addFolder(e){let t=new s(null,e,this);return this.nameToFolder.set(e,t),t}getController(e){return this.nameToController.get(e)}getControllers(){let e=Array.from(this.nameToController);return Array.from(e,(e=>e[1]))}getAllControllers(){let e=this.getControllers();for(let t of this.nameToFolder){let i=t[1];e=e.concat(i.getAllControllers())}return e}getFolder(e){return this.nameToFolder.get(e)}getFolders(){let e=Array.from(this.nameToFolder);return Array.from(e,(e=>e[1]))}hide(){$(this.gui.domElement).hide()}show(){$(this.gui.domElement).show()}open(){this.gui.open()}close(){this.gui.close()}}t.GUI=s,s.loadingTimeoutID=null},816:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initializeKeyboard=t.keyboard=t.VirtualKeyboard=void 0;const n=i(86);i(23);const o=i(229),s=i(670),r={"{x0.25}":.25,"{x1}":1,"{x5}":5,"{x25}":25};class a{constructor(){this.initialValue=null,this.activeController=null,this.enableArrows=!1,this.enableArrowsController=null,this.hideKeyboard();let e={onKeyPress:e=>this.onKeyPress(e),theme:"simple-keyboard hg-theme-default hg-layout-default",physicalKeyboardHighlight:!0,syncInstanceInputs:!0,mergeDisplay:!0,debug:!0};this.keyboard=new n.default(Object.assign(Object.assign({},e),{onChange:e=>this.onChange(e)})),$("#keyboard .close-button").click((()=>this.endInput())),this.keyboardArrows=new n.default(".simple-keyboard-arrows",Object.assign(Object.assign({},e),{layout:{default:["{arrowup}","{arrowleft} {arrowdown} {arrowright}","{x0.25} {x1} {x5} {x25}"]},display:{"{x0.25}":"x0.25","{x1}":"x1","{x5}":"x5","{x25}":"x25"}})),this.enableArrows||$(".simple-keyboard-arrows").hide()}createGUI(e){this.enableArrowsController=e.add(this,"enableArrows").name("Touch Move").onFinishChange((e=>{this.toggleArrows(e)})),o.Settings.enableTouchKeyboard||this.enableArrowsController.hide()}toggleArrows(e){e?(this.activeController&&this.endInput(),this.showKeyboard(),$("#keyboard .characters").hide(),$(".simple-keyboard-arrows").show()):(this.hideKeyboard(),$(".simple-keyboard-arrows").hide())}showKeyboard(){o.Settings.enableTouchKeyboard&&($("#keyboard").show(),$("#keyboard .characters").show())}hideKeyboard(){$("#keyboard").hide()}onInputFocus(e){o.Settings.enableTouchKeyboard&&(this.activeController=e,this.initialValue=e.getValue(),this.keyboard.setInput(""+e.getValue()),$("#keyboard .input").val(e.getValue()),this.showKeyboard())}onInputBlur(){o.Settings.enableTouchKeyboard&&this.endInput()}onChange(e){if(o.Settings.enableTouchKeyboard&&null!=this.activeController){let t=isNaN(this.activeController.getValue())?e:parseFloat(e);this.activeController.setValueNoCallback(t),$("#keyboard .input").val(e)}}endInput(){if(o.Settings.enableTouchKeyboard){if(null!=this.activeController){let e=this.keyboard.getInput(),t=isNaN(this.activeController.getValue())?e:parseFloat(e);this.activeController.setValue(t),this.activeController.controller.__onFinishChange&&this.activeController.controller.__onFinishChange(t),$("#keyboard .input").val(t),this.activeController=null}this.hideKeyboard()}}onKeyPress(e){"{enter}"==e&&this.endInput(),"{shift}"!==e&&"{lock}"!==e||this.handleShift();for(let t of["{x0.25}","{x1}","{x5}","{x25}"])if(e==t){let e=$('.hg-button[data-skbtn="'+t+'"]'),i=e.hasClass("pressed");$(".hg-button").removeClass("pressed"),i||e.addClass("pressed")}let t=$(".hg-button.pressed").attr("data-skbtn"),i=null!=t?r[t]:1;switch(e){case"{arrowleft}":s.tipibot.moveDirect(s.tipibot.getPosition().add(new paper.Point(-i,0)));break;case"{arrowup}":s.tipibot.moveDirect(s.tipibot.getPosition().add(new paper.Point(0,-i)));break;case"{arrowright}":s.tipibot.moveDirect(s.tipibot.getPosition().add(new paper.Point(i,0)));break;case"{arrowdown}":s.tipibot.moveDirect(s.tipibot.getPosition().add(new paper.Point(0,i)))}}handleShift(){let e="default"===this.keyboard.options.layoutName?"shift":"default";this.keyboard.setOptions({layoutName:e})}}t.VirtualKeyboard=a,t.keyboard=null,t.initializeKeyboard=function(){return t.keyboard=new a,t.keyboard}},212:(e,t,i)=>{"use strict";const n=i(229),o=i(670),s=i(558),r=i(271),a=i(883),l=i(958),d=i(107),h=i(412),u=i(816),p=i(776),c=i(518),g=i(960),m=i(924),b=i(466),f=i(629),v=i(888),C=i(756),S=i(50);let w,y=null,P=null,M=null,x=window;document.addEventListener("DOMContentLoaded",(function(e){!function(){dat.GUI.DEFAULT_WIDTH=325,x.virtualKeyboard=u.initializeKeyboard(),w=new p.GUI({autoPlace:!1});let e=new c.Console,t=new h.CommandDisplay;t.createGUI(e.gui),e.createGUI(),document.getElementById("gui").appendChild(w.getDomElement()),y=new d.Communication(w),n.settingsManager.createGUI(w,x.virtualKeyboard),a.SVGPlot.createGUI(w),l.Calibration.initialize(w),P=new s.Renderer,y.setTipibot(o.tipibot),o.tipibot.initialize(),P.centerOnTipibot(n.Settings.tipibot),g.VisualFeedback.initialize();let i=w.addFolder("Plugins"),r=new m.CommeUnDessein;r.createGUI(i);let M=new b.Telescreen;M.createGUI(i),(new f.SVGSplitter).createGUI(i),(new v.FileManager).createGUI(i);let A=new C.LiveDrawing;A.createGUI(i),A.setRenderer(P),(new S.GCodeViewer).createGUI(i),x.tipibot=o.tipibot,x.settingsManager=n.settingsManager,x.Settings=n.Settings,x.gui=w,x.GUI=p.GUI,x.renderer=P,x.communication=y,x.commandDisplay=t,x.visualFeedback=g.visualFeedback,x.SVGPlot=a.SVGPlot,x.commeUnDessein=r,x.telescreen=M}();let t=()=>{x.nCall=0,requestAnimationFrame(t),P.render()};t(),window.addEventListener("resize",(function(){P.windowResize()}),!1),document.body.addEventListener("mousedown",(function(e){P.mouseDown(e)})),document.body.addEventListener("mousemove",(function(e){if(P.mouseMove(e),o.tipibot.settingPosition){let t=P.getWorldPosition(e);null==M&&(M=paper.Path.Circle(t,r.Pen.HOME_RADIUS)),M.position=t,o.tipibot.setPositionSliders(t)}})),document.body.addEventListener("mouseup",(function(e){P.mouseUp(e),o.tipibot.settingPosition&&!n.settingsManager.tipibotPositionFolder.getController("Set position with mouse").contains(e.target)&&(null!=M&&(M.remove(),M=null),o.tipibot.setPosition(P.getWorldPosition(e)),o.tipibot.toggleSetPosition(!1,!1))})),document.body.addEventListener("mouseleave",(function(e){P.mouseLeave(e)})),document.body.addEventListener("keydown",(function(e){o.tipibot.keyDown(e),P.keyDown(e)})),document.body.addEventListener("keyup",(function(e){o.tipibot.keyUp(e),P.keyUp(e)})),addWheelListener(document.body,(function(e){P.mouseWheel(e)}))}))},271:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Pen=t.MoveType=void 0;const n=i(107),o=i(229),s=i(670);var r;!function(e){e[e.Direct=0]="Direct",e[e.Linear=1]="Linear"}(r=t.MoveType||(t.MoveType={}));class a{constructor(e,t,i,n){this.isUp=!0,this.dragging=!1,this.initialize(e,t,i,n)}static moveTypeFromMouseEvent(e){return e.altKey?r.Linear:r.Direct}initialize(e,t,i,n){this.group=new paper.Group;let o=new paper.Point(e,t),s=new paper.Point(e,t-i);this.circle=paper.Path.Circle(o,a.RADIUS),this.circle.fillColor=a.UP_COLOR,this.group.addChild(this.circle),this.lines=new paper.Path,this.lines.add(new paper.Point(0,0)),this.lines.add(s),this.lines.add(new paper.Point(n,0)),this.group.addChild(this.lines),this.offsetLine=new paper.Path,this.offsetLine.add(s),this.offsetLine.add(o),this.group.addChild(this.offsetLine),this.previousPosition=new paper.Point(0,0),this.group.onMouseDrag=e=>this.onMouseDrag(e),this.group.onMouseUp=e=>this.onMouseUp(e)}onMouseDrag(e){this.setPosition(this.circle.position.add(e.delta),!0,!1),this.dragging=!0}onMouseUp(e){this.dragging&&this.setPosition(this.getPosition(),!0,!0,a.moveTypeFromMouseEvent(e)),this.dragging=!1}getPosition(){return this.circle.position.clone()}setPosition(e,t=!0,i=!0,n=r.Direct,a=null){if(null==e||Number.isNaN(e.x)||Number.isNaN(e.y))return;t&&s.tipibot.setPositionSliders(e),i&&(n==r.Direct?s.tipibot.moveDirect(e,a):s.tipibot.moveLinear(e,0,o.Settings.tipibot.maxSpeed,a));let l=new paper.Point(e.x,e.y-o.Settings.tipibot.penOffset);this.circle.position=e,this.lines.segments[1].point=l,this.offsetLine.segments[0].point=l,this.offsetLine.segments[1].point=e}tipibotWidthChanged(){this.lines.segments[2].point.x=o.Settings.tipibot.width}penUp(e=o.SettingsManager.servoUpAngle(),t=o.Settings.servo.delay.up.before,i=o.Settings.servo.delay.up.after,s=null){n.communication.interpreter.sendPenUp(e,t,i,(()=>{this.isUp=!0,null!=s&&s()})),this.circle.fillColor=a.UP_COLOR,this.isUp=!0}penDown(e=o.SettingsManager.servoDownAngle(),t=o.Settings.servo.delay.down.before,i=o.Settings.servo.delay.down.after,s=null){n.communication.interpreter.sendPenDown(e,t,i,(()=>{this.isUp=!1,null!=s&&s()})),this.circle.fillColor=a.DOWN_COLOR,this.isUp=!1}}t.Pen=a,a.HOME_RADIUS=6,a.RADIUS=6,a.UP_COLOR="rgba(0, 20, 210, 0.25)",a.DOWN_COLOR="rgba(0, 20, 210, 0.8)"},883:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SVGPlot=void 0;const n=i(670),o=i(229),s=i(107),r=i(776);class a{constructor(e=null){this.pseudoCurvatureDistance=10,this.currentColorIndex=0,this.nSegments=0,this.currentPath=null,this.plotting=!1,null!=a.svgPlot&&(a.svgPlot.destroy(),a.svgPlot=null),a.svgPlot=this,null!=this.background&&this.background.remove(),null!=this.group&&this.group.remove(),this.group=new paper.Group,this.group.sendToBack(),null!=a.currentMatrix&&(this.group.applyMatrix=!1,this.group.matrix=a.currentMatrix),this.item=e,this.item.strokeScaling=!0,this.group.addChild(this.item),this.originalItem=null,this.setBackground(),this.center(),console.log("Collapsing SVG..."),a.collapse(this.item,this.group,this.item.strokeBounds),console.log("SVG collapsed."),this.filter(),this.group.onMouseDrag=e=>this.onMouseDrag(e),document.addEventListener("SettingChanged",(e=>this.onSettingChanged(e)),!1)}static loadImage(e,t=null){let i=paper.project.importSVG(e.target.result);new a(i),a.gui.getController("Draw").show(),a.gui.getController("Save GCode").show(),console.log("SVG imported."),r.GUI.stopLoadingAnimation(),null!=t&&t()}static onImageLoad(e,t=null){console.log("Importing SVG..."),r.GUI.startLoadingAnimation((()=>a.loadImage(e,t)))}static handleFileSelect(e){this.gui.getController("Load SVG").hide(),this.gui.getController("Clear SVG").show();let t=null!=e.dataTransfer?e.dataTransfer.files:e.target.files;this.files=[];for(let e=0;e<t.length;e++){let i=null!=t[e]?t[e]:t.item(e);/^image\//.test(i.type)&&this.files.push(i)}this.fileIndex=0,this.files.length<t.length&&console.info("Warning: some of the selected files are not SVG images, there will not be imported."),this.loadNextFile()}static loadNextFile(e=null){if(this.fileIndex>=this.files.length)return;let t=this.files[this.fileIndex],i=new FileReader;i.onload=t=>this.onImageLoad(t,e),i.readAsText(t)}static plotAndLoadLoop(e=null){null!=this.svgPlot&&this.svgPlot.plot()}static saveGCode(){null!=this.svgPlot&&this.svgPlot.plot(null,!0,!0)}static clearClicked(e){this.fileIndex=0,s.communication.interpreter.clearQueue(),a.gui.getController("Load SVG").show(),a.gui.getController("Clear SVG").hide(),a.svgPlot.destroy(),a.svgPlot=null,a.gui.getController("Draw").name("Draw"),a.gui.getController("Draw").hide(),a.gui.getController("Save GCode").hide()}static drawClicked(e){null!=a.svgPlot&&(a.svgPlot.plotting?(a.gui.getController("Draw").name("Draw"),s.communication.interpreter.sendStop(!0),s.communication.interpreter.clearQueue(),a.svgPlot.plotting=!1,n.tipibot.goHome()):(a.gui.getController("Draw").name("Stop, clear commands & go home"),a.plotAndLoadLoop()))}static saveGCodeClicked(e){if(null!=a.svgPlot){s.communication.interpreter.sendStop(!0),s.communication.interpreter.clearQueue(),s.communication.interpreter.justQueueCommands=!0,a.saveGCode();let e=s.communication.interpreter.getGCode(),t=new Blob([e],{type:"text/plain;charset=utf-8"});saveAs(t,"gcode.txt"),s.communication.interpreter.clearQueue(),s.communication.interpreter.justQueueCommands=!1}}static createGUI(e){a.gui=e.addFolder("Plot"),a.gui.open(),a.gui.add(o.Settings.plot,"optimizeTrajectories").name("Optimize Trajectories").onFinishChange((e=>o.settingsManager.save(!1))),a.gui.add(o.Settings.plot,"disableMotorsOnceFinished").name("Disable motors once finished").onFinishChange((e=>o.settingsManager.save(!1))),a.gui.addFileSelectorButton("Load SVG","image/svg+xml",!0,(e=>a.handleFileSelect(e))),a.gui.addButton("Clear SVG",a.clearClicked).hide(),a.gui.addButton("Draw",a.drawClicked).hide(),a.gui.addButton("Save GCode",a.saveGCodeClicked).hide();let t=a.gui.addFolder("Filter");t.add(o.Settings.plot,"showPoints").name("Show points").onChange(a.createCallback(a.prototype.showPoints,!0)),t.add(o.Settings.plot,"flatten").name("Flatten").onChange(a.createCallback(a.prototype.filter)),t.add(o.Settings.plot,"flattenPrecision",0,10).name("Flatten precision").onChange(a.createCallback(a.prototype.filter)),t.add(o.Settings.plot,"subdivide").name("Subdivide").onChange(a.createCallback(a.prototype.filter)),t.add(o.Settings.plot,"maxSegmentLength",0,100).name("Max segment length").onChange(a.createCallback(a.prototype.filter));let i=a.gui.addFolder("Transform");a.transformFolder=i,i.addButton("Center",a.createCallback(a.prototype.center)),i.addSlider("X",0).onFinishChange(a.createCallback(a.prototype.setX,!0)),i.addSlider("Y",0).onFinishChange(a.createCallback(a.prototype.setY,!0)),i.addButton("Flip horizontally",a.createCallback(a.prototype.flipX)),i.addButton("Flip vertically",a.createCallback(a.prototype.flipY)),i.addButton("Rotate",a.createCallback(a.prototype.rotate)),i.addSlider("Scale",1,.1,5).onChange(a.createCallback(a.prototype.scale,!0))}static createCallback(e,t=!1,i=[]){return n=>{o.settingsManager.save(!1),null!=a.svgPlot&&(t&&i.unshift(n),e.apply(a.svgPlot,i))}}static itemMustBeDrawn(e){return e.strokeWidth>0&&null!=e.strokeColor}static convertShapeToPath(e){if("Shape"!=e.className||!this.itemMustBeDrawn(e))return e;let t=e.toPath(!0);return e.parent.addChildren(e.children),e.remove(),t}static collapseItem(e,t,i=null,n=null){if(e.applyMatrix=!0,"CompoundPath"==(e=this.convertShapeToPath(e)).className)for(let t of e.children)t.strokeColor=e.strokeColor;for(e.remove(),"Path"==e.className&&this.itemMustBeDrawn(e)&&t.addChild(e);null!=e.children&&e.children.length>0;)this.collapseItem(e.firstChild,t,i,n)}static collapse(e,t=null,i=null){if(null==e.children||0==e.children.length)return;let n=e.children.slice();for(let o of n)this.collapseItem(o,e,t,i)}static subdividePath(e,t){if(null!=e.segments)for(let i of e.segments){let e=i.curve;do{e=e.divideAt(t)}while(null!=e)}}static filter(e){for(let t of e.children){if("Path"!=t.className)continue;let e=t;o.Settings.plot.flatten&&e.flatten(o.Settings.plot.flattenPrecision),o.Settings.plot.subdivide&&this.subdividePath(e,o.Settings.plot.maxSegmentLength)}}static splitLongPaths(e){for(let t of e.children){let e=t;e.segments.length>a.nSegmentsPerBatch&&e.splitAt(e.segments[a.nSegmentsPerBatch-1].location)}}setBackground(){null!=this.background&&this.background.remove(),this.background=paper.Path.Rectangle(this.item.bounds),this.background.fillColor="white",this.background.strokeColor=null,this.background.strokeWidth=0,this.background.sendToBack(),this.background.name="background",this.group.addChild(this.background)}countSegments(){let e=0;for(let t of this.item.children)e+=t.segments.length;return e}warnIfTooManyCommands(){let e=this.countSegments();if(e>a.nSegmentsPerBatch){let t=`Warning: there are ${e} segments to draw. \nOptimizing trajectories and computing speeds (in full speed mode) will take some time to compute \n(but it will optimize drawing time), make sure to check your settings before starting drawing.`;console.info(t)}}onSettingChanged(e){(e.detail.all||"Pen"==e.detail.parentNames[0])&&"penWidth"==e.detail.name&&null!=this.group&&this.updateShape()}onMouseDrag(e){n.tipibot.pen.dragging||this.checkPlotting()||(this.group.position=this.group.position.add(e.delta),this.updatePositionGUI())}updatePositionGUI(){a.transformFolder.getController("X").setValueNoCallback(this.group.bounds.left-n.tipibot.drawArea.bounds.left),a.transformFolder.getController("Y").setValueNoCallback(this.group.bounds.top-n.tipibot.drawArea.bounds.top)}saveItem(){for(let e of this.item.children){let t=e;null!=t.segments&&t.segments.length>1e5&&t.splitAt(t.segments[99999].location)}this.originalItem=this.item.clone(!1)}loadItem(){this.originalItem.position=this.item.position,this.originalItem.applyMatrix=!1,this.originalItem.scaling=this.item.scaling,this.item.remove(),this.item=this.originalItem.clone(!1),this.group.addChild(this.item)}updateShape(){null!=this.raster&&this.raster.remove(),this.item.strokeWidth=o.Settings.tipibot.penWidth/this.group.scaling.x;for(let e of this.item.children)e.strokeWidth=o.Settings.tipibot.penWidth/this.group.scaling.x;this.item.selected=!1,this.item.visible=!0,this.raster=this.item.rasterize(paper.project.view.resolution),this.group.addChild(this.raster),this.raster.sendToBack(),null!=this.background&&this.background.sendToBack(),this.item.selected=o.Settings.plot.showPoints,this.item.visible=o.Settings.plot.showPoints}filter(){this.checkPlotting()||(null==this.originalItem&&(o.Settings.plot.subdivide||o.Settings.plot.flatten)?this.saveItem():null!=this.originalItem&&this.loadItem(),console.log("Flattening and subdividing paths..."),a.filter(this.item),console.log("Paths flattenned and subdivided."),console.log("Splitting long paths..."),a.splitLongPaths(this.item),console.log("Paths split."),console.log("There are "+this.item.children.length+" paths in this SVG."),this.warnIfTooManyCommands(),this.updateShape())}findClosestPath(e,t){if("Path"!=e.className||null==e.firstSegment||null==e.lastSegment)return null;let i=null,n=Number.MAX_VALUE,o=!1,s=e.closed?e.firstSegment.point:e.lastSegment.point;for(let r of t.children){let t=r;if(t==e||null==t.segments)continue;let a=t.firstSegment.point.getDistance(s);a<n&&(n=a,i=t,o=!1),a=t.lastSegment.point.getDistance(s),a<n&&(n=a,i=t,o=!0)}return o&&i.reverse(),i}optimizeTrajectories(e){let t=[],i=e.firstChild,n=0;do{i.remove(),t.push(i),i=this.findClosestPath(i,e),n>100&&(console.log("Items to process: "+e.children.length),n=0),n++}while(e.children.length>0&&null!=i);e.addChildren(t)}plot(e=null,t=!0,i=!1){this.plotting=!0,console.log("Generating drawing commands...");let s=this.item.clone();s.applyMatrix=!0,s.transform(this.group.matrix),s.visible=!0,r.GUI.startLoadingAnimation();let a=new Map;for(let e of s.children){let t=e.strokeColor instanceof paper.Color?e.strokeColor.toCSS():e.strokeColor,i=a.get(t);null!=i?i.push(e):a.set(t,[e])}for(let[e,t]of a){console.log("color",e,t.length);let i=new paper.Group;i.addChildren(t),o.Settings.plot.optimizeTrajectories&&this.optimizeTrajectories(i),s.addChildren(i.children),i.remove()}r.GUI.stopLoadingAnimation(),this.currentPath=s.firstChild;let l=this.getColorCSS(this.currentPath.strokeColor);n.tipibot.sendChangePen(l,this.currentColorIndex++),i?(this.plotGCode(),t&&n.tipibot.goHome(),o.Settings.plot.disableMotorsOnceFinished&&n.tipibot.disableMotors(!0),this.plotting=!1):(this.plotAll(),t?n.tipibot.goHome((()=>this.plotFinished(e))):this.plotFinished(e)),s.remove()}showPoints(e){this.item.selected=e,this.item.visible=e}storeMatrix(){a.currentMatrix=this.group.matrix}checkPlotting(){return!!this.plotting&&(console.error("You cannot apply any filter or transformation while the machine is plotting."),!0)}rotate(){this.checkPlotting()||(this.group.rotate(90),this.updateShape(),this.updatePositionGUI(),this.storeMatrix())}scale(e){this.checkPlotting()||(this.group.applyMatrix=!1,this.group.scaling=new paper.Point(Math.sign(this.group.scaling.x)*e,Math.sign(this.group.scaling.y)*e),this.updateShape(),this.updatePositionGUI(),this.storeMatrix())}center(){this.checkPlotting()||(this.group.position=n.tipibot.drawArea.bounds.center,this.updatePositionGUI(),this.storeMatrix())}flipX(){this.checkPlotting()||(this.group.scale(-1,1),this.updateShape(),this.storeMatrix())}flipY(){this.checkPlotting()||(this.group.scale(1,-1),this.updateShape(),this.storeMatrix())}setX(e){this.checkPlotting()||(this.group.position.x=n.tipibot.drawArea.bounds.left+e+this.group.bounds.width/2,this.storeMatrix())}setY(e){this.checkPlotting()||(this.group.position.y=n.tipibot.drawArea.bounds.top+e+this.group.bounds.height/2,this.storeMatrix())}getAngle(e){if(null==e.previous||null==e.point||null==e.next)return 180;let t=e.previous.point.subtract(e.point),i=e.next.point.subtract(e.point),n=t.getDirectedAngle(i);return 180-Math.abs(n)}getPseudoCurvature(e){if(null==e.previous||null==e.point||null==e.next)return 180;let t=this.getAngle(e),i=e.previous,n=i.curve.length;for(;null!=i&&n<this.pseudoCurvatureDistance/2;)t+=this.getAngle(i),i=i.previous,n+=null!=i?i.curve.length:0;for(n=e.curve.length,i=e.next;null!=i.next&&n<this.pseudoCurvatureDistance/2;)t+=this.getAngle(i),i=i.next,n+=null!=i?i.curve.length:0;return Math.max(t,180)}moveTipibotLinear(e){let t=e.point;n.tipibot.moveLinear(t,0,o.Settings.tipibot.drawSpeed,(()=>n.tipibot.pen.setPosition(t,!0,!1)),!1)}plotPath(e){if("Path"==e.className&&a.itemMustBeDrawn(e)&&null!=e.segments){for(let t of e.segments){let i=t.point;t==e.firstSegment?(n.tipibot.lastSentPosition.equals(i)||(n.tipibot.penUp(),n.tipibot.moveDirect(i,(()=>n.tipibot.pen.setPosition(i,!0,!1)),!1)),n.tipibot.penDown()):this.moveTipibotLinear(t)}e.closed&&this.moveTipibotLinear(e.firstSegment)}}getColorCSS(e){return e instanceof paper.Color?e.toCSS():e}plotCurrentPath(){this.plotPath(this.currentPath),this.nSegments+=this.currentPath.segments.length;let e=this.currentPath.nextSibling;if(null!=e){let t=this.getColorCSS(this.currentPath.strokeColor),i=this.getColorCSS(e.strokeColor);if(null!=t&&null!=i&&t!=i){let e=n.tipibot.pen.isUp;n.tipibot.penUp(),n.tipibot.sendChangePen(i,this.currentColorIndex++),e||n.tipibot.penDown()}}this.currentPath=e}plotGCode(){for(this.nSegments=0;null!=this.currentPath;)this.plotCurrentPath()}plotAll(){let e=s.communication.interpreter.commandQueue.length;for(s.communication.interpreter.justQueueCommands=!0,this.nSegments=0;null!=this.currentPath;)this.plotCurrentPath();s.communication.interpreter.justQueueCommands=!1,s.communication.interpreter.startQueue();let t=[];for(let i=e;i<s.communication.interpreter.commandQueue.length;i++)t.push(s.communication.interpreter.commandQueue[i].id);document.dispatchEvent(new CustomEvent("QueueCommands",{detail:t}))}plotFinished(e=null){a.gui.getController("Draw").name("Draw"),this.plotting=!1,null!=e&&e(),o.Settings.plot.disableMotorsOnceFinished&&n.tipibot.disableMotors(!0)}clearData(e){if(e.data=null,e.children)for(let t of e.children)this.clearData(t)}clear(){a.svgPlot==this&&(a.svgPlot=null),null!=this.raster&&(this.raster.remove(),this.raster=null),null!=this.item&&(this.item.remove(),this.item=null),null!=this.originalItem&&(this.originalItem.remove(),this.originalItem=null),null!=this.background&&(this.background.remove(),this.background=null),this.group.removeChildren()}destroy(){this.clear(),null!=this.group&&(this.group.remove(),this.group=null)}}t.SVGPlot=a,a.svgPlot=null,a.gui=null,a.transformFolder=null,a.files=null,a.fileIndex=0,a.currentMatrix=null,a.nSegmentsPerBatch=1e3,a.nSegmentsMax=3*a.nSegmentsPerBatch},924:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommeUnDessein=void 0;const n=i(229),o=i(883),s=i(107),r=i(670),a=i(960);let l=new paper.Size(4e3,3e3),d=function(e){let t=r.tipibot.drawArea.bounds,i=new paper.Point(-l.width/2,-l.height/2);const n=new paper.Rectangle(i,l);return e.subtract(n.topLeft).divide(n.size).multiply(t.size).add(t.topLeft)},h=function(e,t){null==e.x&&null==e.y&&(e=new paper.Point(e));let i=180*t.x+e.x,n=90*t.y+e.y;return i*=1e3,n*=1e3,new paper.Point(i,n)},u="/ajaxCallNoCSRF/";const p="Mode",c="Origin",g="CommeUnDesseinSecret";var m;!function(e){e[e.NextDrawing=0]="NextDrawing",e[e.RequestedNextDrawing=1]="RequestedNextDrawing",e[e.Drawing=2]="Drawing",e[e.SetStatus=3]="SetStatus",e[e.RequestedSetStatus=4]="RequestedSetStatus"}(m||(m={})),t.CommeUnDessein=class{constructor(e=!1){this.mode="CommeUnDessein",this.origin="",this.secret="******",this.state=m.NextDrawing,this.started=!1,this.timeoutID=null,this.testMode=e,this.mode=localStorage.getItem(p)||"CommeUnDessein",this.origin=localStorage.getItem(c)||"";let t=localStorage.getItem(g);null!=t&&(this.secret=t)}createGUI(e){let t="Comme un dessein";this.testMode&&(t+=" (Test mode)");let i=e.addFolder(t);i.add(this,"origin").onFinishChange((e=>localStorage.setItem(c,e))),i.add(this,"mode").onFinishChange((e=>localStorage.setItem(p,e))),i.add(this,"secret").onFinishChange((e=>localStorage.setItem(g,e))),l.width=parseInt(window.localStorage.getItem("commeUnDesseinWidth"))||r.tipibot.drawArea.bounds.width,l.height=parseInt(window.localStorage.getItem("commeUnDesseinHeight"))||r.tipibot.drawArea.bounds.height,i.add(l,"width",0,5e3,1).name("Width").onFinishChange((e=>{window.localStorage.setItem("commeUnDesseinWidth",e)})),i.add(l,"height",0,5e3,1).name("Height").onFinishChange((e=>{window.localStorage.setItem("commeUnDesseinHeight",e)})),this.startButton=i.addButton("Start",(()=>this.toggleStart()))}toggleStart(){this.started?(this.startButton.setName("Start"),this.stopAndClear()):(document.cookie.indexOf("csrftoken")<0&&console.log("Old Warning (which you can ignore safely): the Comme un dessein csrf token cookie is not present, please visit http://commeundessein.co/ before starting Comme un Dessein"),this.startButton.setName("Stop, clear queue & go home"),this.requestNextDrawing()),this.started=!this.started}stopAndClear(){null!=o.SVGPlot.svgPlot&&o.SVGPlot.svgPlot.destroy(),s.communication.interpreter.sendStop(!0),s.communication.interpreter.clearQueue(),r.tipibot.goHome(),this.state=m.NextDrawing,clearTimeout(this.timeoutID)}requestNextDrawing(){if(this.state!=m.NextDrawing)return void console.error("CommeUnDessein trying to request next drawing while not in NextDrawing state");let e={cityName:this.mode,secret:this.secret},t=this.testMode?"getNextTestDrawing":"getNextValidatedDrawing",i={data:JSON.stringify({function:t,args:e})};this.state=m.RequestedNextDrawing,console.log("Request next drawing...");let n=this.origin+u;$.ajax({method:"POST",url:n,data:i}).done((e=>{if(this.testMode&&console.log(e),"no path"==e.message)return this.state=m.NextDrawing,console.log("There are no path to draw. Request next drawing in two seconds..."),void(this.started&&(clearTimeout(this.timeoutID),this.timeoutID=setTimeout((()=>this.requestNextDrawing()),2e3)));this.state==m.RequestedNextDrawing?this.drawSVG(e):console.error("CommeUnDessein trying to set to draw while not in RequestedNextDrawing state")})).fail((e=>{console.error("getNextValidatedDrawing request failed"),console.error(e),this.state=m.NextDrawing,this.started&&(clearTimeout(this.timeoutID),this.timeoutID=setTimeout((()=>this.requestNextDrawing()),2e3))}))}drawSVG(e){if("error"==e.state)return void console.log(e);this.state=m.Drawing,this.currentDrawing=e;let t=new paper.Group;paper.project.importSVG(e.svg,((i,s)=>{if(0!=i.visible){for(let e of i.children){if("Path"!=e.className)continue;let i=e.strokeColor;if(e.strokeWidth<=.2||"white"==e.strokeColor||null==e.strokeColor||e.opacity<=.1||i.alpha<=.2||!e.visible)continue;let o=e.clone();o.flatten(n.Settings.plot.flattenPrecision);for(let e of o.segments)e.point=d(e.point);t.addChild(o)}i.remove(),null!=o.SVGPlot.svgPlot&&o.SVGPlot.svgPlot.destroy(),o.SVGPlot.svgPlot=new o.SVGPlot(t),o.SVGPlot.svgPlot.plot((()=>this.setDrawingStatusDrawn(e.pk)))}else console.error("When receiving next validated drawing: while importing SVG: the imported item is not visible: ignore.")}))}draw(e){if("error"==e.state)return void console.log(e);this.state=m.Drawing,this.currentDrawing=e;let t=new paper.Group;for(let i of e.items){let e=JSON.parse(i),o=(e._id.$oid,e.clientId,null!=e.date&&e.date.$date,null!=e.data&&e.data.length>0?JSON.parse(e.data):null),s=o.points,r=o.planet,a=new paper.Path;for(let e=0;e<s.length;e+=4){let t=s[e];a.add(h(t,r)),a.lastSegment.handleIn=new paper.Point(s[e+1]),a.lastSegment.handleOut=new paper.Point(s[e+2])}a.flatten(n.Settings.plot.flattenPrecision);for(let e of a.segments)e.point=d(e.point);t.addChild(a)}null!=o.SVGPlot.svgPlot&&o.SVGPlot.svgPlot.destroy(),o.SVGPlot.svgPlot=new o.SVGPlot(t),o.SVGPlot.svgPlot.plot((()=>this.setDrawingStatusDrawn(e.pk)))}setDrawingStatusDrawn(e){if(a.visualFeedback.paths.children.length>0&&a.visualFeedback.paths.removeChildren(),this.state!=m.Drawing)return void console.error("CommeUnDessein trying to setDrawingStatusDrawn while not in Drawing state");let t={pk:e,secret:this.secret},i=this.testMode?"setDrawingStatusDrawnTest":"setDrawingStatusDrawn",n={data:JSON.stringify({function:i,args:t})};this.state=m.RequestedSetStatus,this.testMode&&console.log("setDrawingStatusDrawn");let o=this.origin+u;$.ajax({method:"POST",url:o,data:n}).done((e=>{console.log(e),this.testMode&&console.log(e),"error"!=e.state?this.state==m.RequestedSetStatus?(this.state=m.NextDrawing,this.started&&this.requestNextDrawing()):console.error("CommeUnDessein trying to requestNextDrawing while not in RequestedSetStatus state"):console.error(e)})).fail((t=>{console.error("setDrawingStatusDrawn request failed"),console.error(t),this.state=m.Drawing,this.started&&this.setDrawingStatusDrawn(e)}))}}},888:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileManager=void 0;const n=i(107),o=i(883);t.FileManager=class{constructor(){this.saveFileName="drawing.txt",document.addEventListener("ServerMessage",(e=>this.onServerMessage(e.detail)),!1),this.printingFileName=null}createGUI(e){this.gui=e.addFolder("File Manager"),this.gui.add(this,"saveFileName").name("File name"),this.gui.addButton("Save file",(()=>this.saveFile())),this.filesFolder=this.gui.addFolder("Files"),this.listJ=$('<ul id="console-list" class="c-list">'),this.listJ.insertAfter($(this.filesFolder.gui.domElement).find("li"))}saveFile(){null!=o.SVGPlot.svgPlot?n.communication.interpreter.commandQueue.length>0?console.error("Command queue is not empty ; please finish / empty queue before saving a file."):(n.communication.send("write-file",this.saveFileName),o.SVGPlot.plotAndLoadLoop((()=>n.communication.send("close-file")))):console.error("No SVG loaded.")}exportFile(e,t,i,n,o){let s=e+"_"+t+".svg";console.log("Exporting "+s+"...");let r=i.exportSVG({asString:!0}),a=new Blob([r],{type:"image/svg+xml"});console.log("Exported "+s+"."),n.file(s,a,{}),o.removeChildren()}listFiles(){n.communication.send("list-files")}createFileItem(e){let t=$("<li>").attr("id",e),i=$("<div>").append(e).addClass("file-name");t.append(i);let n=$("<button>Print</button>").addClass("print");n.click((t=>this.printFileItem(e))),t.append(n);let o=$("<button>x</button>").addClass("close");return o.click((t=>this.removeFileItem(e))),t.append(o),t}printFileItem(e){null==this.printingFileName?(this.listJ.find("#"+e).find(".print").text("Cancel print"),n.communication.send("print-file",e),this.printingFileName=e):this.printingFileName==e?(this.listJ.find("#"+e).find(".print").text("Print"),n.communication.send("cancel-print-file",e),this.printingFileName=null):console.error("The file "+this.printingFileName+" is already being printed.")}removeFileItem(e){this.listJ.find("#"+e).remove(),n.communication.send("delete-file",e)}onServerMessage(e){if("files"==e.type){this.listJ.children().remove();for(let t of e.data)this.createFileItem(t)}else"file-printed"==e.type&&(this.listJ.find("#"+e.data).find(".print").text("Print"),console.info("File "+e.data+" printed."))}}},50:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GCodeViewer=void 0;const n=i(229),o=i(670);t.GCodeViewer=class{constructor(){this.fileName=null,this.group=new paper.Group}handleFileSelect(e){let t=null!=e.dataTransfer?e.dataTransfer.files:e.target.files;for(let e=0;e<t.length;e++){let i=null!=t[e]?t[e]:t.item(e),n=new FileReader;n.onload=e=>this.onGCodeLoad(e.target.result,i.name),n.readAsText(i);break}}convertFromMakelangeloCoordinates(e){let t=new paper.Size(n.Settings.tipibot.width,n.Settings.tipibot.height);return e.y*=-1,e.add(t.multiply(.5))}onGCodeLoad(e,t){this.fileName=t;let i=e.split("\n"),s=null,r=null;for(let e of i)if(0==e.indexOf("G0")&&e.indexOf("Z")>0){let t=e.split(" ");for(let e of t)if(0==e.indexOf("Z")){let t=parseFloat(e.substr(1));if(null!=s||null!=r){t>s?r=t:s=t;break}s=t,r=t}}let a=o.tipibot.getHome(),l=new paper.Color(0,0,0),d=!0,h=null,u=null;for(let e of i){if(0==e.indexOf("G0")){let t=e.split(" "),i={};for(let e of t)i[e[0]]=parseFloat(e.substr(1));if(null!=i.Z&&(i.Z!=h&&(h=i.Z,d=!d),d?u=null:(u=new paper.Path,u.strokeColor=l,u.strokeWidth=1,u.add(a),this.group.addChild(u))),null!=i.X||null!=i.Y){let e=null!=i.X?i.X+.5*n.Settings.tipibot.width:a.x,t=null!=i.Y?-i.Y+.5*n.Settings.tipibot.height:a.y;a=new paper.Point(e,t),d||null==u||u.add(a)}}0==e.indexOf("M117 Change pen to ")&&(e=e.replace("M117 Change pen to ","").replace("Click to continue",""),l=new paper.Color(e))}}createGUI(e){this.gui=e.addFolder("GCode Viewer"),this.gui.addFileSelectorButton("Open GCode","text/*",!1,(e=>this.handleFileSelect(e))),this.gui.addButton("Save to SVG",(()=>this.saveSVG())),this.gui.addButton("Clear",(()=>this.clear()))}saveSVG(){var e=document.createElement("div"),t={width:n.Settings.drawArea.width,height:n.Settings.drawArea.height};let i=o.tipibot.computeDrawArea();var s=new Two(t).appendTo(e);for(let e of this.group.children){let t=new Array;for(let n of e.segments)t.push(new Two.Anchor(n.point.x-i.left,n.point.y-i.top,n.handleIn.x,n.handleIn.y,n.handleOut.x,n.handleOut.y,"M"));let n=s.makePath(t,!1);n.linewidth=e.strokeWidth,n.stroke=e.strokeColor.toCSS()}s.update(),e.firstElementChild.setAttribute("xmlns","http://www.w3.org/2000/svg");var r=e.innerHTML;let a=new Blob([r],{type:"image/svg+xml"}),l=URL.createObjectURL(a),d=document.createElement("a");document.body.appendChild(d),d.download=this.fileName+".svg",d.href=l,d.click(),document.body.removeChild(d)}clear(){this.group.removeChildren()}}},756:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LiveDrawing=void 0;const n=i(229),o=i(107),s=i(670);t.LiveDrawing=class{constructor(){this.liveDrawing=!1,this.mouseDown=!1,this.undoRedo=!0,this.undoRedoButtons=!1,this.mustClearCommandQueueOnMouseUp=!1,document.body.addEventListener("mousedown",(e=>this.onMouseDown(e))),document.body.addEventListener("mousemove",(e=>this.onMouseMove(e))),document.body.addEventListener("mouseup",(e=>this.onMouseUp(e))),document.body.addEventListener("mouseleave",(e=>this.onMouseLeave(e))),document.body.addEventListener("keydown",(e=>this.onKeyDown(e))),document.body.addEventListener("keyup",(e=>this.onKeyUp(e))),window.addEventListener("resize",(e=>this.windowResize(e))),document.addEventListener("QueueCommand",(e=>this.queueCommand(e.detail)),!1),document.addEventListener("SendCommand",(e=>this.sendCommand(e.detail)),!1),document.addEventListener("CommandExecuted",(e=>this.commandExecuted(e.detail)),!1),document.addEventListener("ClearQueue",(e=>this.clearQueue()),!1),this.mode="4 Symmetries",this.nRepetitions=1,this.commandQueues=[],this.undoneCommandQueues=[]}setRenderer(e){this.renderer=e}createGUI(e){let t=e.addFolder("Live drawing");this.toggleLiveDrawingButton=t.addButton("Start",(e=>this.toggleLiveDrawing())),t.add(this,"undoRedo").name("Undo / Redo"),t.add(this,"undoRedoButtons").name("Display buttons"),t.add({Mode:this.mode},"Mode",["None","2 Symmetries","4 Symmetries","N. Repetitions"]).onFinishChange((e=>this.renderAxes(e))),t.addSlider("N. Repetitions",1,1,10,1).onChange((e=>{this.nRepetitions=e,this.renderAxes(this.mode)})),t.addButton("Clear drawing",(e=>this.clearDrawing())),t.addButton("Undo",(e=>this.undo())),t.addButton("Redo",(e=>this.redo())),t.addButton("Export SVG",(e=>this.exportSVG()))}clearDrawing(){this.drawing.removeChildren()}exportSVG(){let e=this.project.exportSVG({asString:!0}),t=new Blob([e],{type:"image/svg+xml"}),i=URL.createObjectURL(t),n=document.createElement("a");document.body.appendChild(n),n.download="result.svg",n.href=i,n.click(),document.body.removeChild(n)}renderAxes(e){this.mode=e,this.axes.removeChildren();let t=s.tipibot.drawArea.bounds;if("None"==e);else if("2 Symmetries"==e||"4 Symmetries"==e){let i=new paper.Path;i.strokeColor="black",i.strokeWidth=1,i.dashArray=[5,5],i.add(t.topCenter),i.add(t.bottomCenter),this.axes.addChild(i);let n=i.clone();if(n.firstSegment.point=t.leftCenter,n.lastSegment.point=t.rightCenter,this.axes.addChild(n),"4 Symmetries"==e){let e=i.clone();e.firstSegment.point.x-=t.height<t.width?t.height/2:t.width/2,e.lastSegment.point.x+=t.height<t.width?t.height/2:t.width/2,this.axes.addChild(e);let n=i.clone();n.firstSegment.point.x+=t.height<t.width?t.height/2:t.width/2,n.lastSegment.point.x-=t.height<t.width?t.height/2:t.width/2,this.axes.addChild(n)}}else if("N. Repetitions"==e)for(let e=0;e<this.nRepetitions;e++){let i=new paper.Path;i.strokeColor="black",i.strokeWidth=1,i.dashArray=[5,5];let n=t.center;i.add(n),i.add(t.bottomCenter.rotate(360*e/this.nRepetitions,n)),this.axes.addChild(i)}}windowResize(e=null){if(null==this.canvasJ)return;let t=window.innerWidth,i=window.innerHeight;this.canvasJ.width(t),this.canvasJ.height(i),paper.view.viewSize=new paper.Size(t,i),this.renderer.centerOnTipibot(this.drawArea.bounds,!0,this.canvasJ.get(0)),this.project.view.setCenter(this.drawArea.bounds.center)}startLiveDrawing(){if(n.settingsManager.settingsFolder.getController("disableCommandList").setValue(!0),null==this.canvasJ){this.divJ=$("<div>"),this.canvasJ=$("<canvas>");let e=1e6;this.canvasJ.css({position:"absolute",top:0,left:0,right:0,bottom:0,"z-index":e++,width:window.innerWidth,height:window.innerHeight,background:"white"}),this.divJ.append(this.canvasJ),this.footerJ=$("<div>").css({position:"absolute",bottom:0,left:0,right:0,display:"flex","flex-direction":"row","justify-content":"center","z-index":e++});let t={width:"200px",height:"40px","margin-bottom":"20px","user-select":"none"};this.undoButtonJ=$("<button>").html("&#8592;").css(t).click((()=>this.left())),this.redoButtonJ=$("<button>").html("&#8594;").css(t).click((()=>this.right())),this.footerJ.append(this.undoButtonJ),this.footerJ.append(this.redoButtonJ),this.divJ.append(this.footerJ),$("body").append(this.divJ),this.project=new paper.Project(this.canvasJ.get(0)),this.project.activate(),this.axes=new paper.Group,this.drawing=new paper.Group,this.currentDrawing=new paper.Group,this.drawArea=paper.Path.Rectangle(s.tipibot.drawArea.bounds),this.drawArea.strokeColor="black",this.drawArea.strokeWidth=1,this.undoRedoButtons||(this.undoButtonJ.hide(),this.redoButtonJ.hide()),this.windowResize()}else this.divJ.show(),this.project.activate(),this.undoRedoButtons?(this.undoButtonJ.show(),this.redoButtonJ.show()):(this.undoButtonJ.hide(),this.redoButtonJ.hide());this.renderAxes(this.mode),s.tipibot.ignoreKeyEvents=!0,this.renderer.ignoreWindowResize=!0}stopLiveDrawing(){this.divJ.hide(),paper.projects[0].activate(),this.axes.removeChildren(),s.tipibot.ignoreKeyEvents=!1,this.renderer.ignoreWindowResize=!1,this.renderer.windowResize()}toggleLiveDrawing(){this.liveDrawing=!this.liveDrawing,this.toggleLiveDrawingButton.setName(this.liveDrawing?"Stop":"Start"),this.liveDrawing?this.startLiveDrawing():this.stopLiveDrawing()}createNewCommandQueue(){let e={commands:new Array,paths:new Array};return this.commandQueues.push(e),e}eventWasOnGUI(e){return $.contains(document.getElementById("gui"),e.target)||$.contains(document.getElementById("info"),e.target)||$.contains(this.footerJ.get(0),e.target)}onMouseDown(e){if(!this.liveDrawing||this.eventWasOnGUI(e))return;let t=this.renderer.getWorldPosition(e);if(!s.tipibot.drawArea.bounds.contains(t))return;this.mouseDown=!0;let i=this.undoRedo?this.createNewCommandQueue():null;this.currentLine=new paper.Path,this.currentLine.strokeWidth=n.Settings.tipibot.penWidth,this.currentLine.strokeColor="green",this.currentLine.add(t),this.undoRedo?(this.undoneCommandQueues=[],s.tipibot.moveDirect(t),s.tipibot.penDown(),this.drawing.addChild(this.currentLine),i.paths.push(this.currentLine)):this.currentDrawing.addChild(this.currentLine)}onMouseMove(e){if(this.liveDrawing&&!this.eventWasOnGUI(e)&&this.mouseDown){let t=this.renderer.getWorldPosition(e);if(!s.tipibot.drawArea.bounds.contains(t)||this.undoRedo&&t.getDistance(this.currentLine.lastSegment.point)<15)return;this.undoRedo&&s.tipibot.moveLinear(t),this.currentLine.add(t)}}addLines(e,t){this.undoRedo?(this.drawing.addChild(e),this.drawLines(e),t.paths.push(e)):this.currentDrawing.addChild(e)}pathDrawn(e){e.strokeColor="black"}penUp(e){s.tipibot.penUp(void 0,void 0,void 0,(()=>this.pathDrawn(e)))}drawLines(e){s.tipibot.penUp(),s.tipibot.moveDirect(e.firstSegment.point),s.tipibot.penDown();for(let t of e.segments)s.tipibot.moveLinear(t.point);this.penUp(e)}onMouseUp(e){if(!this.liveDrawing||this.eventWasOnGUI(e))return;let t=this.renderer.getWorldPosition(e);if(!s.tipibot.drawArea.bounds.contains(t))return;this.undoRedo&&s.tipibot.moveLinear(t),this.currentLine.add(t),this.mouseDown=!1,this.undoRedo?this.penUp(this.currentLine):(this.currentLine.simplify(),this.currentLine.flatten(4.25));let i=this.commandQueues[this.commandQueues.length-1];if("None"==this.mode);else if("2 Symmetries"==this.mode||"4 Symmetries"==this.mode){let e=this.currentLine.clone();if(e.pivot=s.tipibot.drawArea.bounds.center,e.scaling.y=-1,this.addLines(e,i),e=this.currentLine.clone(),e.pivot=s.tipibot.drawArea.bounds.center,e.scaling.x=-1,this.addLines(e,i),e=this.currentLine.clone(),e.pivot=s.tipibot.drawArea.bounds.center,e.scaling.x=-1,e.scaling.y=-1,this.addLines(e,i),"4 Symmetries"==this.mode){let e=this.currentLine.clone();e.pivot=s.tipibot.drawArea.bounds.center,e.rotate(90),this.addLines(e,i),e=this.currentLine.clone(),e.pivot=s.tipibot.drawArea.bounds.center,e.rotate(90),e.scaling.x=-1,this.addLines(e,i),e=this.currentLine.clone(),e.pivot=s.tipibot.drawArea.bounds.center,e.rotate(90),e.scaling.y=-1,this.addLines(e,i),e=this.currentLine.clone(),e.pivot=s.tipibot.drawArea.bounds.center,e.rotate(90),e.scaling.x=-1,e.scaling.y=-1,this.addLines(e,i)}}else if("N. Repetitions"==this.mode)for(let e=1;e<this.nRepetitions;e++){let t=this.currentLine.clone();t.pivot=s.tipibot.drawArea.bounds.center,t.rotate(360*e/this.nRepetitions),this.addLines(t,i)}if(this.mustClearCommandQueueOnMouseUp&&1==this.commandQueues.length){this.mustClearCommandQueueOnMouseUp=!1;for(let e of this.commandQueues[0].paths)e.strokeColor="blue";this.commandQueues=[],this.createNewCommandQueue()}}onMouseLeave(e){this.liveDrawing}onKeyDown(e){if(this.liveDrawing)switch(e.keyCode){case 37:this.left();break;case 39:this.right();break;case 27:this.toggleLiveDrawing()}}onKeyUp(e){this.liveDrawing}undo(){if(!this.liveDrawing)return;let e=this.commandQueues.pop();if(null!=e){this.undoneCommandQueues.push(e);for(let t of e.commands)o.communication.interpreter.removeCommand(t.id),document.dispatchEvent(new CustomEvent("CancelCommand",{detail:t}));for(let t of e.paths)t.remove()}}redo(){if(!this.liveDrawing)return;let e=this.undoneCommandQueues.pop();if(null!=e){this.createNewCommandQueue();for(let t of e.commands)o.communication.interpreter.queue(t.data,t.message,t.callback);for(let t of e.paths)this.drawing.addChild(t),this.commandQueues[this.commandQueues.length-1].paths.push(t)}}left(){this.undoRedo?this.undo():this.currentDrawing.removeChildren()}right(){if(this.undoRedo)this.redo();else{for(let e of this.currentDrawing.children.slice())e.strokeColor="black",this.drawing.addChild(e),this.drawLines(e);this.currentDrawing.removeChildren()}}removeCommand(e,t){let i=e.findIndex((e=>e.id==t));i>=0&&e.splice(i,1)}removeCommandFromQueues(e){for(let t of this.commandQueues)for(let i of t.commands)i.id==e&&this.removeCommand(t.commands,e)}queueCommand(e){this.liveDrawing&&this.undoRedo&&this.commandQueues[this.commandQueues.length-1].commands.push(e)}sendCommand(e){if(this.liveDrawing&&this.undoRedo)for(let t of this.commandQueues)for(let i of t.commands)if(e==i){console.log("SEND");let e=this.commandQueues.findIndex((e=>e==t));e>=0&&(!this.mouseDown||1!=this.commandQueues.length)?this.commandQueues.splice(e,1):e>=0&&this.mouseDown&&1==this.commandQueues.length&&(this.mustClearCommandQueueOnMouseUp=!0),this.commandQueues.length<=0&&this.createNewCommandQueue();for(let e of t.paths)e.strokeColor="blue";return}}commandExecuted(e){this.liveDrawing&&this.undoRedo&&this.removeCommandFromQueues(e.id)}clearQueue(){this.liveDrawing&&(this.commandQueues=[],this.undoneCommandQueues=[])}}},629:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SVGSplitter=void 0;const n=i(776),o=i(883);t.SVGSplitter=class{constructor(){}loadImage(e,t){let i=paper.project.importSVG(e.target.result);console.log("SVG imported."),this.splitSVG(i,t),n.GUI.stopLoadingAnimation()}onImageLoad(e,t){console.log("Importing SVG..."),n.GUI.startLoadingAnimation((()=>this.loadImage(e,t)))}handleFileSelect(e){let t=null!=e.dataTransfer?e.dataTransfer.files:e.target.files;for(let e=0;e<t.length;e++){let i=null!=t[e]?t[e]:t.item(e);if(!/^image\//.test(i.type))continue;let n=new FileReader;n.onload=e=>this.onImageLoad(e,i.name),n.readAsText(i);break}}createGUI(e){this.gui=e.addFolder("SVG Splitter"),this.gui.addFileSelectorButton("Split SVG","image/svg+xml",!1,(e=>this.handleFileSelect(e)))}exportFile(e,t,i,n,o){let s=e+"_"+t+".svg";console.log("Exporting "+s+"...");let r=i.exportSVG({asString:!0}),a=new Blob([r],{type:"image/svg+xml"});console.log("Exported "+s+"."),n.file(s,a,{}),o.removeChildren()}splitSVG(e,t){let i=t.replace(/\.[^/.]+$/,"");t.replace(i,""),console.log("Collapsing SVG..."),o.SVGPlot.collapse(e),console.log("SVG collapsed."),o.SVGPlot.collapse(e),console.log("Flattening and subdividing paths..."),o.SVGPlot.filter(e),console.log("Paths flattenned and subdivided."),console.log("Splitting long paths..."),o.SVGPlot.splitLongPaths(e),console.log("Paths split."),console.log("There are "+e.children.length+" paths.");let n=paper.project,s=document.createElement("canvas");s.width=e.strokeBounds.width,s.height=e.strokeBounds.height;let r=new paper.Project(s),a=paper.Path.Rectangle(e.bounds);a.matrix=e.matrix,a.fillColor="white",a.sendToBack();let l=new paper.Group;l.matrix=e.matrix,l.strokeWidth=e.strokeWidth,l.fillColor=e.fillColor,l.strokeColor=e.strokeColor,r.view.setCenter(e.bounds.center);let d=0,h=new JSZip;var u=h.folder(i);let p=0;for(;e.children.length>0;){let t=e.firstChild;t.remove(),l.addChild(t),d+=t.segments.length,d>o.SVGPlot.nSegmentsMax&&(this.exportFile(i,p,r,u,l),d=0,p++)}l.children.length>0&&(this.exportFile(i,p,r,u,l),p++),p>0?(console.log("Exports finished."),console.log(`The SVG was split in ${p} files.`),console.log("Generating zip file..."),h.generateAsync({type:"blob"}).then((e=>{console.log("Zip file generated..."),saveAs(e,i+".zip")}))):console.error("The SVG file seems empty."),l.remove(),r.remove(),s.remove(),e.remove(),n.activate()}}},466:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Telescreen=void 0;const n=i(670);class o{constructor(e){this.timeoutID=null,this.telescreen=e}moveTipibot(e){this.timeoutID=null,"linear"==e?n.tipibot.moveLinear(this.telescreen.position):"direct"==e&&n.tipibot.moveDirect(this.telescreen.position)}moveTipibotDeferred(e){this.clearTimeout(),this.timeoutID=setTimeout((()=>this.moveTipibot(e)),500)}clearTimeout(){null!=this.timeoutID&&(clearTimeout(this.timeoutID),this.timeoutID=null)}positiveLeft(){}negativeLeft(){}positiveRight(){}negativeRight(){}}class s extends o{positiveLeft(){this.telescreen.position.x+=this.telescreen.speed,this.moveTipibotDeferred("linear")}negativeLeft(){this.telescreen.position.x-=this.telescreen.speed,this.moveTipibotDeferred("linear")}positiveRight(){this.telescreen.position.y+=this.telescreen.speed,this.moveTipibotDeferred("linear")}negativeRight(){this.telescreen.position.y-=this.telescreen.speed,this.moveTipibotDeferred("linear")}}class r extends o{positiveLeft(){let e=n.tipibot.cartesianToLengths(this.telescreen.position);e.x+=this.telescreen.speed,this.telescreen.position=n.tipibot.lengthsToCartesian(e),this.moveTipibotDeferred("direct")}negativeLeft(){let e=n.tipibot.cartesianToLengths(this.telescreen.position);e.x-=this.telescreen.speed,this.telescreen.position=n.tipibot.lengthsToCartesian(e),this.moveTipibotDeferred("direct")}positiveRight(){let e=n.tipibot.cartesianToLengths(this.telescreen.position);e.y+=this.telescreen.speed,this.telescreen.position=n.tipibot.lengthsToCartesian(e),this.moveTipibotDeferred("direct")}negativeRight(){let e=n.tipibot.cartesianToLengths(this.telescreen.position);e.y-=this.telescreen.speed,this.telescreen.position=n.tipibot.lengthsToCartesian(e),this.moveTipibotDeferred("direct")}}class a extends o{constructor(){super(...arguments),this.direction=new paper.Point(1,0)}positiveLeft(){this.direction.angle+=12}negativeLeft(){this.direction.angle-=12}positiveRight(){this.telescreen.position=this.telescreen.position.add(this.direction.multiply(this.telescreen.speed)),this.moveTipibotDeferred("linear")}negativeRight(){this.telescreen.position=this.telescreen.position.subtract(this.direction.multiply(this.telescreen.speed)),this.moveTipibotDeferred("linear")}}t.Telescreen=class{constructor(){this.speed=1,this.move=null,this.moves=new Map,this.moves.set("Orthographic",new s(this)),this.moves.set("Polar",new r(this)),this.moves.set("Direction",new a(this)),document.addEventListener("Disconnect",(()=>this.disconnect()),!1),document.addEventListener("Connect",(e=>this.connect(e.detail)),!1),document.addEventListener("MessageReceived",(e=>this.messageReceived(e.detail)),!1),this.move=this.moves.get("Orthographic"),this.position=n.tipibot.getPosition()}createGUI(e){let t=e.addFolder("Telescreen");t.addSlider("Speed",1,1,100,1).onChange((e=>this.speed=e)),this.modeController=t.add({Mode:"Orthographic"},"Mode",["Orthographic","Polar","Direction"]).onFinishChange((e=>this.modeChanged(e)))}changeMode(e){for(let e of this.moves)e[1].clearTimeout();this.move=this.moves.get(e)}modeChanged(e){this.changeMode(e)}cycleMode(){let e=[],t=0,i=0;for(let n of this.moves)n[1]==this.move&&(i=t),e.push(n[0]),t++;let n=e[t+1<e.length?t+1:0];this.changeMode(n),this.modeController.setValue(n),this.modeController.updateDisplay()}connect(e){}disconnect(){}messageReceived(e){n.tipibot.getPosition(),0==e.indexOf("left")?e.indexOf("+")>0?this.move.positiveLeft():e.indexOf("-")>0?this.move.negativeLeft():e.indexOf("OFF")>0&&n.tipibot.togglePenState():0==e.indexOf("right")&&(e.indexOf("+")>0?this.move.positiveRight():e.indexOf("-")>0?this.move.negativeRight():e.indexOf("OFF")>0&&this.cycleMode())}}},558:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Renderer=void 0;const n=i(229);t.Renderer=class{constructor(){this.ignoreWindowResize=!1,this.canvas=document.createElement("canvas");let e=$("#canvas");this.canvas.width=e.width(),this.canvas.height=e.height(),e.get(0).appendChild(this.canvas),paper.setup(this.canvas),paper.project.currentStyle.strokeColor="black",paper.project.currentStyle.strokeWidth=.5,paper.project.currentStyle.strokeScaling=!1,new paper.Layer,this.dragging=!1,this.previousPosition=new paper.Point(0,0),document.addEventListener("SettingChanged",(e=>this.onSettingChanged(e)),!1)}onSettingChanged(e){(e.detail.all||"Machine dimensions"==e.detail.parentNames[0])&&this.centerOnTipibot(n.Settings.tipibot,!0)}centerOnTipibot(e,t=!0,i=this.canvas){if(t){let t=200,n=Math.max((e.width+t)/i.width*window.devicePixelRatio,(e.height+t)/i.height*window.devicePixelRatio);paper.view.zoom=1/n,document.dispatchEvent(new CustomEvent("ZoomChanged",{detail:{}}))}paper.view.setCenter(new paper.Point(e.width/2,e.height/2))}getDomElement(){return paper.view.element}windowResize(){if(this.ignoreWindowResize)return;let e=$("#canvas"),t=e.width(),i=e.height(),o=$(this.canvas);o.width(t),o.height(i),paper.view.viewSize=new paper.Size(t,i),this.centerOnTipibot(n.Settings.tipibot,!1)}getMousePosition(e){return new paper.Point(e.clientX,e.clientY)}getWorldPosition(e){return paper.view.viewToProject(this.getMousePosition(e))}mouseDown(e){this.dragging=!0,this.previousPosition=this.getMousePosition(e)}mouseMove(e){if(4==e.buttons||this.spacePressed&&this.dragging){let t=this.getMousePosition(e);paper.view.translate(t.subtract(this.previousPosition).divide(paper.view.zoom)),paper.view.draw(),this.previousPosition.x=t.x,this.previousPosition.y=t.y}}mouseUp(e){this.dragging=!1}mouseLeave(e){this.dragging=!1}mouseWheel(e){if(e.target!=this.getDomElement())return;let t=this.getWorldPosition(e);paper.view.zoom=Math.max(.1,Math.min(5,paper.view.zoom-e.deltaY/300)),document.dispatchEvent(new CustomEvent("ZoomChanged",{detail:{}}));let i=this.getWorldPosition(e);paper.view.translate(i.subtract(t))}keyDown(e){switch(e.keyCode){case 32:this.spacePressed=!0,$("#canvas").addClass("grab")}}keyUp(e){switch(e.keyCode){case 32:this.spacePressed=!1,$("#canvas").removeClass("grab")}}render(){}}},229:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.settingsManager=t.SettingsManager=t.Settings=void 0,t.Settings={autoConnect:!0,firmware:"Tipibot",forceLinearMoves:!0,forceInitialization:!0,enableTouchKeyboard:!1,tipibot:{width:1780,height:2020,homeX:890,homeY:1288,invertMotorLeft:!1,invertMotorRight:!1,drawSpeed:330,maxSpeed:4042,acceleration:200,stepsPerRev:200,microstepResolution:32,mmPerRev:96,progressiveMicrosteps:!1,penWidth:2,penOffset:0},servo:{speed:100,position:{invert:!1,up:90,down:180},delay:{up:{before:0,after:0},down:{before:1e3,after:2e3}}},drawArea:{y:388,width:1200,height:900},transformMatrix:{destinationPoints:new Array,apply:!1},plot:{showPoints:!1,optimizeTrajectories:!0,disableMotorsOnceFinished:!1,flatten:!0,flattenPrecision:.25,subdivide:!1,maxSegmentLength:10},feedback:{enable:!0,rate:10}};const i=2e4;class n{constructor(){this.gui=null,this.tipibotPositionFolder=null,this.drawAreaDimensionsFolder=null,this.settingsFolder=null,this.motorsFolder=null,this.homeFolder=null,this.virtualKeyboard=null,this.debug=!1,this.loadLocalStorage()}static mmPerSteps(){return t.Settings.tipibot.mmPerRev/(t.Settings.tipibot.stepsPerRev*t.Settings.tipibot.microstepResolution)}static stepsPerMm(){return t.Settings.tipibot.stepsPerRev*t.Settings.tipibot.microstepResolution/t.Settings.tipibot.mmPerRev}static mmToSteps(e){return e.multiply(n.stepsPerMm())}static stepsToMm(e){return e.multiply(n.mmPerSteps())}static servoUpAngle(){return t.Settings.servo.position.invert?t.Settings.servo.position.down:t.Settings.servo.position.up}static servoDownAngle(){return t.Settings.servo.position.invert?t.Settings.servo.position.up:t.Settings.servo.position.down}getControllers(){return this.gui.getFolder("Settings").getAllControllers()}createGUI(e,o){this.gui=e,this.virtualKeyboard=o;let s=e.addFolder("Settings");this.settingsFolder=s,s.open();let r=s.addFolder("Load & Save");r.addFileSelectorButton("Load","application/json",!1,(e=>this.handleFileSelect(e))),r.add(this,"save").name("Save"),this.tipibotPositionFolder=s.addFolder("Position"),this.tipibotPositionFolder.addButton("Set position to home",(()=>this.tipibot.setHome())),this.tipibotPositionFolder.addButton("Set position with mouse",(()=>this.tipibot.toggleSetPosition()));let a=new paper.Point(t.Settings.tipibot.homeX,t.Settings.tipibot.homeY);this.tipibotPositionFolder.add(a,"x",0,t.Settings.tipibot.width).name("X"),this.tipibotPositionFolder.add(a,"y",0,t.Settings.tipibot.height).name("Y"),this.tipibotPositionFolder.open(),this.homeFolder=s.addFolder("Home"),this.homeFolder.add({Position:"Bottom"},"Position",["Custom","Top","Center","Bottom","Left","Right","TopLeft","BottomLeft","TopRight","BottomRight"]),this.homeFolder.add(t.Settings.tipibot,"homeX",0,t.Settings.tipibot.width).name("Home X"),this.homeFolder.add(t.Settings.tipibot,"homeY",0,t.Settings.tipibot.height).name("Home Y");let l=s.addFolder("Machine dimensions");l.add(t.Settings.tipibot,"width",100,1e4,1).name("Width"),l.add(t.Settings.tipibot,"height",100,1e4,1).name("Height"),this.drawAreaDimensionsFolder=s.addFolder("Draw area dimensions"),this.drawAreaDimensionsFolder.add(t.Settings.drawArea,"y",0,t.Settings.tipibot.height,1).name("Offset Y"),this.drawAreaDimensionsFolder.add(t.Settings.drawArea,"width",0,t.Settings.tipibot.width,1).name("Width"),this.drawAreaDimensionsFolder.add(t.Settings.drawArea,"height",0,t.Settings.tipibot.height,1).name("Height");let d=s.addFolder("Pen");d.add(t.Settings.tipibot,"penWidth",.1,20).name("Pen width"),d.add(t.Settings.tipibot,"penOffset",-200,200,1).name("Pen offset"),d.add(t.Settings.servo,"speed",1,360,1).name("Servo speed deg/sec.");let h=d.addFolder("Angles");h.add(t.Settings.servo.position,"invert").name("Invert"),h.add(t.Settings.servo.position,"up",0,3180).name("Up"),h.add(t.Settings.servo.position,"down",0,3180).name("Down");let u=d.addFolder("Delays"),p=u.addFolder("Up");p.add(t.Settings.servo.delay.up,"before",0,3e3,1).name("Before"),p.add(t.Settings.servo.delay.up,"after",0,3e3,1).name("After");let c=u.addFolder("Down");c.add(t.Settings.servo.delay.down,"before",0,3e3,1).name("Before"),c.add(t.Settings.servo.delay.down,"after",0,3e3,1).name("After"),this.motorsFolder=s.addFolder("Motors"),this.motorsFolder.add(t.Settings.tipibot,"invertMotorLeft").name("Invert left motor"),this.motorsFolder.add(t.Settings.tipibot,"invertMotorRight").name("Invert right motor"),this.motorsFolder.add(t.Settings.tipibot,"drawSpeed",1,i,1).name("Draw speed steps/sec."),this.motorsFolder.add(t.Settings.tipibot,"maxSpeed",1,i,1).name("Max speed steps/sec."),this.motorsFolder.add({maxSpeedMm:t.Settings.tipibot.maxSpeed*n.mmPerSteps()},"maxSpeedMm",.1,i*n.mmPerSteps(),.01).name("Max speed mm/sec."),this.motorsFolder.add(t.Settings.tipibot,"acceleration",1,5e3,1).name("Acceleration"),this.motorsFolder.add(t.Settings.tipibot,"stepsPerRev",1,500,1).name("Steps per rev."),this.motorsFolder.add(t.Settings.tipibot,"microstepResolution",1,256,1).name("Step multiplier"),this.motorsFolder.add(t.Settings.tipibot,"mmPerRev",1,250,1).name("Mm per rev."),this.motorsFolder.add(t.Settings.tipibot,"progressiveMicrosteps").name("Progressive Microsteps");let g=s.addFolder("Feedback");g.add(t.Settings.feedback,"enable").name("Enable feedback"),g.add(t.Settings.feedback,"rate",1,100,1).name("Feedback rate (info/sec.)"),g.addButton("Clear feedback",(()=>document.dispatchEvent(new CustomEvent("ClearFeedback")))),s.add(t.Settings,"forceLinearMoves").name("Force linear moves"),s.add(t.Settings,"forceInitialization").name("Force initialization"),s.add(t.Settings,"enableTouchKeyboard").name("Touch Keyboard");let m=this.getControllers();for(let e of m){let t=e.getName(),i=e.getParentNames();e.onChange((e=>this.settingChanged(i,t,e,!1))),e.onFinishChange((e=>this.settingChanged(i,t,e,!0)))}o.createGUI(s),s.add({fullscreen:!1},"fullscreen").onChange((e=>{if(e){let e=document.body;e.requestFullscreen?e.requestFullscreen():e.webkitRequestFullscreen?e.webkitRequestFullscreen():e.msRequestFullscreen&&e.msRequestFullscreen()}else{let e=document;e.exitFullscreen?e.exitFullscreen():e.webkitExitFullscreen?e.webkitExitFullscreen():e.msExitFullscreen&&e.msExitFullscreen()}})).name("Fullscreen")}setTipibot(e){this.tipibot=e}updateHomePosition(e,i=!0){"Top"==e?(t.Settings.tipibot.homeX=t.Settings.tipibot.width/2,t.Settings.tipibot.homeY=t.Settings.drawArea.y):"Center"==e?(t.Settings.tipibot.homeX=t.Settings.tipibot.width/2,t.Settings.tipibot.homeY=t.Settings.drawArea.y+t.Settings.drawArea.height/2):"Bottom"==e?(t.Settings.tipibot.homeX=t.Settings.tipibot.width/2,t.Settings.tipibot.homeY=t.Settings.drawArea.y+t.Settings.drawArea.height):"Left"==e?(t.Settings.tipibot.homeX=t.Settings.tipibot.width/2-t.Settings.drawArea.width/2,t.Settings.tipibot.homeY=t.Settings.drawArea.y+t.Settings.drawArea.height/2):"Right"==e?(t.Settings.tipibot.homeX=t.Settings.tipibot.width/2+t.Settings.drawArea.width/2,t.Settings.tipibot.homeY=t.Settings.drawArea.y+t.Settings.drawArea.height/2):"TopLeft"==e?(t.Settings.tipibot.homeX=t.Settings.tipibot.width/2-t.Settings.drawArea.width/2,t.Settings.tipibot.homeY=t.Settings.drawArea.y):"BottomLeft"==e?(t.Settings.tipibot.homeX=t.Settings.tipibot.width/2-t.Settings.drawArea.width/2,t.Settings.tipibot.homeY=t.Settings.drawArea.y+t.Settings.drawArea.height):"TopRight"==e?(t.Settings.tipibot.homeX=t.Settings.tipibot.width/2+t.Settings.drawArea.width/2,t.Settings.tipibot.homeY=t.Settings.drawArea.y):"BottomRight"==e&&(t.Settings.tipibot.homeX=t.Settings.tipibot.width/2+t.Settings.drawArea.width/2,t.Settings.tipibot.homeY=t.Settings.drawArea.y+t.Settings.drawArea.height),i&&(this.homeFolder.getController("homeX").setValueNoCallback(t.Settings.tipibot.homeX),this.homeFolder.getController("homeY").setValueNoCallback(t.Settings.tipibot.homeY)),this.tipibot.setHome(!1)}settingChanged(e,o,s=null,r=!1){if(t.settingsManager.debug,"Machine dimensions"==e[0])"width"==o?(this.tipibotPositionFolder.getController("x").max(s,!1),this.drawAreaDimensionsFolder.getController("width").max(s,r)):"height"==o&&(this.tipibotPositionFolder.getController("y").max(s,!1),this.drawAreaDimensionsFolder.getController("height").max(s,r),this.drawAreaDimensionsFolder.getController("y").max(s-t.Settings.drawArea.height,r)),"width"!=o&&"height"!=o||(this.updateHomePosition(this.homeFolder.getController("Position").getValue(),!0),this.tipibot.sizeChanged(r));else if("Home"==e[0])"Position"==o&&this.updateHomePosition(s,!0),"homeX"!=o&&"homeY"!=o||(this.homeFolder.getController("Position").setValueNoCallback("Custom"),this.tipibot.setHome(!1));else if("Motors"==e[0]){if("drawSpeed"==o)this.tipibot.drawSpeedChanged(r);else if("maxSpeed"==o){let e=s*n.mmPerSteps();this.motorsFolder.getController("maxSpeedMm").setValueNoCallback(e),this.tipibot.maxSpeedChanged(r)}else if("maxSpeedMm"==o){let e=s/n.mmPerSteps();this.motorsFolder.getController("maxSpeed").setValueNoCallback(e),t.Settings.tipibot.maxSpeed=e,this.tipibot.maxSpeedChanged(r)}else"acceleration"==o?this.tipibot.accelerationChanged(r):"mmPerRev"==o?this.tipibot.mmPerRevChanged(r):"stepsPerRev"==o?this.tipibot.stepsPerRevChanged(r):"microstepResolution"==o?this.tipibot.microstepResolutionChanged(r):"invertMotorLeft"==o||"invertMotorRight"==o&&r?this.tipibot.sendInvertXY():"progressiveMicrosteps"==o&&r&&this.tipibot.sendProgressiveMicrosteps();{let e=t.Settings.tipibot.maxSpeed*n.mmPerSteps(),o=this.motorsFolder.getController("maxSpeedMm");o.max(i*n.mmPerSteps()),o.setValueNoCallback(e)}}else"Position"==e[0]?"x"==o?this.tipibot.setX(s,r):"y"==o&&this.tipibot.setY(s,r):"Angles"!=e[0]||"Pen"!=e[1]||"up"!=o&&"down"!=o?"Pen"==e[0]?"penWidth"==o?r&&this.tipibot.penWidthChanged(!0):"speed"==o?this.tipibot.servoChanged(r,null,!0):"penOffset"==o&&this.tipibot.setPosition(this.tipibot.getPosition(),r,!1):"Draw area dimensions"==e[0]?(this.tipibot.drawAreaChanged(r),this.updateHomePosition(this.homeFolder.getController("Position").getValue(),!0)):"Feedback"==e[0]?this.tipibot.feedbackChanged(r):"enableTouchKeyboard"==o&&(s?this.virtualKeyboard.enableArrowsController.show():this.virtualKeyboard.enableArrowsController.hide()):r&&this.tipibot.servoChanged(r,"up"==o||"down"!=o&&null,!1);document.dispatchEvent(new CustomEvent("SettingChanged",{detail:{parentNames:e,name:o,value:s,changeFinished:r}})),this.save(!1)}settingsChanged(){this.tipibotPositionFolder.getController("x").max(t.Settings.tipibot.width,!1),this.tipibotPositionFolder.getController("y").max(t.Settings.tipibot.height,!1),this.drawAreaDimensionsFolder.getController("width").max(t.Settings.tipibot.width,!1),this.drawAreaDimensionsFolder.getController("height").max(t.Settings.tipibot.height,!1),this.drawAreaDimensionsFolder.getController("y").max(t.Settings.tipibot.height-t.Settings.drawArea.height,!1),this.tipibotPositionFolder.getController("x").setValue(t.Settings.tipibot.homeX,!1),this.tipibotPositionFolder.getController("y").setValue(t.Settings.tipibot.homeY,!1),this.homeFolder.getController("Position").setValue("Custom",!1),this.homeFolder.getController("homeX").setValue(t.Settings.tipibot.homeX,!1),this.homeFolder.getController("homeY").setValue(t.Settings.tipibot.homeY,!1);for(let e of this.getControllers())e.updateDisplay();this.tipibot.drawSpeedChanged(!0),this.tipibot.maxSpeedChanged(!0),this.tipibot.mmPerRevChanged(!0),this.tipibot.stepsPerRevChanged(!0),this.tipibot.microstepResolutionChanged(!0),this.tipibot.penWidthChanged(!0),this.tipibot.servoChanged(!0,null,!0),this.tipibot.sizeChanged(!0),this.tipibot.drawAreaChanged(!0),this.tipibot.setHome(!1),document.dispatchEvent(new CustomEvent("SettingChanged",{detail:{all:!0}})),this.save(!1)}save(e=!0){let i=JSON.stringify(t.Settings,null,"\t");if(localStorage.setItem("settings",i),e){var n=new Blob([i],{type:"application/json"});saveAs(n,"settings.json")}}updateSliders(){let e=this.getControllers();for(let t of e)t.updateDisplay()}copyObjectProperties(e,t){if(null!=t)for(let i in e)e[i]instanceof Array?e[i]=t[i].slice():"object"==typeof e[i]?this.copyObjectProperties(e[i],t[i]):null!=t[i]&&typeof e[i]==typeof t[i]&&(e[i]=t[i])}copyObjectPropertiesFromJSON(e,t){null!=t&&this.copyObjectProperties(e,JSON.parse(t))}onJsonLoad(e){null!=e.target&&null!=e.target.result&&(this.copyObjectPropertiesFromJSON(t.Settings,e.target.result),this.settingsChanged(),this.updateSliders())}handleFileSelect(e){let t=null!=e.dataTransfer?e.dataTransfer.files:e.target.files;for(let e=0;e<t.length;e++){let i=t.item(e),n=new FileReader;n.onload=e=>this.onJsonLoad(e),n.readAsText(i)}}loadLocalStorage(){this.copyObjectPropertiesFromJSON(t.Settings,localStorage.getItem("settings"))}}t.SettingsManager=n,t.settingsManager=new n},670:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tipibot=t.Tipibot=void 0;const n=i(107),o=i(229),s=i(271),r=i(958);class a{constructor(){this.penStateButton=null,this.motorsEnableButton=null,this.settingPosition=!1,this.initialPosition=null,this.initializedCommunication=!1,this.motorsEnabled=!0,this.ignoreKeyEvents=!1,this.moveToButtons=[],document.addEventListener("ZoomChanged",(e=>this.onZoomChanged()),!1),this.lastSentPosition=new paper.Point(0,0)}cartesianToLengths(e){let t=o.Settings.tipibot.width-e.x;return new paper.Point(Math.sqrt(e.x*e.x+e.y*e.y),Math.sqrt(t*t+e.y*e.y))}lengthsToCartesian(e){let t=e.x,i=e.y,n=o.Settings.tipibot.width,s=(t*t-i*i+n*n)/(2*n),r=Math.sqrt(t*t-s*s);return new paper.Point(s,r)}setPositionSliders(e){o.settingsManager.tipibotPositionFolder.getController("x").setValue(e.x,!1),o.settingsManager.tipibotPositionFolder.getController("y").setValue(e.y,!1),this.gui.getController("moveX").setValue(e.x,!1),this.gui.getController("moveY").setValue(e.y,!1)}toggleSetPosition(e=!this.settingPosition,t=!0){e?(o.settingsManager.tipibotPositionFolder.getController("Set position with mouse").setName("Cancel"),this.initialPosition=this.getPosition()):(o.settingsManager.tipibotPositionFolder.getController("Set position with mouse").setName("Set position with mouse"),t&&this.setPositionSliders(this.initialPosition)),this.settingPosition=e}togglePenState(){let e=()=>console.log("pen state changed");this.pen.isUp?this.penDown(o.SettingsManager.servoDownAngle(),o.Settings.servo.delay.down.before,o.Settings.servo.delay.down.after,e,!0):this.penUp(o.SettingsManager.servoUpAngle(),o.Settings.servo.delay.up.before,o.Settings.servo.delay.up.after,e,!0)}computeTipibotArea(){return new paper.Rectangle(0,0,o.Settings.tipibot.width,o.Settings.tipibot.height)}computeDrawArea(){return new paper.Rectangle(o.Settings.tipibot.width/2-o.Settings.drawArea.width/2,o.Settings.drawArea.y,o.Settings.drawArea.width,o.Settings.drawArea.height)}createTarget(e,t,i){let n=new paper.Group,o=new paper.Point(e,t),s=paper.Path.Circle(o,i);s.strokeWidth=1,n.addChild(s);let r=new paper.Path;r.add(new paper.Point(o.x-i,o.y)),r.add(new paper.Point(o.x+i,o.y)),n.addChild(r);let a=new paper.Path;return a.add(new paper.Point(o.x,o.y-i)),a.add(new paper.Point(o.x,o.y+i)),n.addChild(a),n}createMoveToButton(e){let t=paper.Path.Rectangle(e.subtract(6),e.add(6));return t.fillColor="rgba(0, 0, 0, 0.05)",t.onMouseUp=e=>this.moveToButtonClicked(e,t.position),t}initialize(){this.tipibotArea=paper.Path.Rectangle(this.computeTipibotArea()),this.drawArea=paper.Path.Rectangle(this.computeDrawArea()),this.motorLeft=paper.Path.Circle(new paper.Point(0,0),50),this.motorRight=paper.Path.Circle(new paper.Point(o.Settings.tipibot.width,0),50),this.pen=new s.Pen(o.Settings.tipibot.homeX,o.Settings.tipibot.homeY,o.Settings.tipibot.penOffset,o.Settings.tipibot.width),this.home=this.createTarget(o.Settings.tipibot.homeX,o.Settings.tipibot.homeY,s.Pen.HOME_RADIUS);let e=new paper.Point(o.Settings.tipibot.homeX,o.Settings.tipibot.homeY);this.moveToButtonClicked.bind(this),this.moveToButtons.push(this.createMoveToButton(this.drawArea.bounds.topLeft)),this.moveToButtons.push(this.createMoveToButton(this.drawArea.bounds.topRight)),this.moveToButtons.push(this.createMoveToButton(this.drawArea.bounds.bottomLeft)),this.moveToButtons.push(this.createMoveToButton(this.drawArea.bounds.bottomRight)),this.moveToButtons.push(this.createMoveToButton(e)),this.pen.group.bringToFront(),o.settingsManager.setTipibot(this)}moveToButtonClicked(e,t){s.Pen.moveTypeFromMouseEvent(e)==s.MoveType.Direct?this.moveDirect(t):this.moveLinear(t)}onZoomChanged(){let e=new paper.Point(1/paper.view.zoom,1/paper.view.zoom);for(let t of this.moveToButtons)t.applyMatrix=!1,t.scaling=e;this.pen.circle.applyMatrix=!1,this.pen.circle.scaling=e,this.home.applyMatrix=!1,this.home.scaling=e}updateMoveToButtons(){let e=new paper.Point(o.Settings.tipibot.homeX,o.Settings.tipibot.homeY);this.moveToButtons[0].position=this.drawArea.bounds.topLeft,this.moveToButtons[1].position=this.drawArea.bounds.topRight,this.moveToButtons[2].position=this.drawArea.bounds.bottomLeft,this.moveToButtons[3].position=this.drawArea.bounds.bottomRight,this.moveToButtons[4].position=e}updateTipibotArea(){this.tipibotArea.remove(),this.tipibotArea=paper.Path.Rectangle(this.computeTipibotArea())}updateDrawArea(){this.drawArea.remove(),this.drawArea=paper.Path.Rectangle(this.computeDrawArea())}sizeChanged(e){this.motorRight.position.x=o.Settings.tipibot.width,this.updateTipibotArea(),this.updateDrawArea(),this.pen.tipibotWidthChanged(),e&&n.communication.interpreter.sendSize(),this.updateMoveToButtons()}drawAreaChanged(e){this.updateDrawArea(),this.updateMoveToButtons()}drawSpeedChanged(e){e&&n.communication.interpreter.sendDrawSpeed()}maxSpeedChanged(e){e&&n.communication.interpreter.sendMaxSpeed()}accelerationChanged(e){e&&n.communication.interpreter.sendAcceleration()}getPosition(){return this.pen.getPosition()}getHome(){return new paper.Point(o.Settings.tipibot.homeX,o.Settings.tipibot.homeY-o.Settings.tipibot.penOffset)}getGondolaPosition(){let e=this.getPosition();return e.y-=o.Settings.tipibot.penOffset,e}getLengths(){return this.cartesianToLengths(this.getPosition())}setX(e,t=!0){let i=this.getPosition();this.setPosition(new paper.Point(e,i.y),t)}setY(e,t=!0){let i=this.getPosition();this.setPosition(new paper.Point(i.x,e),t)}checkInitialized(){o.Settings.forceInitialization&&!this.initializedCommunication&&n.communication.interpreter.initialize()}sendGondolaPosition(){n.communication.interpreter.sendSetPosition(this.getGondolaPosition())}sendChangePen(e,t){n.communication.interpreter.sendChangePen(e,t)}setPosition(e,t=!0,i=!1){this.pen.setPosition(e,i,!1),t&&(this.lastSentPosition=e,this.checkInitialized(),this.sendGondolaPosition())}sendInvertXY(){n.communication.interpreter.sendInvertXY(),this.sendGondolaPosition()}sendProgressiveMicrosteps(){n.communication.interpreter.sendProgressiveMicrosteps()}move(e,t,i=0,a=o.Settings.tipibot.maxSpeed,l=null,d=!0){this.checkInitialized();let h=d?l:()=>{this.pen.setPosition(t,!0,!1),null!=l&&l()};this.lastSentPosition=t,this.motorsEnabled||this.enableMotors(!0);let u=new paper.Point(t.x,t.y-o.Settings.tipibot.penOffset);e!=s.MoveType.Direct||o.Settings.forceLinearMoves?(r.calibration.applyTransform&&(u=r.calibration.transform(u)),n.communication.interpreter.sendMoveLinear(u,i,a,h)):(r.calibration.applyTransform&&(u=r.calibration.transform(u)),n.communication.interpreter.sendMoveDirect(u,h)),d&&this.pen.setPosition(t,!0,!1)}moveDirect(e,t=null,i=!0){this.move(s.MoveType.Direct,e,0,o.Settings.tipibot.maxSpeed,t,i)}moveLinear(e,t=0,i=o.Settings.tipibot.maxSpeed,n=null,r=!0){this.move(s.MoveType.Linear,e,t,i,n,r)}setSpeed(e){n.communication.interpreter.sendMaxSpeed(e)}stepsPerRevChanged(e){e&&n.communication.interpreter.sendStepsPerRev(o.Settings.tipibot.stepsPerRev)}mmPerRevChanged(e){e&&n.communication.interpreter.sendMmPerRev(o.Settings.tipibot.mmPerRev)}microstepResolutionChanged(e){e&&n.communication.interpreter.sendStepMultiplier(o.Settings.tipibot.microstepResolution)}feedbackChanged(e){e&&n.communication.interpreter.sendFeedback(o.Settings.feedback.enable,o.Settings.feedback.rate)}penWidthChanged(e){e&&n.communication.interpreter.sendPenWidth(o.Settings.tipibot.penWidth)}servoChanged(e,t,i){e&&(i&&(n.communication.interpreter.sendPenLiftRange(),n.communication.interpreter.sendPenDelays(),n.communication.interpreter.sendServoSpeed()),null!=t&&(t?n.communication.interpreter.sendPenUp():n.communication.interpreter.sendPenDown()))}sendSpecs(){n.communication.interpreter.sendSpecs(o.Settings.tipibot.width,o.Settings.tipibot.height,o.Settings.tipibot.stepsPerRev,o.Settings.tipibot.mmPerRev,o.Settings.tipibot.microstepResolution)}pause(e){n.communication.interpreter.sendPause(e)}disableMotors(e){e&&n.communication.interpreter.sendMotorOff(),this.motorsEnableButton.setName("Enable motors"),this.motorsEnabled=!1}enableMotors(e){e&&n.communication.interpreter.sendMotorOn(),this.motorsEnableButton.setName("Disable motors"),this.motorsEnabled=!0}toggleMotors(){this.motorsEnabled?this.disableMotors(!0):this.enableMotors(!0)}executeOnceFinished(e){n.communication.interpreter.executeOnceFinished(e)}penUp(e=o.SettingsManager.servoUpAngle(),t=o.Settings.servo.delay.up.before,i=o.Settings.servo.delay.up.after,n=null,s=!1){this.pen.isUp&&!s||(this.pen.penUp(e,t,i,n),this.penStateButton.setName("Pen down"))}penDown(e=o.SettingsManager.servoDownAngle(),t=o.Settings.servo.delay.down.before,i=o.Settings.servo.delay.down.after,n=null,s=!1){(this.pen.isUp||s)&&(this.pen.penDown(e,t,i,n),this.penStateButton.setName("Pen up"))}setHome(e=!0,t=!0){let i=new paper.Point(o.Settings.tipibot.homeX,o.Settings.tipibot.homeY);this.home.position=i,e&&this.setPosition(i,!0,t),n.communication.interpreter.sendSetHome(this.getGondolaPosition())}goHome(e=null){let t=new paper.Point(o.Settings.tipibot.homeX,o.Settings.tipibot.homeY);this.penUp(o.SettingsManager.servoUpAngle(),o.Settings.servo.delay.up.before,o.Settings.servo.delay.up.after,null,!0),this.moveDirect(t,e,!1)}keyDown(e){if(this.ignoreKeyEvents)return;let t=e.keyCode||e.code;if($.contains($("#gui").get(0),document.activeElement)&&(37==t||38==t||39==t||40==t))return void console.log("Focus on the draw area to move the bot with arrows");let i=e.shiftKey?25:e.ctrlKey?5:e.altKey?1:.25;switch(t){case 37:this.moveDirect(this.getPosition().add(new paper.Point(-i,0)));break;case 38:this.moveDirect(this.getPosition().add(new paper.Point(0,-i)));break;case 39:this.moveDirect(this.getPosition().add(new paper.Point(i,0)));break;case 40:this.moveDirect(this.getPosition().add(new paper.Point(0,i)))}}keyUp(e){}windowResize(){this.motorRight.position.x=o.Settings.tipibot.width,this.updateTipibotArea(),this.updateDrawArea()}}t.Tipibot=a,t.tipibot=new a},960:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.VisualFeedback=t.visualFeedback=void 0;const n=i(229),o=i(271),s=i(670);t.visualFeedback=null;class r{constructor(){this.drawing=!1,this.isPenUp=!0,this.positionPrefix="-p: l: ",this.penPrefix="-pen: ",this.subTargetPrefix="-st: l: ",this.paths=new paper.Group,this.subTargets=new paper.Group,this.group=new paper.Group,this.group.addChild(this.paths),this.group.addChild(this.subTargets);let e=s.tipibot.getPosition(),t=s.tipibot.getGondolaPosition();this.circle=paper.Path.Circle(e,o.Pen.HOME_RADIUS),this.circle.fillColor="rgba(255, 193, 7, 0.25)",this.circle.strokeColor="black",this.circle.strokeWidth=1,this.group.addChild(this.circle),this.lines=new paper.Path,this.lines.add(new paper.Point(0,0)),this.lines.add(t),this.lines.add(new paper.Point(n.Settings.tipibot.width,0)),this.lines.strokeWidth=.5,this.lines.strokeColor="rgba(0, 0, 0, 0.5)",this.lines.dashArray=[2,2],this.lines.strokeScaling=!1,this.group.addChild(this.lines),this.offsetLine=new paper.Path,this.offsetLine.add(t),this.offsetLine.add(e),this.offsetLine.dashArray=[2,2],this.group.addChild(this.offsetLine),document.addEventListener("MessageReceived",(e=>this.onMessageReceived(e.detail)),!1),document.addEventListener("SettingChanged",(e=>this.onSettingChanged(e)),!1),document.addEventListener("ClearFeedback",(e=>this.clear()),!1),document.addEventListener("ZoomChanged",(e=>this.onZoomChanged()),!1),this.group.sendToBack()}static initialize(){t.visualFeedback=new r}clear(){this.paths.removeChildren(),this.subTargets.removeChildren()}onZoomChanged(){this.circle.applyMatrix=!1,this.circle.scaling=new paper.Point(1/paper.view.zoom,1/paper.view.zoom)}setVisible(e){this.group.visible=e}setPosition(e){this.circle.position=e,this.offsetLine.segments[1].point=e;let t=new paper.Point(e.x,e.y-n.Settings.tipibot.penOffset);this.lines.segments[1].point=t,this.offsetLine.segments[0].point=t}computePoint(e,t){let i=e.replace(t,"").split(", r: "),o=parseInt(i[0]),r=parseInt(i[1]),a=new paper.Point(o,r),l=n.SettingsManager.stepsToMm(a);return s.tipibot.lengthsToCartesian(l)}onMessageReceived(e){0==e.indexOf(this.positionPrefix)?this.updatePosition(e):0==e.indexOf(this.subTargetPrefix)?this.setSubTarget(e):0==e.indexOf(this.penPrefix)?this.updatePen(e):console.log(e)}updatePosition(e){let t=this.computePoint(e,this.positionPrefix);if(!t.isNaN()){if(this.isPenUp)this.drawing=!1;else if(!this.drawing&&this.paths){let e=new paper.Path;e.strokeWidth=n.Settings.tipibot.penWidth,e.strokeColor="black",e.strokeScaling=!0,e.add(t),this.paths.addChild(e),this.drawing=!0}else null!=this.paths.lastChild&&this.paths.lastChild.add(t);this.setPosition(t)}}updatePen(e){let t=e.replace(this.penPrefix,""),i=Math.round(parseFloat(t));this.isPenUp=Math.abs(i-Math.round(n.Settings.servo.position.up))<.1||!(Math.abs(i-Math.round(n.Settings.servo.position.down))<.1)&&null,n.Settings.servo.position.invert&&(this.isPenUp=!this.isPenUp),this.circle.fillColor=this.isPenUp?"rgba(255, 193, 7, 0.25)":this.circle.fillColor="rgba(255, 193, 7, 0.9)"}setSubTarget(e){let t=this.computePoint(e,this.subTargetPrefix);if(!this.isPenUp){let e=new paper.Path;e.strokeWidth=.1,e.strokeColor="red",e.strokeScaling=!0,this.subTargets.addChild(e);let i=2;e.add(t.add(i)),e.add(t.add(-i)),e.add(t),e.add(t.add(new paper.Point(i,-i))),e.add(t.add(new paper.Point(-i,i)))}}onSettingChanged(e){(e.detail.all||"Machine dimensions"==e.detail.parentNames[0])&&"width"==e.detail.name&&(this.lines.segments[2].point.x=n.Settings.tipibot.width),(e.detail.all||"Feedback"==e.detail.parentNames[0])&&this.setVisible(n.Settings.feedback.enable),(e.detail.all||"Pen"==e.detail.parentNames[0]&&"penOffset"==e.detail.name)&&this.setPosition(this.circle.position)}}t.VisualFeedback=r}},t={};function i(n){if(t[n])return t[n].exports;var o=t[n]={id:n,exports:{}};return e[n].call(o.exports,o,o.exports,i),o.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i(212)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,