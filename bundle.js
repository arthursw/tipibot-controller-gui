/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={634:(t,e,i)=>{"use strict";i.d(e,{Z:()=>a});var n=i(15),o=i.n(n),s=i(645),r=i.n(s)()(o());r.push([t.id,'/*!\n * \n *   simple-keyboard v2.32.68\n *   https://github.com/hodgef/simple-keyboard\n * \n *   Copyright (c) Francisco Hodge (https://github.com/hodgef)\n * \n *   This source code is licensed under the MIT license found in the\n *   LICENSE file in the root directory of this source tree.\n *   \n */.hg-theme-default{width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;box-sizing:border-box;overflow:hidden;touch-action:manipulation}.hg-theme-default .hg-button span{pointer-events:none}.hg-theme-default button.hg-button{border-width:0;outline:0;font-size:inherit}.hg-theme-default{font-family:"HelveticaNeue-Light","Helvetica Neue Light","Helvetica Neue",Helvetica,Arial,"Lucida Grande",sans-serif;background-color:#ececec;padding:5px;border-radius:5px}.hg-theme-default .hg-button{display:inline-block;flex-grow:1}.hg-theme-default .hg-row{display:flex}.hg-theme-default .hg-row:not(:last-child){margin-bottom:5px}.hg-theme-default .hg-row .hg-button-container,.hg-theme-default .hg-row .hg-button:not(:last-child){margin-right:5px}.hg-theme-default .hg-row>div:last-child{margin-right:0}.hg-theme-default .hg-row .hg-button-container{display:flex}.hg-theme-default .hg-button{box-shadow:0 0 3px -1px rgba(0,0,0,.3);height:40px;border-radius:5px;box-sizing:border-box;padding:5px;background:#fff;border-bottom:1px solid #b5b5b5;cursor:pointer;display:flex;align-items:center;justify-content:center;-webkit-tap-highlight-color:rgba(0,0,0,0)}.hg-theme-default .hg-button.hg-activeButton{background:#efefef}.hg-theme-default.hg-layout-numeric .hg-button{width:33.3%;height:60px;align-items:center;display:flex;justify-content:center}.hg-theme-default .hg-button.hg-button-numpadadd,.hg-theme-default .hg-button.hg-button-numpadenter{height:85px}.hg-theme-default .hg-button.hg-button-numpad0{width:105px}.hg-theme-default .hg-button.hg-button-com{max-width:85px}.hg-theme-default .hg-button.hg-standardBtn.hg-button-at{max-width:45px}.hg-theme-default .hg-button.hg-selectedButton{background:rgba(5,25,70,.53);color:#fff}.hg-theme-default .hg-button.hg-standardBtn[data-skbtn=".com"]{max-width:82px}.hg-theme-default .hg-button.hg-standardBtn[data-skbtn="@"]{max-width:60px}\n/*# sourceMappingURL=index.css.map */',"",{version:3,sources:["webpack://./node_modules/simple-keyboard/build/css/index.css","webpack://./src/lib/components/Keyboard.css"],names:[],mappings:"AAAA;;;;;;;;;;EAUE,CCNF,kBACE,UAAW,CACX,wBAAiB,CAAjB,qBAAiB,CAAjB,oBAAiB,CAAjB,gBAAiB,CACjB,qBAAsB,CACtB,eAAgB,CAChB,yBACF,CAEA,kCACE,mBACF,CAGA,mCACE,cAAe,CACf,SAAU,CACV,iBACF,CAEA,kBACE,oHAC+C,CAC/C,wBAAyB,CACzB,WAAY,CACZ,iBACF,CAEA,6BACE,oBAAqB,CACrB,WAEF,CAEA,0BACE,YACF,CAEA,2CACE,iBACF,CAMA,qGACE,gBACF,CAEA,yCACE,cACF,CAEA,+CACE,YACF,CAEA,6BACE,sCAA+C,CAC/C,WAAY,CACZ,iBAAkB,CAClB,qBAAsB,CACtB,WAAY,CACZ,eAAiB,CACjB,+BAAgC,CAChC,cAAe,CACf,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,yCACF,CAEA,6CACE,kBACF,CAEA,+CACE,WAAY,CACZ,WAAY,CACZ,kBAAmB,CACnB,YAAa,CACb,sBACF,CAMA,oGACE,WACF,CAEA,+CACE,WACF,CAEA,2CACE,cACF,CAEA,yDACE,cACF,CAEA,+CACE,4BAAiC,CACjC,UACF,CAEA,+DACE,cACF,CAEA,4DACE,cACF;AD5GA,oCAAoC",sourcesContent:['/*!\n * \n *   simple-keyboard v2.32.68\n *   https://github.com/hodgef/simple-keyboard\n * \n *   Copyright (c) Francisco Hodge (https://github.com/hodgef)\n * \n *   This source code is licensed under the MIT license found in the\n *   LICENSE file in the root directory of this source tree.\n *   \n */\n/**\n * simple-keyboard\n * Theme: hg-theme-default\n */\n.hg-theme-default {\n  width: 100%;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  box-sizing: border-box;\n  overflow: hidden;\n  touch-action: manipulation;\n}\n\n.hg-theme-default .hg-button span {\n  pointer-events: none;\n}\n\n/* When using option "useButtonTag" */\n.hg-theme-default button.hg-button {\n  border-width: 0;\n  outline: 0;\n  font-size: inherit;\n}\n\n.hg-theme-default {\n  font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue",\n    Helvetica, Arial, "Lucida Grande", sans-serif;\n  background-color: #ececec;\n  padding: 5px;\n  border-radius: 5px;\n}\n\n.hg-theme-default .hg-button {\n  display: inline-block;\n  flex-grow: 1;\n  cursor: pointer;\n}\n\n.hg-theme-default .hg-row {\n  display: flex;\n}\n\n.hg-theme-default .hg-row:not(:last-child) {\n  margin-bottom: 5px;\n}\n\n.hg-theme-default .hg-row .hg-button:not(:last-child) {\n  margin-right: 5px;\n}\n\n.hg-theme-default .hg-row .hg-button-container {\n  margin-right: 5px;\n}\n\n.hg-theme-default .hg-row > div:last-child {\n  margin-right: 0;\n}\n\n.hg-theme-default .hg-row .hg-button-container {\n  display: flex;\n}\n\n.hg-theme-default .hg-button {\n  box-shadow: 0px 0px 3px -1px rgba(0, 0, 0, 0.3);\n  height: 40px;\n  border-radius: 5px;\n  box-sizing: border-box;\n  padding: 5px;\n  background: white;\n  border-bottom: 1px solid #b5b5b5;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n.hg-theme-default .hg-button.hg-activeButton {\n  background: #efefef;\n}\n\n.hg-theme-default.hg-layout-numeric .hg-button {\n  width: 33.3%;\n  height: 60px;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.hg-theme-default .hg-button.hg-button-numpadadd {\n  height: 85px;\n}\n\n.hg-theme-default .hg-button.hg-button-numpadenter {\n  height: 85px;\n}\n\n.hg-theme-default .hg-button.hg-button-numpad0 {\n  width: 105px;\n}\n\n.hg-theme-default .hg-button.hg-button-com {\n  max-width: 85px;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn.hg-button-at {\n  max-width: 45px;\n}\n\n.hg-theme-default .hg-button.hg-selectedButton {\n  background: rgba(5, 25, 70, 0.53);\n  color: white;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn[data-skbtn=".com"] {\n  max-width: 82px;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn[data-skbtn="@"] {\n  max-width: 60px;\n}\n\n','/**\n * simple-keyboard\n * Theme: hg-theme-default\n */\n.hg-theme-default {\n  width: 100%;\n  user-select: none;\n  box-sizing: border-box;\n  overflow: hidden;\n  touch-action: manipulation;\n}\n\n.hg-theme-default .hg-button span {\n  pointer-events: none;\n}\n\n/* When using option "useButtonTag" */\n.hg-theme-default button.hg-button {\n  border-width: 0;\n  outline: 0;\n  font-size: inherit;\n}\n\n.hg-theme-default {\n  font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue",\n    Helvetica, Arial, "Lucida Grande", sans-serif;\n  background-color: #ececec;\n  padding: 5px;\n  border-radius: 5px;\n}\n\n.hg-theme-default .hg-button {\n  display: inline-block;\n  flex-grow: 1;\n  cursor: pointer;\n}\n\n.hg-theme-default .hg-row {\n  display: flex;\n}\n\n.hg-theme-default .hg-row:not(:last-child) {\n  margin-bottom: 5px;\n}\n\n.hg-theme-default .hg-row .hg-button:not(:last-child) {\n  margin-right: 5px;\n}\n\n.hg-theme-default .hg-row .hg-button-container {\n  margin-right: 5px;\n}\n\n.hg-theme-default .hg-row > div:last-child {\n  margin-right: 0;\n}\n\n.hg-theme-default .hg-row .hg-button-container {\n  display: flex;\n}\n\n.hg-theme-default .hg-button {\n  box-shadow: 0px 0px 3px -1px rgba(0, 0, 0, 0.3);\n  height: 40px;\n  border-radius: 5px;\n  box-sizing: border-box;\n  padding: 5px;\n  background: white;\n  border-bottom: 1px solid #b5b5b5;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n.hg-theme-default .hg-button.hg-activeButton {\n  background: #efefef;\n}\n\n.hg-theme-default.hg-layout-numeric .hg-button {\n  width: 33.3%;\n  height: 60px;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.hg-theme-default .hg-button.hg-button-numpadadd {\n  height: 85px;\n}\n\n.hg-theme-default .hg-button.hg-button-numpadenter {\n  height: 85px;\n}\n\n.hg-theme-default .hg-button.hg-button-numpad0 {\n  width: 105px;\n}\n\n.hg-theme-default .hg-button.hg-button-com {\n  max-width: 85px;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn.hg-button-at {\n  max-width: 45px;\n}\n\n.hg-theme-default .hg-button.hg-selectedButton {\n  background: rgba(5, 25, 70, 0.53);\n  color: white;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn[data-skbtn=".com"] {\n  max-width: 82px;\n}\n\n.hg-theme-default .hg-button.hg-standardBtn[data-skbtn="@"] {\n  max-width: 60px;\n}\n'],sourceRoot:""}]);const a=r},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=t(e);return e[2]?"@media ".concat(e[2]," {").concat(i,"}"):i})).join("")},e.i=function(t,i,n){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(n)for(var s=0;s<this.length;s++){var r=this[s][0];null!=r&&(o[r]=!0)}for(var a=0;a<t.length;a++){var l=[].concat(t[a]);n&&o[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),e.push(l))}},e}},15:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}t.exports=function(t){var i,n,o=(n=4,function(t){if(Array.isArray(t))return t}(i=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var i=[],n=!0,o=!1,s=void 0;try{for(var r,a=t[Symbol.iterator]();!(n=(r=a.next()).done)&&(i.push(r.value),!e||i.length!==e);n=!0);}catch(t){o=!0,s=t}finally{try{n||null==a.return||a.return()}finally{if(o)throw s}}return i}}(i,n)||function(t,i){if(t){if("string"==typeof t)return e(t,i);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,i):void 0}}(i,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=o[1],r=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),d="/*# ".concat(l," */"),h=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[s].concat(h).concat([d]).join("\n")}return[s].join("\n")}},86:function(t){t.exports=function(t){var e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(n,o,function(e){return t[e]}.bind(null,o));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/",i(i.s=0)}([function(t,e,i){t.exports=i(1)},function(t,e,i){"use strict";function n(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}i.r(e);var r,a,l,d=function(){function t(e){var i=e.getOptions,n=e.getCaretPosition,o=e.getCaretPositionEnd,s=e.dispatch;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.getOptions=i,this.getCaretPosition=n,this.getCaretPositionEnd=o,this.dispatch=s,t.bindMethods(t,this)}var e,i,r;return e=t,r=[{key:"bindMethods",value:function(t,e){var i,o=function(t,e){var i;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(i=function(t,e){if(t){if("string"==typeof t)return n(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?n(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var o=0,s=function(){};return{s,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,a=!0,l=!1;return{s:function(){i=t[Symbol.iterator]()},n:function(){var t=i.next();return a=t.done,t},e:function(t){l=!0,r=t},f:function(){try{a||null==i.return||i.return()}finally{if(l)throw r}}}}(Object.getOwnPropertyNames(t.prototype));try{for(o.s();!(i=o.n()).done;){var s=i.value;"constructor"===s||"bindMethods"===s||(e[s]=e[s].bind(e))}}catch(t){o.e(t)}finally{o.f()}}}],(i=[{key:"getButtonClass",value:function(t){var e=t.includes("{")&&t.includes("}")&&"{//}"!==t?"functionBtn":"standardBtn",i=t.replace("{","").replace("}",""),n="";return"standardBtn"!==e&&(n=" hg-button-".concat(i)),"hg-".concat(e).concat(n)}},{key:"getDefaultDiplay",value:function(){return{"{bksp}":"backspace","{backspace}":"backspace","{enter}":"< enter","{shift}":"shift","{shiftleft}":"shift","{shiftright}":"shift","{alt}":"alt","{s}":"shift","{tab}":"tab","{lock}":"caps","{capslock}":"caps","{accept}":"Submit","{space}":" ","{//}":" ","{esc}":"esc","{escape}":"esc","{f1}":"f1","{f2}":"f2","{f3}":"f3","{f4}":"f4","{f5}":"f5","{f6}":"f6","{f7}":"f7","{f8}":"f8","{f9}":"f9","{f10}":"f10","{f11}":"f11","{f12}":"f12","{numpaddivide}":"/","{numlock}":"lock","{arrowup}":"↑","{arrowleft}":"←","{arrowdown}":"↓","{arrowright}":"→","{prtscr}":"print","{scrolllock}":"scroll","{pause}":"pause","{insert}":"ins","{home}":"home","{pageup}":"up","{delete}":"del","{end}":"end","{pagedown}":"down","{numpadmultiply}":"*","{numpadsubtract}":"-","{numpadadd}":"+","{numpadenter}":"enter","{period}":".","{numpaddecimal}":".","{numpad0}":"0","{numpad1}":"1","{numpad2}":"2","{numpad3}":"3","{numpad4}":"4","{numpad5}":"5","{numpad6}":"6","{numpad7}":"7","{numpad8}":"8","{numpad9}":"9"}}},{key:"getButtonDisplayName",value:function(t,e,i){return(e=i?Object.assign({},this.getDefaultDiplay(),e):e||this.getDefaultDiplay())[t]||t}},{key:"getUpdatedInput",value:function(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:i,o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],s=this.getOptions(),r=[i,n,o],a=e;return("{bksp}"===t||"{backspace}"===t)&&a.length>0?a=this.removeAt.apply(this,[a].concat(r)):"{space}"===t?a=this.addStringAt.apply(this,[a," "].concat(r)):"{tab}"!==t||"boolean"==typeof s.tabCharOnTab&&!1===s.tabCharOnTab?"{enter}"!==t&&"{numpadenter}"!==t||!s.newLineOnEnter?t.includes("numpad")&&Number.isInteger(Number(t[t.length-2]))?a=this.addStringAt.apply(this,[a,t[t.length-2]].concat(r)):"{numpaddivide}"===t?a=this.addStringAt.apply(this,[a,"/"].concat(r)):"{numpadmultiply}"===t?a=this.addStringAt.apply(this,[a,"*"].concat(r)):"{numpadsubtract}"===t?a=this.addStringAt.apply(this,[a,"-"].concat(r)):"{numpadadd}"===t?a=this.addStringAt.apply(this,[a,"+"].concat(r)):"{numpaddecimal}"===t?a=this.addStringAt.apply(this,[a,"."].concat(r)):"{"===t||"}"===t?a=this.addStringAt.apply(this,[a,t].concat(r)):t.includes("{")||t.includes("}")||(a=this.addStringAt.apply(this,[a,t].concat(r))):a=this.addStringAt.apply(this,[a,"\n"].concat(r)):a=this.addStringAt.apply(this,[a,"\t"].concat(r)),a}},{key:"updateCaretPos",value:function(t,e){var i=this.updateCaretPosAction(t,e);this.dispatch((function(t){t.setCaretPosition(i)}))}},{key:"updateCaretPosAction",value:function(t,e){var i=this.getOptions(),n=this.getCaretPosition();return e?n>0&&(n-=t):n+=t,i.debug&&console.log("Caret at:",n,"(".concat(this.keyboardDOMClass,")")),n}},{key:"addStringAt",value:function(t,e){var i,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.length,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.length,s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];return n||0===n?(i=[t.slice(0,n),e,t.slice(o)].join(""),this.isMaxLengthReached()||s&&this.updateCaretPos(e.length)):i=t+e,i}},{key:"removeAt",value:function(t){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.length,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.length,o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(0===i&&0===n)return t;if(i===n){var s=/([\uD800-\uDBFF][\uDC00-\uDFFF])/g;i&&i>=0?t.substring(i-2,i).match(s)?(e=t.substr(0,i-2)+t.substr(i),o&&this.updateCaretPos(2,!0)):(e=t.substr(0,i-1)+t.substr(i),o&&this.updateCaretPos(1,!0)):t.slice(-2).match(s)?(e=t.slice(0,-2),o&&this.updateCaretPos(2,!0)):(e=t.slice(0,-1),o&&this.updateCaretPos(1,!0))}else e=t.slice(0,i)+t.slice(n),o&&this.dispatch((function(t){t.setCaretPosition(i)}));return e}},{key:"handleMaxLength",value:function(t,e){var i=this.getOptions(),n=i.maxLength,s=t[i.inputName],r=e.length-1>=n;if(e.length<=s.length)return!1;if(Number.isInteger(n))return i.debug&&console.log("maxLength (num) reached:",r),r?(this.maxLengthReached=!0,!0):(this.maxLengthReached=!1,!1);if("object"===o(n)){var a=e.length-1>=n[i.inputName];return i.debug&&console.log("maxLength (obj) reached:",a),a?(this.maxLengthReached=!0,!0):(this.maxLengthReached=!1,!1)}}},{key:"isMaxLengthReached",value:function(){return Boolean(this.maxLengthReached)}},{key:"isTouchDevice",value:function(){return"ontouchstart"in window||navigator.maxTouchPoints}},{key:"pointerEventsSupported",value:function(){return window.PointerEvent}},{key:"camelCase",value:function(t){return!!t&&t.toLowerCase().trim().split(/[.\-_\s]/g).reduce((function(t,e){return e.length?t+e[0].toUpperCase()+e.slice(1):t}))}}])&&s(e.prototype,i),r&&s(e,r),t}();l=function(){},(a="noop")in(r=d)?Object.defineProperty(r,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):r[a]=l;var h=d;function u(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var p=function(){function t(e){var i=e.dispatch,n=e.getOptions;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.dispatch=i,this.getOptions=n,h.bindMethods(t,this)}var e,i;return e=t,(i=[{key:"handleHighlightKeyDown",value:function(t){var e=this.getOptions(),i=this.getSimpleKeyboardLayoutKey(t);this.dispatch((function(t){var n=t.getButtonElement(i)||t.getButtonElement("{".concat(i,"}"));n&&(n.style.backgroundColor=e.physicalKeyboardHighlightBgColor||"#dadce4",n.style.color=e.physicalKeyboardHighlightTextColor||"black",e.physicalKeyboardHighlightPress&&(n.onpointerdown||n.onmousedown||n.ontouchstart||h.noop)())}))}},{key:"handleHighlightKeyUp",value:function(t){var e=this.getOptions(),i=this.getSimpleKeyboardLayoutKey(t);this.dispatch((function(t){var n=t.getButtonElement(i)||t.getButtonElement("{".concat(i,"}"));n&&n.removeAttribute&&(n.removeAttribute("style"),e.physicalKeyboardHighlightPress&&(n.onpointerup||n.onmouseup||n.ontouchend||h.noop)())}))}},{key:"getSimpleKeyboardLayoutKey",value:function(t){var e;return((e=t.code.includes("Numpad")||t.code.includes("Shift")||t.code.includes("Space")||t.code.includes("Backspace")||t.code.includes("Control")||t.code.includes("Alt")||t.code.includes("Meta")?t.code:t.key)&&e!==e.toUpperCase()||"F"===t.code[0]&&Number.isInteger(Number(t.code[1]))&&t.code.length<=3)&&(e=e?e.toLowerCase():e),e}}])&&u(e.prototype,i),t}();function c(t){return function(t){if(Array.isArray(t))return g(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return g(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?g(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function g(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}function m(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function b(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function f(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}var v=function(){function t(){var e=this;m(this,t),f(this,"handleParams",(function(t){var e,i,n;if("string"==typeof t[0])e=t[0].split(".").join(""),i=document.querySelector(".".concat(e)),n=t[1];else if(t[0]instanceof HTMLDivElement){if(!t[0].className)throw console.warn("Any DOM element passed as parameter must have a class."),new Error("KEYBOARD_DOM_CLASS_ERROR");e=t[0].className.split(" ")[0],i=t[0],n=t[1]}else e="simple-keyboard",i=document.querySelector(".".concat(e)),n=t[0];return{keyboardDOMClass:e,keyboardDOM:i,options:n}})),f(this,"getOptions",(function(){return e.options})),f(this,"getCaretPosition",(function(){return e.caretPosition})),f(this,"getCaretPositionEnd",(function(){return e.caretPositionEnd})),f(this,"registerModule",(function(t,i){e.modules[t]||(e.modules[t]={}),i(e.modules[t])})),f(this,"getKeyboardClassString",(function(){for(var t=arguments.length,i=new Array(t),n=0;n<t;n++)i[n]=arguments[n];return[e.keyboardDOMClass].concat(i).filter((function(t){return!!t})).join(" ")}));for(var i=arguments.length,n=new Array(i),o=0;o<i;o++)n[o]=arguments[o];var s=this.handleParams(n),r=s.keyboardDOMClass,a=s.keyboardDOM,l=s.options,d=void 0===l?{}:l;if(this.utilities=new h({getOptions:this.getOptions,getCaretPosition:this.getCaretPosition,getCaretPositionEnd:this.getCaretPositionEnd,dispatch:this.dispatch}),this.caretPosition=null,this.caretPositionEnd=null,this.keyboardDOM=a,this.options=d,this.options.layoutName=this.options.layoutName||"default",this.options.theme=this.options.theme||"hg-theme-default",this.options.inputName=this.options.inputName||"default",this.options.preventMouseDownDefault=this.options.preventMouseDownDefault||!1,this.keyboardPluginClasses="",h.bindMethods(t,this),this.input={},this.input[this.options.inputName]="",this.keyboardDOMClass=r,this.buttonElements={},window.SimpleKeyboardInstances||(window.SimpleKeyboardInstances={}),this.currentInstanceName=this.utilities.camelCase(this.keyboardDOMClass),window.SimpleKeyboardInstances[this.currentInstanceName]=this,this.allKeyboardInstances=window.SimpleKeyboardInstances,this.keyboardInstanceNames=Object.keys(window.SimpleKeyboardInstances),this.isFirstKeyboardInstance=this.keyboardInstanceNames[0]===this.currentInstanceName,this.physicalKeyboard=new p({dispatch:this.dispatch,getOptions:this.getOptions}),!this.keyboardDOM)throw console.warn('".'.concat(r,'" was not found in the DOM.')),new Error("KEYBOARD_DOM_ERROR");this.render(),this.modules={},this.loadModules()}var e,i;return e=t,(i=[{key:"setCaretPosition",value:function(t,e){this.caretPosition=t,this.caretPositionEnd=e||t}},{key:"handleButtonClicked",value:function(t){var e=this.options.debug;if("{//}"===t)return!1;"function"==typeof this.options.onKeyPress&&this.options.onKeyPress(t),this.input[this.options.inputName]||(this.input[this.options.inputName]="");var i=this.utilities.getUpdatedInput(t,this.input[this.options.inputName],this.caretPosition,this.caretPositionEnd);if(this.input[this.options.inputName]!==i&&(!this.options.inputPattern||this.options.inputPattern&&this.inputPatternIsValid(i))){if(this.options.maxLength&&this.utilities.handleMaxLength(this.input,i))return!1;this.input[this.options.inputName]=this.utilities.getUpdatedInput(t,this.input[this.options.inputName],this.caretPosition,this.caretPositionEnd,!0),e&&console.log("Input changed:",this.getAllInputs()),this.options.debug&&console.log("Caret at: ",this.getCaretPosition(),this.getCaretPositionEnd(),"(".concat(this.keyboardDOMClass,")")),this.options.syncInstanceInputs&&this.syncInstanceInputs(),"function"==typeof this.options.onChange&&this.options.onChange(this.getInput(this.options.inputName,!0)),"function"==typeof this.options.onChangeAll&&this.options.onChangeAll(this.getAllInputs())}e&&console.log("Key pressed:",t)}},{key:"handleButtonMouseDown",value:function(t,e){var i=this;e&&(this.options.preventMouseDownDefault&&e.preventDefault(),this.options.stopMouseDownPropagation&&e.stopPropagation(),e.target.classList.add(this.activeButtonClass)),this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),this.holdTimeout&&clearTimeout(this.holdTimeout),this.isMouseHold=!0,this.options.disableButtonHold||(this.holdTimeout=setTimeout((function(){(i.isMouseHold&&(!t.includes("{")&&!t.includes("}")||"{delete}"===t||"{backspace}"===t||"{bksp}"===t||"{space}"===t||"{tab}"===t)||"{arrowright}"===t||"{arrowleft}"===t||"{arrowup}"===t||"{arrowdown}"===t)&&(i.options.debug&&console.log("Button held:",t),i.handleButtonHold(t,e)),clearTimeout(i.holdTimeout)}),500))}},{key:"handleButtonMouseUp",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;i&&(this.options.preventMouseUpDefault&&i.preventDefault(),this.options.stopMouseUpPropagation&&i.stopPropagation()),this.recurseButtons((function(e){e.classList.remove(t.activeButtonClass)})),this.isMouseHold=!1,this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),e&&"function"==typeof this.options.onKeyReleased&&this.options.onKeyReleased(e)}},{key:"handleKeyboardContainerMouseDown",value:function(t){this.options.preventMouseDownDefault&&t.preventDefault()}},{key:"handleButtonHold",value:function(t){var e=this;this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),this.holdInteractionTimeout=setTimeout((function(){e.isMouseHold?(e.handleButtonClicked(t),e.handleButtonHold(t)):clearTimeout(e.holdInteractionTimeout)}),100)}},{key:"syncInstanceInputs",value:function(){var t=this;this.dispatch((function(e){e.replaceInput(t.input),e.setCaretPosition(t.caretPosition,t.caretPositionEnd)}))}},{key:"clearInput",value:function(t){t=t||this.options.inputName,this.input[t]="",this.setCaretPosition(0),this.options.syncInstanceInputs&&this.syncInstanceInputs()}},{key:"getInput",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t=t||this.options.inputName,this.options.syncInstanceInputs&&!e&&this.syncInstanceInputs(),this.options.rtl?"‫"+this.input[t].replace("‫","").replace("‬","")+"‬":this.input[t]}},{key:"getAllInputs",value:function(){var t=this,e={};return Object.keys(this.input).forEach((function(i){e[i]=t.getInput(i,!0)})),e}},{key:"setInput",value:function(t,e){e=e||this.options.inputName,this.input[e]=t,this.options.syncInstanceInputs&&this.syncInstanceInputs()}},{key:"replaceInput",value:function(t){this.input=t}},{key:"setOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=this.changedOptions(t);this.options=Object.assign(this.options,t),e.length&&(this.options.debug&&console.log("changedOptions",e),this.onSetOptions(t),this.render())}},{key:"changedOptions",value:function(t){var e=this;return Object.keys(t).filter((function(i){return JSON.stringify(t[i])!==JSON.stringify(e.options[i])}))}},{key:"onSetOptions",value:function(t){t.inputName&&(this.options.debug&&console.log("inputName changed. caretPosition reset."),this.setCaretPosition(null))}},{key:"clear",value:function(){this.keyboardDOM.innerHTML="",this.keyboardDOM.className=this.keyboardDOMClass,this.buttonElements={}}},{key:"dispatch",value:function(t){if(!window.SimpleKeyboardInstances)throw console.warn("SimpleKeyboardInstances is not defined. Dispatch cannot be called."),new Error("INSTANCES_VAR_ERROR");return Object.keys(window.SimpleKeyboardInstances).forEach((function(e){t(window.SimpleKeyboardInstances[e],e)}))}},{key:"addButtonTheme",value:function(t,e){var i=this;if(!e||!t)return!1;t.split(" ").forEach((function(n){e.split(" ").forEach((function(e){i.options.buttonTheme||(i.options.buttonTheme=[]);var o=!1;i.options.buttonTheme.map((function(t){if(t.class.split(" ").includes(e)){o=!0;var i=t.buttons.split(" ");i.includes(n)||(o=!0,i.push(n),t.buttons=i.join(" "))}return t})),o||i.options.buttonTheme.push({class:e,buttons:t})}))})),this.render()}},{key:"removeButtonTheme",value:function(t,e){var i=this;if(!t&&!e)return this.options.buttonTheme=[],this.render(),!1;t&&Array.isArray(this.options.buttonTheme)&&this.options.buttonTheme.length&&(t.split(" ").forEach((function(t){i.options.buttonTheme.map((function(n,o){if(e&&e.includes(n.class)||!e){var s=n.buttons.split(" ").filter((function(e){return e!==t}));s.length?n.buttons=s.join(" "):(i.options.buttonTheme.splice(o,1),n=null)}return n}))})),this.render())}},{key:"getButtonElement",value:function(t){var e,i=this.buttonElements[t];return i&&(e=i.length>1?i:i[0]),e}},{key:"inputPatternIsValid",value:function(t){var e,i=this.options.inputPattern;if((e=i instanceof RegExp?i:i[this.options.inputName])&&t){var n=e.test(t);return this.options.debug&&console.log('inputPattern ("'.concat(e,'"): ').concat(n?"passed":"did not pass!")),n}return!0}},{key:"setEventListeners",value:function(){!this.isFirstKeyboardInstance&&this.allKeyboardInstances||(this.options.debug&&console.log("Caret handling started (".concat(this.keyboardDOMClass,")")),document.addEventListener("keyup",this.handleKeyUp),document.addEventListener("keydown",this.handleKeyDown),document.addEventListener("mouseup",this.handleMouseUp),document.addEventListener("touchend",this.handleTouchEnd))}},{key:"handleKeyUp",value:function(t){this.caretEventHandler(t),this.options.physicalKeyboardHighlight&&this.physicalKeyboard.handleHighlightKeyUp(t)}},{key:"handleKeyDown",value:function(t){this.options.physicalKeyboardHighlight&&this.physicalKeyboard.handleHighlightKeyDown(t)}},{key:"handleMouseUp",value:function(t){this.caretEventHandler(t)}},{key:"handleTouchEnd",value:function(t){this.caretEventHandler(t)}},{key:"caretEventHandler",value:function(t){var e;t.target.tagName&&(e=t.target.tagName.toLowerCase()),this.dispatch((function(i){var n=t.target===i.keyboardDOM||t.target&&i.keyboardDOM.contains(t.target);i.isMouseHold&&(i.isMouseHold=!1),"textarea"!==e&&"input"!==e||i.options.disableCaretPositioning?!i.options.disableCaretPositioning&&n||i.setCaretPosition(null):(i.setCaretPosition(t.target.selectionStart,t.target.selectionEnd),i.options.debug&&console.log("Caret at: ",i.getCaretPosition(),i.getCaretPositionEnd(),t&&t.target.tagName.toLowerCase(),"(".concat(i.keyboardDOMClass,")")))}))}},{key:"recurseButtons",value:function(t){var e=this;t&&Object.keys(this.buttonElements).forEach((function(i){return e.buttonElements[i].forEach(t)}))}},{key:"destroy",value:function(){this.options.debug&&console.log("Destroying simple-keyboard instance: ".concat(this.currentInstanceName)),document.removeEventListener("keyup",this.handleKeyUp),document.removeEventListener("keydown",this.handleKeyDown),document.removeEventListener("mouseup",this.handleMouseUp),document.removeEventListener("touchend",this.handleTouchEnd),document.onpointerup=null,document.ontouchend=null,document.ontouchcancel=null,document.onmouseup=null;var t=function(t){t.onpointerdown=null,t.onpointerup=null,t.onpointercancel=null,t.ontouchstart=null,t.ontouchend=null,t.ontouchcancel=null,t.onclick=null,t.onmousedown=null,t.onmouseup=null,t.remove(),t=null};this.recurseButtons(t),this.recurseButtons=null,t=null,this.keyboardDOM.onpointerdown=null,this.keyboardDOM.ontouchstart=null,this.keyboardDOM.onmousedown=null,this.clear(),window.SimpleKeyboardInstances[this.currentInstanceName]=null,delete window.SimpleKeyboardInstances[this.currentInstanceName],this.initialized=!1}},{key:"getButtonThemeClasses",value:function(t){var e=this.options.buttonTheme,i=[];return Array.isArray(e)&&e.forEach((function(e){if(e.class&&"string"==typeof e.class&&e.buttons&&"string"==typeof e.buttons){var n=e.class.split(" ");e.buttons.split(" ").includes(t)&&(i=[].concat(c(i),c(n)))}else console.warn('Incorrect "buttonTheme". Please check the documentation.',e)})),i}},{key:"setDOMButtonAttributes",value:function(t,e){var i=this.options.buttonAttributes;Array.isArray(i)&&i.forEach((function(i){i.attribute&&"string"==typeof i.attribute&&i.value&&"string"==typeof i.value&&i.buttons&&"string"==typeof i.buttons?i.buttons.split(" ").includes(t)&&e(i.attribute,i.value):console.warn('Incorrect "buttonAttributes". Please check the documentation.',i)}))}},{key:"onTouchDeviceDetected",value:function(){this.processAutoTouchEvents(),this.disableContextualWindow()}},{key:"disableContextualWindow",value:function(){window.oncontextmenu=function(t){if(t.target.classList.contains("hg-button"))return t.preventDefault(),t.stopPropagation(),!1}}},{key:"processAutoTouchEvents",value:function(){this.options.autoUseTouchEvents&&(this.options.useTouchEvents=!0,this.options.debug&&console.log("autoUseTouchEvents: Touch device detected, useTouchEvents enabled."))}},{key:"onInit",value:function(){this.options.debug&&console.log("".concat(this.keyboardDOMClass," Initialized")),this.setEventListeners(),"function"==typeof this.options.onInit&&this.options.onInit()}},{key:"beforeFirstRender",value:function(){this.utilities.isTouchDevice()&&this.onTouchDeviceDetected(),"function"==typeof this.options.beforeFirstRender&&this.options.beforeFirstRender(),this.isFirstKeyboardInstance&&this.utilities.pointerEventsSupported()&&!this.options.useTouchEvents&&!this.options.useMouseEvents&&this.options.debug&&console.log("Using PointerEvents as it is supported by this browser"),this.options.useTouchEvents&&this.options.debug&&console.log("useTouchEvents has been enabled. Only touch events will be used.")}},{key:"beforeRender",value:function(){"function"==typeof this.options.beforeRender&&this.options.beforeRender()}},{key:"onRender",value:function(){"function"==typeof this.options.onRender&&this.options.onRender()}},{key:"onModulesLoaded",value:function(){"function"==typeof this.options.onModulesLoaded&&this.options.onModulesLoaded(this)}},{key:"loadModules",value:function(){var t=this;Array.isArray(this.options.modules)&&(this.options.modules.forEach((function(e){(new e).init(t)})),this.keyboardPluginClasses="modules-loaded",this.render(),this.onModulesLoaded())}},{key:"getModuleProp",value:function(t,e){return!!this.modules[t]&&this.modules[t][e]}},{key:"getModulesList",value:function(){return Object.keys(this.modules)}},{key:"parseRowDOMContainers",value:function(t,e,i,n){var o=this,s=Array.from(t.children),r=0;return s.length&&i.forEach((function(i,a){var l=n[a];if(!(l&&l>i))return!1;var d=i-r,h=l-r,u=document.createElement("div");u.className+="hg-button-container";var p="".concat(o.options.layoutName,"-r").concat(e,"c").concat(a);u.setAttribute("data-skUID",p);var c=s.splice(d,h-d+1);r=h-d,c.forEach((function(t){return u.appendChild(t)})),s.splice(d,0,u),t.innerHTML="",s.forEach((function(e){return t.appendChild(e)})),o.options.debug&&console.log("rowDOMContainer",c,d,h,r+1)})),t}},{key:"render",value:function(){var t=this;this.clear(),this.initialized||this.beforeFirstRender(),this.beforeRender();var e="hg-layout-".concat(this.options.layoutName),i=this.options.layout||{default:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w e r t y u i o p [ ] \\","{lock} a s d f g h j k l ; ' {enter}","{shift} z x c v b n m , . / {shift}",".com @ {space}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W E R T Y U I O P { } |",'{lock} A S D F G H J K L : " {enter}',"{shift} Z X C V B N M < > ? {shift}",".com @ {space}"]},n=this.options.useTouchEvents||!1,o=n?"hg-touch-events":"",s=this.options.useMouseEvents||!1,r=this.options.disableRowButtonContainers;this.keyboardDOM.className=this.getKeyboardClassString(this.options.theme,e,this.keyboardPluginClasses,o),i[this.options.layoutName].forEach((function(e,i){var o=e.split(" "),a=document.createElement("div");a.className+="hg-row";var l=[],d=[];o.forEach((function(e,o){var h,u=!r&&"string"==typeof e&&e.length>1&&0===e.indexOf("["),p=!r&&"string"==typeof e&&e.length>1&&e.indexOf("]")===e.length-1;u&&(l.push(o),e=e.replace(/\[/g,"")),p&&(d.push(o),e=e.replace(/\]/g,""));var g=t.utilities.getButtonClass(e),m=t.utilities.getButtonDisplayName(e,t.options.display,t.options.mergeDisplay),b=t.options.useButtonTag?"button":"div",f=document.createElement(b);f.className+="hg-button ".concat(g),(h=f.classList).add.apply(h,c(t.getButtonThemeClasses(e))),t.setDOMButtonAttributes(e,(function(t,e){f.setAttribute(t,e)})),t.activeButtonClass="hg-activeButton",!t.utilities.pointerEventsSupported()||n||s?n?(f.ontouchstart=function(i){t.handleButtonClicked(e),t.handleButtonMouseDown(e,i)},f.ontouchend=function(i){t.handleButtonMouseUp(e,i)},f.ontouchcancel=function(i){t.handleButtonMouseUp(e,i)}):(f.onclick=function(){t.isMouseHold=!1,t.handleButtonClicked(e)},f.onmousedown=function(i){t.handleButtonMouseDown(e,i)},f.onmouseup=function(i){t.handleButtonMouseUp(e,i)}):(f.onpointerdown=function(i){t.handleButtonClicked(e),t.handleButtonMouseDown(e,i)},f.onpointerup=function(i){t.handleButtonMouseUp(e,i)},f.onpointercancel=function(i){t.handleButtonMouseUp(e,i)}),f.setAttribute("data-skBtn",e);var v="".concat(t.options.layoutName,"-r").concat(i,"b").concat(o);f.setAttribute("data-skBtnUID",v);var C=document.createElement("span");C.innerHTML=m,f.appendChild(C),t.buttonElements[e]||(t.buttonElements[e]=[]),t.buttonElements[e].push(f),a.appendChild(f)})),a=t.parseRowDOMContainers(a,i,l,d),t.keyboardDOM.appendChild(a)})),this.onRender(),this.initialized||(this.initialized=!0,!this.utilities.pointerEventsSupported()||n||s?n?(document.ontouchend=function(){return t.handleButtonMouseUp()},document.ontouchcancel=function(){return t.handleButtonMouseUp()},this.keyboardDOM.ontouchstart=function(e){return t.handleKeyboardContainerMouseDown(e)}):n||(document.onmouseup=function(){return t.handleButtonMouseUp()},this.keyboardDOM.onmousedown=function(e){return t.handleKeyboardContainerMouseDown(e)}):(document.onpointerup=function(){return t.handleButtonMouseUp()},this.keyboardDOM.onpointerdown=function(e){return t.handleKeyboardContainerMouseDown(e)}),this.onInit())}}])&&b(e.prototype,i),t}();e.default=v}])},23:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});var n=i(379),o=i.n(n),s=i(634);o()(s.Z,{insert:"head",singleton:!1});const r=s.Z.locals||{}},379:(t,e,i)=>{"use strict";var n,o=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}(),s=[];function r(t){for(var e=-1,i=0;i<s.length;i++)if(s[i].identifier===t){e=i;break}return e}function a(t,e){for(var i={},n=[],o=0;o<t.length;o++){var a=t[o],l=e.base?a[0]+e.base:a[0],d=i[l]||0,h="".concat(l," ").concat(d);i[l]=d+1;var u=r(h),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==u?(s[u].references++,s[u].updater(p)):s.push({identifier:h,updater:m(p,e),references:1}),n.push(h)}return n}function l(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var s=i.nc;s&&(n.nonce=s)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var r=o(t.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}return e}var d,h=(d=[],function(t,e){return d[t]=e,d.filter(Boolean).join("\n")});function u(t,e,i,n){var o=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=h(e,o);else{var s=document.createTextNode(o),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(s,r[e]):t.appendChild(s)}}function p(t,e,i){var n=i.css,o=i.media,s=i.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var c=null,g=0;function m(t,e){var i,n,o;if(e.singleton){var s=g++;i=c||(c=l(e)),n=u.bind(null,i,s,!1),o=u.bind(null,i,s,!0)}else i=l(e),n=p.bind(null,i,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var i=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<i.length;n++){var o=r(i[n]);s[o].references--}for(var l=a(t,e),d=0;d<i.length;d++){var h=r(i[d]);0===s[h].references&&(s[h].updater(),s.splice(h,1))}i=l}}}},958:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Calibration=e.calibration=void 0;const n=i(229),o=i(670);e.calibration=null;class s{constructor(t){this.amount=10,this.width=200,this.height=287,this.applyTransform=!1,this.previewTransform=!1,this.previewRectangle=!1,this.previewRectangleItem=null,this.previewTransformItem=null,this.cornersOnly=!1,this.points=[],this.transformMatrix=null,this.loadPoints(),this.createGUI(t)}static initialize(t){e.calibration=new s(t)}loadPoints(){if(null==!n.Settings.transformMatrix||null==n.Settings.transformMatrix.destinationPoints||n.Settings.transformMatrix.destinationPoints.length<8)return this.points=this.getDrawAreaPoints(),void(n.Settings.transformMatrix.destinationPoints=this.points.slice());this.points=n.Settings.transformMatrix.destinationPoints,this.applyTransform=n.Settings.transformMatrix.apply,this.updateTransformMatrix()}createGUI(t){this.gui=t.addFolder("Calibration"),this.gui.addButton("Set top left",(()=>this.updateTransform(0))),this.gui.addButton("Set top right",(()=>this.updateTransform(1))),this.gui.addButton("Set bottom right",(()=>this.updateTransform(2))),this.gui.addButton("Set bottom left",(()=>this.updateTransform(3))),this.gui.addButton("Reset transform",(()=>this.resetTransform())),this.previewTransformController=this.gui.add(this,"previewTransform").name("Preview transform").onFinishChange((()=>this.togglePreviewTransform())),this.gui.add(this,"applyTransform").name("Apply transform").onFinishChange((t=>{n.Settings.transformMatrix.apply=this.applyTransform,n.settingsManager.save(!1)}));let e=this.gui.addFolder("Rectangle test");e.add(this,"width",0,5e3,1).name("Width").onChange((()=>this.updatePreviewRectangle())),e.add(this,"height",0,5e3,1).name("Height").onChange((()=>this.updatePreviewRectangle())),e.add(this,"previewRectangle").name("Preview rectangle").onFinishChange((()=>this.togglePreviewRectangle())),e.add(this,"cornersOnly").name("Corners only").onFinishChange((()=>this.updatePreviewRectangle())),e.addButton("Draw rectangle",(()=>this.drawRectangle()));let i=e.addFolder("Parameter calibration");i.add(this,"amount",0,100,1).name("Amount"),i.addButton("Calibrate Y",(()=>this.calibrateY())),i.addButton("Calibrate Width",(()=>this.calibrateWidth()))}getDrawAreaPoints(){let t=o.tipibot.computeDrawArea(),e=[];return e.push(t.topLeft.x),e.push(t.topLeft.y),e.push(t.topRight.x),e.push(t.topRight.y),e.push(t.bottomRight.x),e.push(t.bottomRight.y),e.push(t.bottomLeft.x),e.push(t.bottomLeft.y),e}updateTransformMatrix(){let t=this.getDrawAreaPoints(),e=this.points;this.transformMatrix=PerspT(t,e)}updateTransform(t){let e=o.tipibot.getPosition();n.Settings.transformMatrix.destinationPoints[2*t]=e.x,n.Settings.transformMatrix.destinationPoints[2*t+1]=e.y,n.settingsManager.save(!1),this.points[2*t]=e.x,this.points[2*t+1]=e.y,this.updateTransformMatrix(),this.previewTransformController.setValue(!0,!0),this.updatePreviewTransform()}resetTransform(){this.points=this.getDrawAreaPoints(),this.transformMatrix=null,this.previewTransform?this.updatePreviewTransform():null!=this.previewRectangleItem&&(this.previewTransformItem.remove(),this.previewTransformItem=null)}transform(t){return null!=this.transformMatrix?new paper.Point(this.transformMatrix.transform(t.x,t.y)):t}getRectangle(){let t=o.tipibot.computeDrawArea().center.subtract(new paper.Point(this.width/2,this.height/2));return new paper.Rectangle(t,new paper.Size(this.width,this.height))}updatePreviewRectangle(){null!=this.previewRectangleItem&&(this.previewRectangleItem.remove(),this.previewRectangleItem=null);let t=this.getRectangle();if(this.cornersOnly){this.previewRectangleItem=new paper.Group;let e=new paper.Path;e.add(t.topLeft.add(new paper.Point(0,10))),e.add(t.topLeft),e.add(t.topLeft.add(new paper.Point(10,0)));let i=new paper.Path;i.add(t.topRight.add(new paper.Point(-10,0))),i.add(t.topRight),i.add(t.topRight.add(new paper.Point(0,10)));let n=new paper.Path;n.add(t.bottomRight.add(new paper.Point(0,-10))),n.add(t.bottomRight),n.add(t.bottomRight.add(new paper.Point(-10,0)));let o=new paper.Path;o.add(t.bottomLeft.add(new paper.Point(10,0))),o.add(t.bottomLeft),o.add(t.bottomLeft.add(new paper.Point(0,-10))),this.previewRectangleItem.addChild(e),this.previewRectangleItem.addChild(i),this.previewRectangleItem.addChild(n),this.previewRectangleItem.addChild(o)}else this.previewRectangleItem=paper.Path.Rectangle(t);this.previewRectangleItem.strokeColor="green",this.previewRectangleItem.strokeWidth=1}togglePreviewRectangle(){this.previewRectangle?this.updatePreviewRectangle():null!=this.previewRectangleItem&&(this.previewRectangleItem.remove(),this.previewRectangleItem=null)}updatePreviewTransform(){let t=o.tipibot.computeDrawArea(),e=this.transform(t.topLeft),i=this.transform(t.topRight),n=this.transform(t.bottomRight),s=this.transform(t.bottomLeft);null!=this.previewTransformItem&&(this.previewTransformItem.remove(),this.previewTransformItem=null),this.previewTransformItem=new paper.Path,this.previewTransformItem.add(e),this.previewTransformItem.add(i),this.previewTransformItem.add(n),this.previewTransformItem.add(s),this.previewTransformItem.add(e),this.previewTransformItem.strokeColor="orange",this.previewTransformItem.strokeWidth=1}togglePreviewTransform(){this.previewTransform?this.updatePreviewTransform():null!=this.previewTransformItem&&(this.previewTransformItem.remove(),this.previewTransformItem=null)}drawRectangle(){let t=this.getRectangle(),e=o.tipibot.getPosition();o.tipibot.sendSpecs(),o.tipibot.penUp(),this.cornersOnly?(o.tipibot.moveDirect(t.topLeft.add(new paper.Point(0,10))),o.tipibot.penDown(),o.tipibot.moveLinear(t.topLeft),o.tipibot.moveLinear(t.topLeft.add(new paper.Point(10,0))),o.tipibot.penUp(),o.tipibot.moveDirect(t.topRight.add(new paper.Point(-10,0))),o.tipibot.penDown(),o.tipibot.moveLinear(t.topRight),o.tipibot.moveLinear(t.topRight.add(new paper.Point(0,10))),o.tipibot.penUp(),o.tipibot.moveDirect(t.bottomRight.add(new paper.Point(0,-10))),o.tipibot.penDown(),o.tipibot.moveLinear(t.bottomRight),o.tipibot.moveLinear(t.bottomRight.add(new paper.Point(-10,0))),o.tipibot.penUp(),o.tipibot.moveDirect(t.bottomLeft.add(new paper.Point(10,0))),o.tipibot.penDown(),o.tipibot.moveLinear(t.bottomLeft),o.tipibot.moveLinear(t.bottomLeft.add(new paper.Point(0,-10)))):(o.tipibot.moveDirect(t.topLeft),o.tipibot.penDown(),o.tipibot.moveLinear(t.topRight),o.tipibot.moveLinear(t.bottomRight),o.tipibot.moveLinear(t.bottomLeft),o.tipibot.moveLinear(t.topLeft)),o.tipibot.penUp(),o.tipibot.moveDirect(e)}calibrateY(){let t=o.tipibot.getPosition();for(let e=-this.amount;e<=this.amount;e+=this.amount)o.tipibot.setPosition(new paper.Point(t.x,t.y+e),!0,!1),this.drawRectangle();o.tipibot.setPosition(t,!1,!1)}calibrateWidth(){let t=o.tipibot.getPosition(),e=n.Settings.tipibot.width,i=n.Settings.tipibot.height;for(let i=-this.amount;i<=this.amount;i+=this.amount)n.Settings.tipibot.width=e+i,o.tipibot.setPosition(new paper.Point(t.x+i/2,t.y),!1,!1),this.drawRectangle();n.Settings.tipibot.width=e,n.Settings.tipibot.height=i,o.tipibot.setPosition(t,!1,!1),o.tipibot.sendSpecs()}}e.Calibration=s},412:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CommandDisplay=void 0;const n=i(229),o=i(107),s=i(758),r=i(271),a=i(883),l=i(670);e.CommandDisplay=class{constructor(){this.advancedLayout=!1,document.addEventListener("QueueCommand",(t=>this.queueCommand(t.detail)),!1),document.addEventListener("QueueCommands",(t=>this.queueCommands(t.detail)),!1),document.addEventListener("SendCommand",(t=>this.sendCommand(t.detail)),!1),document.addEventListener("CommandExecuted",(t=>this.commandExecuted(t.detail)),!1),document.addEventListener("ClearQueue",(t=>this.clearQueue()),!1),document.addEventListener("CancelCommand",(t=>this.commandExecuted(t.detail)),!1)}addIcon(t,e){$("#other-controls button."+e+" svg").insertBefore(t.getDomElement())}initializeMoveControls(){$("#move-speed button").click((t=>{$("#move-speed button").removeClass("selected"),$(t.target).addClass("selected")})),$("#move-controls button.up-arrow").mousedown((()=>{let t=parseFloat($("#move-speed button.selected").attr("data-value"));l.tipibot.moveDirect(l.tipibot.getPosition().add(new paper.Point(0,-t)))})),$("#move-controls button.down-arrow").mousedown((()=>{let t=parseFloat($("#move-speed button.selected").attr("data-value"));l.tipibot.moveDirect(l.tipibot.getPosition().add(new paper.Point(0,t)))})),$("#move-controls button.left-arrow").mousedown((()=>{let t=parseFloat($("#move-speed button.selected").attr("data-value"));l.tipibot.moveDirect(l.tipibot.getPosition().add(new paper.Point(-t,0)))})),$("#move-controls button.right-arrow").mousedown((()=>{let t=parseFloat($("#move-speed button.selected").attr("data-value"));l.tipibot.moveDirect(l.tipibot.getPosition().add(new paper.Point(t,0)))})),$("#move-controls button.home").mousedown((()=>{l.tipibot.goHome((()=>console.log("I am home :-)")))}))}createGUI(t){this.console=t;let e=t.gui;this.initializeMoveControls(),this.gui=e.addFolder("Commands"),$("#controls").insertAfter($(this.gui.getDomElement()).find("li.title")),this.gui.open(),$("#fullscreen").click((()=>{let t=n.settingsManager.gui.getFolder("Settings").getController("fullscreen");t.setValue(!t.getValue())})),l.tipibot.gui=this.gui;let i={moveX:n.Settings.tipibot.homeX,moveY:n.Settings.tipibot.homeY};this.gui.add(i,"moveX",0,n.Settings.tipibot.width).name("Move X").onFinishChange((t=>l.tipibot.move(r.MoveType.Direct,new paper.Point(t,l.tipibot.getPosition().y)))),this.gui.add(i,"moveY",0,n.Settings.tipibot.height).name("Move Y").onFinishChange((t=>l.tipibot.move(r.MoveType.Direct,new paper.Point(l.tipibot.getPosition().x,t)))),this.connectButton=this.gui.addButton(o.communication&&o.communication.serialPortConnectionOpened?"Disconnect":"Connect",(()=>o.communication.serialPortConnectionOpened?o.communication.disconnectSerialPort():o.communication.tryConnectSerialPort())),document.addEventListener("Connect",(()=>this.connectButton.setName("Disconnect"))),document.addEventListener("Disconnect",(()=>this.connectButton.setName("Connect"))),this.addIcon(this.connectButton,"connect"),this.goHomeButton=this.gui.addButton("Go home",(()=>l.tipibot.goHome((()=>console.log("I am home :-)"))))),this.setHomeButton=this.gui.addButton("Set home",(()=>l.tipibot.setHome())),this.addIcon(this.setHomeButton,"set-home"),l.tipibot.penStateButton=this.gui.addButton("Pen down",(()=>l.tipibot.togglePenState())),this.addIcon(l.tipibot.penStateButton,"pen"),l.tipibot.motorsEnableButton=this.gui.addButton("Disable motors",(()=>l.tipibot.toggleMotors())),this.addIcon(l.tipibot.motorsEnableButton,"toggle-motors"),this.initializeButton=this.gui.addButton("Initialize",(()=>o.communication.interpreter.initialize(!1))),this.loadSVGButton=this.gui.addButton("Load SVG",(()=>a.SVGPlot.gui.getController("Load SVG").click())),this.clearSVGButton=this.gui.addButton("Clear SVG",a.SVGPlot.clearClicked),this.clearSVGButton.hide(),this.addIcon(this.loadSVGButton,"load-svg"),this.addIcon(this.clearSVGButton,"clear"),document.addEventListener("Load SVG",(()=>{this.loadSVGButton.hide(),this.clearSVGButton.show()})),document.addEventListener("Clear SVG",(()=>{this.loadSVGButton.show(),this.clearSVGButton.hide()})),this.drawSVGButton=this.gui.addButton("Draw",(()=>a.SVGPlot.gui.getController("Draw").click())),document.addEventListener("Draw",(()=>this.drawSVGButton.setName("Stop, clear commands & go home"))),document.addEventListener("Stop drawing",(()=>this.drawSVGButton.setName("Draw"))),this.addIcon(this.drawSVGButton,"draw"),this.pauseButton=this.gui.add({Pause:!1},"Pause").onChange((t=>o.communication.interpreter.setPause(t))),this.addIcon(this.pauseButton,"pause"),this.emergencyStopButton=this.gui.addButton("Emergency stop",(()=>{this.pauseButton.setValue(!0),o.communication.interpreter.sendStop(!0)})),this.saveCommandsButton=this.gui.addButton("Save commands",(()=>this.saveCommands())),this.clearCommandsButton=this.gui.addButton("Clear commands",(()=>o.communication.interpreter.clearQueue()));let s=this.gui.add(this,"advancedLayout").name("Advanced settings").onFinishChange((t=>this.toggleAdvancedSettings(t)));this.addIcon(s,"advanced-settings"),this.commandList=this.gui.addFolder("Command list"),this.listJ=$('<ul id="command-list" class="c-list">'),this.listJ.insertAfter($(this.commandList.gui.domElement).find("li")),this.goHomeButton.hide(),this.initializeButton.hide(),this.emergencyStopButton.hide(),this.saveCommandsButton.hide(),this.clearCommandsButton.hide()}toggleAdvancedSettings(t){t?(this.goHomeButton.show(),this.initializeButton.show(),this.saveCommandsButton.show(),this.clearCommandsButton.show(),this.emergencyStopButton.show(),$("body").addClass("advancedLayout"),$("#gui").show()):(this.goHomeButton.hide(),this.initializeButton.hide(),this.saveCommandsButton.hide(),this.clearCommandsButton.hide(),this.emergencyStopButton.hide(),$("body").removeClass("advancedLayout"),$("#gui").hide()),window.dispatchEvent(new Event("resize"))}saveCommands(){let t=o.communication.interpreter.getGCode(),e=new Blob([t],{type:"text/plain;charset=utf-8"});saveAs(e,"gcode.txt")}click(t){if("BUTTON"==t.target.tagName){let e=parseInt(t.target.parentNode.id);o.communication.interpreter.removeCommand(e),this.removeCommand(e)}}createCommandItem(t){let e=$('<li id="'+t.id+'"">'),i=$("<div>").append(t.message).addClass("message"),n=$("<div>").append(t.data).addClass("data");e.append(i),e.append(n);let s=$("<button>x</button>");return s.click((e=>{o.communication.interpreter.removeCommand(t.id),this.removeCommand(t.id)})),e.append(s),e}queueCommands(t){let e=(""+Math.random()).replace(".",""),i=$('<li id="'+e+'" class="commands">'),n=t.length,s=$("<div>").text(n+"/"+n+" commands").addClass("message").attr("data-n-commands",n).attr("data-total-commands",n);i.append(s);let r=$("<button>x</button>");r.click((i=>{for(let e of t)o.communication.interpreter.removeCommand(e);this.removeCommand(e)})),i.append(r),this.listJ.append(i)}removeCommand(t){let e=this.listJ.find("#"+t);0!=e.length&&(e.remove(),this.updateName(),document.dispatchEvent(new CustomEvent("CommandListChanged")))}updateName(){$("#commands h3").text("Command list ("+this.listJ.children().length+")")}queueCommand(t){this.listJ.append(this.createCommandItem(t)),this.updateName(),document.dispatchEvent(new CustomEvent("CommandListChanged"))}sendCommand(t){t.special!=s.SpecialCommandTypes.ChangePen?this.listJ.find("#"+t.id).addClass("sent"):this.pauseButton.setValue(!0)}commandExecuted(t){let e=this.listJ.children().first();if(e.hasClass("commands")){let t=e.find(".message"),i=parseInt(t.attr("data-n-commands"))-1;t.attr("data-n-commands",i);let n=t.attr("data-total-commands");return t.text(i+"/"+n+" commands"),void(0==i&&this.removeCommand(e.attr("id")))}this.removeCommand(t.id)}clearQueue(){this.listJ.children().remove(),this.updateName(),document.dispatchEvent(new CustomEvent("CommandListChanged"))}}},107:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.communication=e.Communication=e.SERIAL_COMMUNICATION_SPEED=void 0;const n=i(229),o=i(758),s=i(24),r=i(388),a=i(108),l=i(705),d=i(595);e.SERIAL_COMMUNICATION_SPEED=o.SERIAL_COMMUNICATION_SPEED;let h=window.localStorage.getItem("port")||6842;e.Communication=class{constructor(t){this.autoConnectIntervalID=null,this.serialPortConnectionOpened=!1,e.communication=this,this.socket=null,this.createGUI(t),this.portController=null,this.initializeInterpreter(n.Settings.firmware),this.connectToSerial()}createGUI(t){this.gui=t.addFolder("Communication"),this.folderTitle=$(this.gui.getDomElement()).find(".title"),this.folderTitle.append($("<icon>").addClass("serial").append(String.fromCharCode(9679))),this.folderTitle.append($("<icon>").addClass("websocket").append(String.fromCharCode(9679)))}setTipibot(t){this.interpreter.setTipibot(t)}startAutoConnection(){this.autoConnectIntervalID=setInterval((()=>this.tryConnectSerialPort()),1e3)}stopAutoConnection(){clearInterval(this.autoConnectIntervalID),this.autoConnectIntervalID=null}setPortName(t){this.portController.object[this.portController.property]=t.path,this.portController.updateDisplay()}onSerialPortConnectionOpened(t=null){null!=t&&this.setPortName(t),this.serialPortConnectionOpened=!0,this.stopAutoConnection(),this.interpreter.serialPortConnectionOpened(),this.folderTitle.find(".serial").addClass("connected")}onSerialPortConnectionClosed(){this.serialPortConnectionOpened=!1,n.Settings.autoConnect&&this.startAutoConnection(),this.folderTitle.find(".serial").removeClass("connected")}initializePortController(t){this.portController=this.portController.options(t),$(this.portController.domElement.parentElement.parentElement).mousedown((t=>{this.autoConnectController.setValue(!1)})),this.portController.onFinishChange((t=>this.serialConnectionPortChanged(t)))}initializeInterpreter(t){let e=this.interpreter?this.interpreter.tipibot:null;this.serialPortConnectionOpened&&this.disconnectSerialPort(),"Tipibot"==t?this.interpreter=new a.TipibotInterpreter(this):"Polargraph"==t?this.interpreter=new s.Polargraph(this):"PenPlotter"==t?this.interpreter=new r.PenPlotter(this):"FredBot"==t?this.interpreter=new l.FredBot(this):"Makelangelo"==t&&(this.interpreter=new d.Makelangelo(this)),this.interpreter.setTipibot(e),console.log("initialize "+t)}onMessage(t){let e=JSON.parse(t.data),i=e.type,o=e.data;if(document.dispatchEvent(new CustomEvent("ServerMessage",{detail:e})),"opened"==i)this.onSerialPortConnectionOpened();else if("closed"==i)this.onSerialPortConnectionClosed();else if("list"==i){let t=["Disconnected"];for(let e of o)t.push(e.path);if(this.initializePortController(t),n.Settings.autoConnect)for(let t of o)if(null!=t.manufacturer&&t.manufacturer.indexOf("Arduino")>=0){this.portController.setValue(t.path);break}}else"connected"==i?this.setPortName(o):"not-connected"==i?(this.folderTitle.find(".serial").removeClass("connected").removeClass("simulator"),n.Settings.autoConnect&&this.startAutoConnection()):"connected-to-simulator"==i?this.folderTitle.find(".serial").removeClass("connected").addClass("simulator"):"data"==i?this.interpreter.messageReceived(e):"sent"==i?this.interpreter.messageSent(e):"info"==i?console.info(o):"warning"==i?console.warn(o):"already-opened"==i?this.onSerialPortConnectionOpened(o):"error"==i&&console.error(o)}connectToSerial(){this.gui.add(n.Settings,"firmware",["Tipibot","Polargraph","PenPlotter","Makelangelo","FredBot"]).name("Firmware").onFinishChange((t=>{n.settingsManager.save(!1),this.initializeInterpreter(t)})),this.autoConnectController=this.gui.add(n.Settings,"autoConnect").name("Auto connect").onFinishChange((t=>{n.settingsManager.save(!1),t?this.startAutoConnection():this.stopAutoConnection()})),this.portController=this.gui.add({Connection:"Disconnected"},"Connection"),this.gui.addButton("Disconnect",(()=>this.disconnectSerialPort())),this.gui.addButton("Refresh",(()=>{this.send("list")})),this.initializePortController(["Disconnected"]),this.socket=new WebSocket("ws://localhost:"+h),this.socket.addEventListener("message",(t=>this.onMessage(t))),this.socket.addEventListener("open",(t=>this.onWebSocketOpen(t))),this.socket.addEventListener("close",(t=>this.onWebSocketClose(t))),this.socket.addEventListener("error",(t=>this.onWebSocketError(t)))}onWebSocketOpen(t){this.folderTitle.find(".websocket").addClass("connected"),this.send("is-connected")}onWebSocketClose(t){this.folderTitle.find(".websocket").removeClass("connected"),console.error("WebSocket disconnected")}onWebSocketError(t){console.error("WebSocket error")}disconnectSerialPort(){this.interpreter.clearQueue(),this.interpreter.sendStop(!0),this.autoConnectController.setValue(!1),this.onSerialPortConnectionClosed(),this.send("close"),document.dispatchEvent(new CustomEvent("Disconnect")),this.portController.setValue("Disconnected")}serialConnectionPortChanged(t){"Disconnected"==t&&this.serialPortConnectionOpened?this.disconnectSerialPort():"Disconnected"!=t&&(this.interpreter.setSerialPort(t),document.dispatchEvent(new CustomEvent("Connect",{detail:t})),console.log("open: "+t+", at: "+this.interpreter.serialCommunicationSpeed),this.send("open",{name:t,baudRate:this.interpreter.serialCommunicationSpeed}))}tryConnectSerialPort(){n.Settings.autoConnect&&!this.serialPortConnectionOpened&&this.send("list")}send(t,e=null){let i={type:t,data:e};this.socket.send(JSON.stringify(i))}},e.communication=null},705:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FredBot=void 0;const n=i(388);class o extends n.PenPlotter{constructor(t){super(t),this.continueMessage="ok",this.initializationMessage="Initialize",this.serialCommunicationSpeed=25e4}serialPortConnectionOpened(){}convertServoValue(t){return.2+2*t/180}sendPenState(t,e=0,i=0,n=null){let o="Move servo: "+(t=this.convertServoValue(t));e>0&&this.sendPause(e),this.queue("G1 Z"+t+"\n",o),i>0&&this.sendPause(i,n)}}e.FredBot=o},758:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Interpreter=e.SERIAL_COMMUNICATION_SPEED=e.SpecialCommandTypes=void 0;const n=i(229);var o;!function(t){t[t.Idle=0]="Idle",t[t.ChangePen=1]="ChangePen"}(o=e.SpecialCommandTypes||(e.SpecialCommandTypes={})),e.SERIAL_COMMUNICATION_SPEED=115200,e.Interpreter=class{constructor(t){this.commandID=0,this.continueMessage="READY",this.serialCommunicationSpeed=e.SERIAL_COMMUNICATION_SPEED,this.name="interpreter",this.justQueueCommands=!1,this.lastCommandSendTime=null,this.logNextMessage=!0,this.commandQueue=[],this.pause=!1,this.serialInput="",this.tempoNextCommand=!1,this.communication=t}setSerialPort(t){this.serialPort=t}setTipibot(t){this.tipibot=t}serialPortConnectionOpened(){this.initialize()}initialize(t=!0){this.sendPenWidth(n.Settings.tipibot.penWidth),this.sendSpecs(),this.sendInvertXY(),this.sendSetPosition(t?new paper.Point(n.Settings.tipibot.homeX,n.Settings.tipibot.homeY-n.Settings.tipibot.penOffset):this.tipibot.getGondolaPosition()),this.sendMaxSpeedAndAcceleration(),this.sendServoSpeed(),this.sendFeedback(),this.tipibot.initializedCommunication=!0}getGCode(){let t="";for(let e of this.commandQueue)t+=e.data;return t}send(t){if(!this.pause){if(document.dispatchEvent(new CustomEvent("SendCommand",{detail:t})),t.special==o.ChangePen)return this.pause=!0,console.log("send: "+t.message+" - "+t.data),void console.info(t.message+" and then resume (uncheck pause)");console.log("send: "+t.message+" - "+t.data),this.lastCommandSendTime=null,this.logNextMessage=!0,this.communication.send("data",t.data)}}isolateContinueMessage(){if(this.serialInput.indexOf(this.continueMessage)>0){var t=new RegExp(this.continueMessage,"g");this.serialInput=this.serialInput.replace(t,"\n"+this.continueMessage)}}messageSent(t){this.lastCommandSendTime=t.time}messageReceived(t){let e=t.data;if(t.time,null==t||null==e)return;this.serialInput+=e,this.isolateContinueMessage();let i=this.serialInput.split("\n");this.serialInput=this.serialInput.endsWith("\n")?"":i[i.length-1];for(let e=0;e<i.length-1;e++)this.processMessage(i[e],t.time)}processMessage(t,e){if(""==t)return;document.dispatchEvent(new CustomEvent("MessageReceived",{detail:t}));let i=0==t.indexOf(this.continueMessage);if(i&&!this.logNextMessage||(console.log(t),this.logNextMessage=!1),i&&null!=this.lastCommandSendTime&&e>this.lastCommandSendTime&&this.commandQueue.length>0){let t=this.commandQueue.shift();null!=t.callback&&t.callback(),document.dispatchEvent(new CustomEvent("CommandExecuted",{detail:t})),this.startQueue()}}setPause(t){this.pause=t,this.pause||this.startQueue()}queue(t,e,i=null,n=null){let o={id:this.commandID++,data:t,callback:i,message:e,special:n};this.justQueueCommands?this.commandQueue.push(o):(document.dispatchEvent(new CustomEvent("QueueCommand",{detail:o})),this.commandQueue.push(o),1==this.commandQueue.length&&this.send(o))}startQueue(){this.commandQueue.length>0&&this.send(this.commandQueue[0])}removeCommand(t){let e=this.commandQueue.findIndex((e=>e.id==t));e>=0&&this.commandQueue.splice(e,1)}clearQueue(){this.commandQueue=[],document.dispatchEvent(new CustomEvent("ClearQueue",{detail:null}))}executeOnceFinished(t){0==this.commandQueue.length&&t();let e=this.commandQueue[this.commandQueue.length-1],i=e.callback;e.callback=()=>{i(),t()}}sendSetHome(t=this.tipibot.getPosition()){}sendSetPosition(t=this.tipibot.getPosition()){}sendMoveDirect(t,e=null){}sendMoveLinear(t,e=0,i=n.Settings.tipibot.maxSpeed,o=null){}sendDrawSpeed(t=n.Settings.tipibot.drawSpeed,e=n.Settings.tipibot.acceleration){}sendMaxSpeed(t=n.Settings.tipibot.maxSpeed,e=n.Settings.tipibot.acceleration){}sendAcceleration(t=n.Settings.tipibot.acceleration){}sendMaxSpeedAndAcceleration(t=n.Settings.tipibot.maxSpeed,e=n.Settings.tipibot.acceleration){}sendSize(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height){}sendStepsPerRev(t=n.Settings.tipibot.stepsPerRev){}sendMmPerRev(t=n.Settings.tipibot.mmPerRev){}sendStepMultiplier(t=n.Settings.tipibot.microstepResolution){}sendPenWidth(t=n.Settings.tipibot.penWidth){}sendChangePen(t,e){this.queue("Change pen "+e+"\n","Change pen to "+t+", index "+e,null,o.ChangePen)}sendServoSpeed(t=n.Settings.servo.speed){}sendSpecs(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height,i=n.Settings.tipibot.stepsPerRev,o=n.Settings.tipibot.mmPerRev,s=n.Settings.tipibot.microstepResolution){}sendInvertXY(t=n.Settings.tipibot.invertMotorLeft,e=n.Settings.tipibot.invertMotorRight){}sendProgressiveMicrosteps(t=n.Settings.tipibot.progressiveMicrosteps){}sendPause(t){}sendMotorOff(){}sendMotorOn(){}sendPenState(t,e=0){}sendPenUp(t=n.SettingsManager.servoUpAngle(),e=n.Settings.servo.delay.up.before,i=n.Settings.servo.delay.up.after,o=null){}sendPenDown(t=n.SettingsManager.servoDownAngle(),e=n.Settings.servo.delay.down.before,i=n.Settings.servo.delay.down.after,o=null){}sendStop(t=!0){}sendPenLiftRange(t=n.SettingsManager.servoDownAngle(),e=n.SettingsManager.servoUpAngle()){}sendPenDelays(t=n.Settings.servo.delay.down.before,e=n.Settings.servo.delay.up.before){}sendFeedback(t=n.Settings.feedback.enable,e=n.Settings.feedback.rate){}}},595:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Makelangelo=void 0;const n=i(229),o=i(758);class s extends o.Interpreter{constructor(t){super(t),this.name="makelangelo",this.lastCommandWasMove=!1,this.continueMessage="> "}initialize(t=!0){this.sendSpecs(),this.sendSetPosition(t?new paper.Point(n.Settings.tipibot.homeX,n.Settings.tipibot.homeY-n.Settings.tipibot.penOffset):this.tipibot.getGondolaPosition()),this.sendMaxSpeed(),this.tipibot.initializedCommunication=!0}convertToMakelangeloCoordinates(t){let e=new paper.Size(n.Settings.tipibot.width,n.Settings.tipibot.height),i=t.subtract(e.multiply(.5));return i.y*=-1,i}sendSetHome(t=this.tipibot.getHome()){super.sendSetHome(t),this.lastCommandWasMove=!1;let e="Set home: "+(t=this.convertToMakelangeloCoordinates(t)).x.toFixed(2)+", "+t.y.toFixed(2);this.queue("D6 X"+t.x.toFixed(2)+" Y"+t.y.toFixed(2)+"\n",e)}sendSetPosition(t=this.tipibot.getPosition()){super.sendSetPosition(t),this.lastCommandWasMove=!1;let e="Set position: "+(t=this.convertToMakelangeloCoordinates(t)).x.toFixed(2)+", "+t.y.toFixed(2);this.queue("G92 X"+t.x.toFixed(2)+" Y"+t.y.toFixed(2)+"\n",e)}sendMoveDirect(t,e=null){super.sendMoveDirect(t,e),t=this.convertToMakelangeloCoordinates(t);let i=n.Settings.tipibot.maxSpeed*n.SettingsManager.mmPerSteps(),o="Move linear: "+t.x.toFixed(2)+", "+t.y.toFixed(2)+", speed: "+i.toFixed(2),s=this.lastCommandWasMove?"":" F"+i.toFixed(2);this.lastCommandWasMove=!0,this.queue("G1"+s+" X"+t.x.toFixed(2)+" Y"+t.y.toFixed(2)+"\n",o,e)}sendMoveLinear(t,e=0,i=n.Settings.tipibot.maxSpeed,o=null){super.sendMoveLinear(t,e,i,o),t=this.convertToMakelangeloCoordinates(t);let s=i*n.SettingsManager.mmPerSteps(),r="Move linear: "+t.x.toFixed(2)+", "+t.y.toFixed(2)+", speed: "+s.toFixed(2),a=this.lastCommandWasMove?"":" F"+s.toFixed(2);this.lastCommandWasMove=!0,this.queue("G0"+a+" X"+t.x.toFixed(2)+" Y"+t.y.toFixed(2)+"\n",r,o)}sendMaxSpeed(t=n.Settings.tipibot.maxSpeed){this.sendMaxSpeedAndAcceleration(t,n.Settings.tipibot.acceleration)}sendAcceleration(t=n.Settings.tipibot.acceleration){this.sendMaxSpeedAndAcceleration(n.Settings.tipibot.maxSpeed,t)}sendMaxSpeedAndAcceleration(t=n.Settings.tipibot.maxSpeed,e=n.Settings.tipibot.acceleration){this.lastCommandWasMove=!1;let i=t*n.SettingsManager.mmPerSteps(),o="Set speed: "+i.toFixed(2)+", set acceleration: "+e.toFixed(2),s="G0 F"+i.toFixed(2)+" A"+e.toFixed(2)+"\n";this.queue(s,o)}sendInvertXY(t=n.Settings.tipibot.invertMotorLeft,e=n.Settings.tipibot.invertMotorRight){console.log("error: command not implemented")}sendProgressiveMicrosteps(t=n.Settings.tipibot.progressiveMicrosteps){console.log("error: command not implemented")}sendSize(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height){this.lastCommandWasMove=!1;let i="Send size: "+t.toFixed(2);this.queue("M4 X"+t.toFixed(2)+"\n",i)}sendStepsPerRev(t=n.Settings.tipibot.stepsPerRev){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,t,n.Settings.tipibot.mmPerRev,n.Settings.tipibot.microstepResolution)}sendMmPerRev(t=n.Settings.tipibot.mmPerRev){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,n.Settings.tipibot.stepsPerRev,t,n.Settings.tipibot.microstepResolution)}sendStepMultiplier(t=n.Settings.tipibot.microstepResolution){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,n.Settings.tipibot.stepsPerRev,n.Settings.tipibot.mmPerRev,t)}sendSpecs(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height,i=n.Settings.tipibot.stepsPerRev,o=n.Settings.tipibot.mmPerRev,s=n.Settings.tipibot.microstepResolution){this.lastCommandWasMove=!1;let r=t/2,a=-t/2,l=e/2,d=-e/2,h="Set limit right: "+r.toFixed(2)+", limit left: "+a.toFixed(2),u="M101 A0 T"+r.toFixed(2)+" B"+a.toFixed(2)+"\n";this.queue(u,h),h="Set limit top: "+l.toFixed(2)+", limit bottom: "+d.toFixed(2);let p="M101 A1 T"+l.toFixed(2)+" B"+d.toFixed(2)+"\n";this.queue(p,h),h="Set limit servo: ",this.queue("M101 A2 T170 B10\n",h),this.sendSetHome(),this.sendMaxSpeedAndAcceleration()}sendPause(t,e=null){this.lastCommandWasMove=!1;let i="Wait: "+t,n=Math.floor(t),o=1e3*(n-t);this.queue("G4 S"+o+" P"+n+"\n",i,e)}sendMotorOn(){this.queue("M17\n","Enable motors")}sendMotorOff(){this.queue("M18\n","Disable motors")}sendPenState(t,e=0,i=0,o=null){this.lastCommandWasMove=!1;let s=n.Settings.servo.speed,r="Move pen"+(t==n.Settings.servo.position.up?" up":t==n.Settings.servo.position.down?" down":"")+": "+t+" servo speed: "+s;e>0&&this.sendPause(e),this.queue("G0 F"+s+" Z"+t+"\n",r,i<=0?o:void 0),i>0&&this.sendPause(i,o)}sendPenUp(t=n.SettingsManager.servoUpAngle(),e=n.Settings.servo.delay.up.before,i=n.Settings.servo.delay.up.after,o=null){this.sendPenState(t,e,i,o)}sendPenDown(t=n.SettingsManager.servoDownAngle(),e=n.Settings.servo.delay.down.before,i=n.Settings.servo.delay.down.after,o=null){this.sendPenState(t,e,i,o)}sendChangePen(t,e){let i="";switch(t){case"0xff0000":i="red";break;case"0x00ff00":i="green";break;case"0x0000ff":i="blue";break;case"0x000000":i="black";break;case"0x00ffff":i="cyan";break;case"0xff00ff":i="magenta";break;case"0xffff00":i="yellow";break;case"0xffffff":i="white";break;default:i=t}this.queue("M117\n","Clear message");let n="Pen "+i,o="Click to continue";this.queue("M06 T"+e+"\n","Change pen to "+parseInt(t)),this.queue("M117 "+n+" "+o+"\n",n+" "+o),this.queue("M300 S60 P250\n","Beep"),this.queue("M226\n","Pause for user input"),this.queue("M117\n","Clear message")}sendStop(t=!0){t?this.communication.send("data","M0\n"):(this.queue("M0\n","Stop"),console.log("error: command not implemented"))}}e.Makelangelo=s},388:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PenPlotter=void 0;const n=i(229),o=i(758);class s extends o.Interpreter{constructor(t){super(t),this.name="penplotter",this.continueMessage="ok"}initialize(t=!0){this.sendSpecs(),this.sendSetPosition(t?new paper.Point(n.Settings.tipibot.homeX,n.Settings.tipibot.homeY-n.Settings.tipibot.penOffset):this.tipibot.getGondolaPosition()),this.sendMaxSpeed(),this.tipibot.initializedCommunication=!0}sendSetPosition(t=this.tipibot.getPosition()){super.sendSetPosition(t);let e=this.tipibot.cartesianToLengths(t),i=(n.SettingsManager.mmToSteps(e),"Set position: "+t.x.toFixed(2)+", "+t.y.toFixed(2));this.queue("M1 Y"+t.y.toFixed(2)+"\n",i)}sendMoveDirect(t,e=null){super.sendMoveDirect(t,e);let i=this.tipibot.cartesianToLengths(t),o=(n.SettingsManager.mmToSteps(i),"Move direct: "+t.x.toFixed(2)+", "+t.y.toFixed(2));this.queue("G0 X"+t.x.toFixed(2)+" Y"+t.y.toFixed(2)+"\n",o,e)}sendMoveLinear(t,e=0,i=n.Settings.tipibot.maxSpeed,o=null){super.sendMoveLinear(t,e,i,o);let s=this.tipibot.cartesianToLengths(t),r=(n.SettingsManager.mmToSteps(s),"Move linear: "+t.x.toFixed(2)+", "+t.y.toFixed(2)+", min speed: "+e.toFixed(2));this.queue("G1 X"+t.x.toFixed(2)+" Y"+t.y.toFixed(2)+"\n",r,o)}sendMaxSpeed(t=n.Settings.tipibot.maxSpeed){let e="Set max speed: "+t.toFixed(2);this.queue("G0 F"+t.toFixed(2)+"\n",e)}sendAcceleration(t=n.Settings.tipibot.acceleration){console.log("set acceleration: "+t);let e="Set acceleration: "+t.toFixed(2);this.queue("G0 S"+t.toFixed(2)+"\n",e)}sendMaxSpeedAndAcceleration(t=n.Settings.tipibot.maxSpeed,e=n.Settings.tipibot.acceleration){console.log("set speed: "+t),console.log("set acceleration: "+e);let i="Set speed: "+e.toFixed(2)+", set acceleration: "+e.toFixed(2);this.queue("G0 F"+t.toFixed(2)+" S"+e.toFixed(2)+"\n",i)}sendInvertXY(t=n.Settings.tipibot.invertMotorLeft,e=n.Settings.tipibot.invertMotorRight){let i="Invert motors: left: "+t+", right: "+e;this.queue("M12 X"+(t?-1:1)+" Y"+(e?-1:1)+"\n",i)}sendProgressiveMicrosteps(t=n.Settings.tipibot.progressiveMicrosteps){let e="Set progressiveMicrosteps: "+t;this.queue("M13 F"+(t?-1:1)+"\n",e)}sendSize(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height){let i="Send size: "+t.toFixed(2);this.queue("M4 X"+t.toFixed(2)+"\n",i)}sendStepsPerRev(t=n.Settings.tipibot.stepsPerRev){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,t,n.Settings.tipibot.mmPerRev,n.Settings.tipibot.microstepResolution)}sendMmPerRev(t=n.Settings.tipibot.mmPerRev){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,n.Settings.tipibot.stepsPerRev,t,n.Settings.tipibot.microstepResolution)}sendStepMultiplier(t=n.Settings.tipibot.microstepResolution){this.sendSpecs(n.Settings.tipibot.width,n.Settings.tipibot.height,n.Settings.tipibot.stepsPerRev,n.Settings.tipibot.mmPerRev,t)}sendSpecs(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height,i=n.Settings.tipibot.stepsPerRev,o=n.Settings.tipibot.mmPerRev,s=n.Settings.tipibot.microstepResolution){let r="Setup: tipibotWidth: "+t+", stepsPerRevolution: "+i*s+", mmPerRev: "+o+", millimetersPerStep: "+o/(i*s);console.log(r),this.queue("M4 X"+t+" E0.5 S"+i*s+" P"+o+"\n",r)}sendPause(t,e=null){let i="Wait: "+t;this.queue("G4 P"+t+"\n",i,e)}sendMotorOff(){this.queue("M84\n","Disable motors")}convertServoValue(t){return 700+1600*t/180}sendPenState(t,e=0,i=0,o=null){let s="Move pen"+(t==n.Settings.servo.position.up?" up":t==n.Settings.servo.position.down?" down":"")+": "+t;t=this.convertServoValue(t),e>0&&this.sendPause(e),this.queue("M340 P3 S"+t+"\n",s,i<=0?o:void 0),i>0&&this.sendPause(i,o)}sendPenUp(t=n.SettingsManager.servoUpAngle(),e=n.Settings.servo.delay.up.before,i=n.Settings.servo.delay.up.after,o=null){this.sendPenState(t,e,i,o)}sendPenDown(t=n.SettingsManager.servoDownAngle(),e=n.Settings.servo.delay.down.before,i=n.Settings.servo.delay.down.after,o=null){this.sendPenState(t,e,i,o)}sendStop(t=!0){t?this.communication.send("data","M0\n"):this.queue("M0\n","Stop")}}e.PenPlotter=s},24:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Polargraph=void 0;const n=i(229),o=i(758),s={CMD_CHANGELENGTH:"C01,",CMD_CHANGEPENWIDTH:"C02,",CMD_CHANGEMOTORSPEED:"C03,",CMD_CHANGEMOTORACCEL:"C04,",CMD_DRAWPIXEL:"C05,",CMD_DRAWSCRIBBLEPIXEL:"C06,",CMD_DRAWRECT:"C07,",CMD_CHANGEDRAWINGDIRECTION:"C08,",CMD_SETPOSITION:"C09,",CMD_TESTPATTERN:"C10,",CMD_TESTPENWIDTHSQUARE:"C11,",CMD_TESTPENWIDTHSCRIBBLE:"C12,",CMD_PENDOWN:"C13,",CMD_PENUP:"C14,",CMD_DRAWSAWPIXEL:"C15,",CMD_DRAWROUNDPIXEL:"C16,",CMD_CHANGELENGTHDIRECT:"C17,",CMD_TXIMAGEBLOCK:"C18,",CMD_STARTROVE:"C19,",CMD_STOPROVE:"C20,",CMD_SET_ROVE_AREA:"C21,",CMD_LOADMAGEFILE:"C23,",CMD_CHANGEMACHINESIZE:"C24,",CMD_CHANGEMACHINENAME:"C25,",CMD_REQUESTMACHINESIZE:"C26,",CMD_RESETMACHINE:"C27,",CMD_DRAWDIRECTIONTEST:"C28,",CMD_CHANGEMACHINEMMPERREV:"C29,",CMD_CHANGEMACHINESTEPSPERREV:"C30,",CMD_SETMOTORSPEED:"C31,",CMD_SETMOTORACCEL:"C32,",CMD_MACHINE_MODE_STORE_COMMANDS:"C33,",CMD_MACHINE_MODE_EXEC_FROM_STORE:"C34,",CMD_MACHINE_MODE_LIVE:"C35,",CMD_RANDOM_DRAW:"C36,",CMD_SETMACHINESTEPMULTIPLIER:"C37,",CMD_START_TEXT:"C38,",CMD_DRAW_SPRITE:"C39,",CMD_CHANGELENGTH_RELATIVE:"C40,",CMD_SWIRLING:"C41,",CMD_DRAW_RANDOM_SPRITE:"C42,",CMD_DRAW_NORWEGIAN:"C43,",CMD_DRAW_NORWEGIAN_OUTLINE:"C44,",CMD_SETPENLIFTRANGE:"C45,",CMD_SELECT_ROVE_SOURCE_IMAGE:"C46",CMD_RENDER_ROVE:"C47",CMD_ACTIVATE_MACHINE_BUTTON:"C49",CMD_DEACTIVATE_MACHINE_BUTTON:"C50",CMD_DELAY:"C60,"};class r extends o.Interpreter{constructor(t){super(t),this.keepTipibotAwakeInterval=null,this.name="polargraph",this.serialCommunicationSpeed=57600}initialize(t=!0){super.initialize(t),this.sendPenDown(),this.sendPenUp()}send(t){t.data+=String.fromCharCode(10),super.send(t)}queue(t,e,i=null){t.substr(0,3);for(let t in s)s[t].substr(0,3);super.queue(t,e,i)}queueEmpty(){}getMaxSegmentLength(){return 2}sendMoveToNativePosition(t,e,i=null){e=this.tipibot.cartesianToLengths(e),e=n.SettingsManager.mmToSteps(e).divide(n.Settings.tipibot.microstepResolution);let o=null;o=t?s.CMD_CHANGELENGTHDIRECT+Math.round(e.x)+","+Math.round(e.y)+","+this.getMaxSegmentLength()+",END":s.CMD_CHANGELENGTH+Math.round(e.x)+","+Math.round(e.y)+",END",this.queue(o,"direct",i)}sendSetPosition(t=this.tipibot.getPosition()){t=this.tipibot.cartesianToLengths(t);let e=n.SettingsManager.mmToSteps(t).divide(n.Settings.tipibot.microstepResolution),i=s.CMD_SETPOSITION+Math.round(e.x)+","+Math.round(e.y)+",END",o="Set position: "+t.x.toFixed(2)+", "+t.y.toFixed(2);this.queue(i,o)}sendMoveDirect(t,e=null){this.sendMoveToNativePosition(!0,t,e)}sendMoveLinear(t,e=0,i=n.Settings.tipibot.maxSpeed,o=null){this.sendMoveToNativePosition(!0,t,o)}sendMaxSpeed(t=n.Settings.tipibot.maxSpeed,e=n.Settings.tipibot.acceleration){let i="Set max speed: "+t.toFixed(2);this.queue(s.CMD_SETMOTORSPEED+t.toFixed(2)+",1,END",i),i="Set acceleration: "+e.toFixed(2),this.queue(s.CMD_SETMOTORACCEL+e.toFixed(2)+",1,END",i)}sendSize(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height){let i="Set size: "+t.toFixed(2)+","+e.toFixed(2);this.queue(s.CMD_CHANGEMACHINESIZE+t+","+e+",END",i)}sendStepsPerRev(t=n.Settings.tipibot.stepsPerRev){let e="Set steps per rev: "+t;this.queue(s.CMD_CHANGEMACHINESTEPSPERREV+t+",END",e)}sendMmPerRev(t=n.Settings.tipibot.mmPerRev){let e="Set mm per rev: "+t;this.queue(s.CMD_CHANGEMACHINEMMPERREV+t+",END",e)}sendStepMultiplier(t=n.Settings.tipibot.microstepResolution){let e="Set microstepResolution: "+t;this.queue(s.CMD_SETMACHINESTEPMULTIPLIER+t+",END",e)}sendSpecs(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height,i=n.Settings.tipibot.stepsPerRev,o=n.Settings.tipibot.mmPerRev,s=n.Settings.tipibot.microstepResolution){this.sendSize(t,e),this.sendMmPerRev(o),this.sendStepsPerRev(i),this.sendStepMultiplier(s)}sendPause(t,e=null){let i="Wait: "+t;this.queue(s.CMD_DELAY+t+",END",i,e)}sendMotorOff(){}sendPenLiftRange(t=n.SettingsManager.servoDownAngle(),e=n.SettingsManager.servoUpAngle()){let i="Set pen lift range: "+t.toFixed(2)+","+e.toFixed(2);this.queue(s.CMD_SETPENLIFTRANGE+t.toFixed(2)+","+e.toFixed(2)+",1,END",i)}sendPenDelays(t=n.Settings.servo.delay.down.before,e=n.Settings.servo.delay.up.before){}sendPenUp(t=n.SettingsManager.servoUpAngle(),e=n.Settings.servo.delay.up.before,i=n.Settings.servo.delay.up.after,o=null){e>0&&this.sendPause(e);let r="Set pen up: "+n.SettingsManager.servoUpAngle().toFixed(2);this.queue(s.CMD_PENUP+n.SettingsManager.servoUpAngle().toFixed(2)+",END",r),i>0&&this.sendPause(i,o)}sendPenDown(t=n.SettingsManager.servoDownAngle(),e=n.Settings.servo.delay.down.before,i=n.Settings.servo.delay.down.after,o=null){e>0&&this.sendPause(e);let r="Set pen down: "+n.SettingsManager.servoDownAngle().toFixed(2);this.queue(s.CMD_PENDOWN+n.SettingsManager.servoDownAngle().toFixed(2)+",END",r),i>0&&this.sendPause(i,o)}sendStop(){}sendPenWidth(t){let e="Set pen width: "+t.toFixed(2);this.queue(s.CMD_CHANGEPENWIDTH+t.toFixed(2)+",END",e)}}e.Polargraph=r},108:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TipibotInterpreter=void 0;const n=i(229),o=i(388);class s extends o.PenPlotter{constructor(){super(...arguments),this.initializationMessage="Initialize",this.name="tipibot",this.continueMessage="READY"}serialPortConnectionOpened(){}sendSpecs(t=n.Settings.tipibot.width,e=n.Settings.tipibot.height,i=n.Settings.tipibot.stepsPerRev,o=n.Settings.tipibot.mmPerRev,s=n.Settings.tipibot.microstepResolution){let r="Setup: tipibotWidth: "+t+", stepsPerRevolution: "+i+", microstepResolution: "+s+", mmPerRev: "+o+", millimetersPerStep: "+o/(i*s);this.queue("M4 X"+t+" S"+i+" F"+s+" P"+o+"\n",r)}sendSetPosition(t=this.tipibot.getPosition()){super.sendSetPosition(t);let e="Set position: "+t.x.toFixed(2)+", "+t.y.toFixed(2);this.queue("G92 X"+t.x.toFixed(2)+" Y"+t.y.toFixed(2)+"\n",e)}sendServoSpeed(t=n.Settings.servo.speed){let e="Set servo speed: "+t;this.queue("M14 F"+t+"\n",e)}sendFeedback(t=n.Settings.feedback.enable,e=n.Settings.feedback.rate){t||(e=0);let i="Set feedback: "+t+", rate: "+e.toFixed(2);this.queue("M15 F"+e.toFixed(2)+"\n",i)}convertServoValue(t){return Math.round(t)}sendMotorOn(){this.queue("M85\n","Enable motors")}processMessage(t,e){super.processMessage(t,e),0==t.indexOf(this.initializationMessage)&&this.initialize()}}e.TipibotInterpreter=s},518:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Console=void 0;const n=i(776);e.Console=class{constructor(){this.MAX_NUM_MESSAGES=1e3,this.scrollingToBottom=!1,this.skipScrollToBottom=!1,document.addEventListener("CommandListChanged",(t=>this.scrollToBottom()),!1),this.log=console.log.bind(console),this.error=console.error.bind(console),this.info=console.info.bind(console),this.warn=console.warn.bind(console),this.table=console.table.bind(console);let t=(t,e,i)=>{"function"==typeof e&&e.apply(console,t);let n=$("<li>");if("table"==i){let e=this.logTable.apply(this,t);n.append(e)}else for(let e of t){let t=null;if("object"==typeof e)t=$("<p>").append(e).addClass(i);else if(e instanceof Array){let n=JSON.stringify(e);n.length>100&&(n=n.substr(0,20)+"..."+n.substr(n.length-20)),t=$("<p>").append(n).addClass(i)}else t=$("<p>").append(e).addClass(i);n.append(t)}let o=this.listJ;o.children().length>=this.MAX_NUM_MESSAGES&&o.find("li:first-child").remove(),o.append(n),this.scrollToBottom(o)};console.log=(...e)=>t(e,this.log,"log"),console.error=(...e)=>t(e,this.error,"error"),console.info=(...e)=>t(e,this.info,"info"),console.warn=(...e)=>t(e,this.warn,"warn"),console.table=(...e)=>t(e,this.table,"table"),this.gui=new n.GUI({autoPlace:!1}),document.getElementById("info").appendChild(this.gui.getDomElement())}createGUI(){this.folder=this.gui.addFolder("Console"),this.folder.open(),this.listJ=$('<ul id="console-list" class="c-list">'),this.listJ.insertAfter($(this.folder.gui.domElement).find("li")),this.listJ.scroll((t=>{if(!this.scrollingToBottom){let t=this.listJ.get(0);this.skipScrollToBottom=t.scrollTop+t.clientHeight<t.scrollHeight}this.scrollingToBottom=!1})),this.updateMaxHeight(),window.addEventListener("resize",(()=>this.updateMaxHeight()),!1),$("#info").click((()=>this.updateMaxHeight()))}updateMaxHeight(){this.listJ.css("max-height",$("#info").outerHeight()-this.listJ.offset().top)}scrollToBottom(t=this.listJ){this.updateMaxHeight(),this.skipScrollToBottom||(this.scrollingToBottom=!0,t.scrollTop(t.get(0).scrollHeight))}printTable(t,e){var i=e.length,n=t.length,o=document.createElement("table");o.style.width="100%",o.setAttribute("border","1");var s=document.createElement("thead"),r=document.createElement("td");r.innerHTML="Index",s.appendChild(r);for(var a=0;a<i;a++)(r=document.createElement("td")).innerHTML=e[a],s.appendChild(r);o.appendChild(s);for(var l=0;l<n;l++){var d=document.createElement("tr");let n=document.createElement("td");n.innerHTML=l,d.appendChild(n);for(var h=0;h<i;h++)n=document.createElement("td"),n.innerHTML=t[l][e[h]],d.appendChild(n);o.appendChild(d)}return o}logObject(t){let e=[];for(let i in t)e.push({name:i,value:t[i]});return this.printTable(e,["name","value"])}logTable(...t){var e,i=t[0];return void 0!==i&&(e=Object.keys(i)),this.printTable(i,e)}}},776:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GUI=e.Controller=void 0;const n=i(816);class o{constructor(t,e){this.controller=t,this.gui=e}getDomElement(){return this.controller.domElement}getParentNames(){let t=[],e=this.gui;do{t.push(e.name),e=e.parent}while(null!=e);return t}getParentDomElement(){return this.getDomElement().parentElement.parentElement}contains(t){return this.getParentDomElement().contains(t)}getProperty(){return this.controller.property}getName(){return this.controller.property}getValue(){return this.controller.object[this.controller.property]}onChange(t){return this.controller.onChange(t),this}onFinishChange(t){return this.controller.onFinishChange(t),this}setValue(t,e=!0){if(e)return this.controller.setValue(t);this.setValueNoCallback(t)}setValueNoCallback(t){this.controller.object[this.controller.property]=t,this.controller.updateDisplay()}max(t,e=!1){this.controller.max(t),this.setValue(Math.min(t,this.getValue()),e)}min(t,e=!1){this.controller.min(t),this.setValue(Math.max(t,this.getValue()),e)}step(t){this.controller.step(t)}updateDisplay(){this.controller.updateDisplay()}options(t){return this.controller.options(t)}setName(t){return this.name(t),this}name(t){return this.controller.name(t),this}click(){this.getDomElement().click()}hide(){$(this.getParentDomElement()).hide()}show(){$(this.getParentDomElement()).show()}}e.Controller=o;class s{constructor(t,e,i){this.gui=null!=i&&null!=e?i.gui.addFolder(e):new dat.GUI(t),this.name=e,this.parent=i,this.nameToController=new Map,this.nameToFolder=new Map}static startLoadingAnimation(t=null){$("#loading").removeClass("hidden"),clearTimeout(s.loadingTimeoutID),s.loadingTimeoutID=setTimeout((()=>{$("#loading").addClass("loading"),null!=t&&setTimeout((()=>{t()}),400)}),100)}static stopLoadingAnimation(){$("#loading").removeClass("loading"),clearTimeout(s.loadingTimeoutID),s.loadingTimeoutID=setTimeout((()=>$("#loading").addClass("hidden")),1e3)}getDomElement(){return this.gui.domElement}add(t,e,i,s,r){let a=new o(this.gui.add(t,e,i,s,r),this);this.nameToController.set(e,a);let l=$(a.getDomElement()).find('input[type="text"]').first();return l.length>0&&l.on("focus",(t=>n.keyboard.onInputFocus(a))),a}addButton(t,e){let i={};return i[t]=e,this.add(i,t)}setName(t){$(this.getDomElement()).find("li.title").text(t)}addFileSelectorButton(t,e,i=!0,n){let o=$("<input data-name='file-selector' type='file' class='form-control' name='file[]'  accept='"+e+"' "+(i?"multiple":"")+"/>"),s=this.addButton(t,(t=>o.click()));return o.insertAfter(s.getParentDomElement()),o.hide(),o.change((t=>{n(t),o.val("")})),s}addSlider(t,e,i,n,o){let s={};s[t]=e;let r=this.add(s,t,i,n);return null!=o&&r.step(o),r}addFolder(t){let e=new s(null,t,this);return this.nameToFolder.set(t,e),e}getController(t){return this.nameToController.get(t)}getControllers(){let t=Array.from(this.nameToController);return Array.from(t,(t=>t[1]))}getAllControllers(){let t=this.getControllers();for(let e of this.nameToFolder){let i=e[1];t=t.concat(i.getAllControllers())}return t}getFolder(t){return this.nameToFolder.get(t)}getFolders(){let t=Array.from(this.nameToFolder);return Array.from(t,(t=>t[1]))}hide(){$(this.gui.domElement).hide()}show(){$(this.gui.domElement).show()}open(){this.gui.open()}close(){this.gui.close()}}e.GUI=s,s.loadingTimeoutID=null},816:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initializeKeyboard=e.keyboard=e.VirtualKeyboard=void 0;const n=i(86);i(23);const o=i(229),s=i(670),r={"{x0.25}":.25,"{x1}":1,"{x5}":5,"{x25}":25};class a{constructor(){this.initialValue=null,this.activeController=null,this.enableArrows=!1,this.enableArrowsController=null,this.hideKeyboard();let t={onKeyPress:t=>this.onKeyPress(t),theme:"simple-keyboard hg-theme-default hg-layout-default",physicalKeyboardHighlight:!0,syncInstanceInputs:!0,mergeDisplay:!0,debug:!0};this.keyboard=new n.default(Object.assign(Object.assign({},t),{onChange:t=>this.onChange(t)})),$("#keyboard .close-button").click((()=>this.endInput())),this.keyboardArrows=new n.default(".simple-keyboard-arrows",Object.assign(Object.assign({},t),{layout:{default:["{arrowup}","{arrowleft} {arrowdown} {arrowright}","{x0.25} {x1} {x5} {x25}"]},display:{"{x0.25}":"x0.25","{x1}":"x1","{x5}":"x5","{x25}":"x25"}})),this.enableArrows||$(".simple-keyboard-arrows").hide()}createGUI(t){this.enableArrowsController=t.add(this,"enableArrows").name("Touch Move").onFinishChange((t=>{this.toggleArrows(t)})),o.Settings.enableTouchKeyboard||this.enableArrowsController.hide()}toggleArrows(t){t?(this.activeController&&this.endInput(),this.showKeyboard(),$("#keyboard .characters").hide(),$(".simple-keyboard-arrows").show()):(this.hideKeyboard(),$(".simple-keyboard-arrows").hide())}showKeyboard(){o.Settings.enableTouchKeyboard&&($("#keyboard").show(),$("#keyboard .characters").show())}hideKeyboard(){$("#keyboard").hide()}onInputFocus(t){o.Settings.enableTouchKeyboard&&(this.activeController=t,this.initialValue=t.getValue(),this.keyboard.setInput(""+t.getValue()),$("#keyboard .input").val(t.getValue()),this.showKeyboard())}onInputBlur(){o.Settings.enableTouchKeyboard&&this.endInput()}onChange(t){if(o.Settings.enableTouchKeyboard&&null!=this.activeController){let e=isNaN(this.activeController.getValue())?t:parseFloat(t);this.activeController.setValueNoCallback(e),$("#keyboard .input").val(t)}}endInput(){if(o.Settings.enableTouchKeyboard){if(null!=this.activeController){let t=this.keyboard.getInput(),e=isNaN(this.activeController.getValue())?t:parseFloat(t);this.activeController.setValue(e),this.activeController.controller.__onFinishChange&&this.activeController.controller.__onFinishChange(e),$("#keyboard .input").val(e),this.activeController=null}this.hideKeyboard()}}onKeyPress(t){"{enter}"==t&&this.endInput(),"{shift}"!==t&&"{lock}"!==t||this.handleShift();for(let e of["{x0.25}","{x1}","{x5}","{x25}"])if(t==e){let t=$('.hg-button[data-skbtn="'+e+'"]'),i=t.hasClass("pressed");$(".hg-button").removeClass("pressed"),i||t.addClass("pressed")}let e=$(".hg-button.pressed").attr("data-skbtn"),i=null!=e?r[e]:1;switch(t){case"{arrowleft}":s.tipibot.moveDirect(s.tipibot.getPosition().add(new paper.Point(-i,0)));break;case"{arrowup}":s.tipibot.moveDirect(s.tipibot.getPosition().add(new paper.Point(0,-i)));break;case"{arrowright}":s.tipibot.moveDirect(s.tipibot.getPosition().add(new paper.Point(i,0)));break;case"{arrowdown}":s.tipibot.moveDirect(s.tipibot.getPosition().add(new paper.Point(0,i)))}}handleShift(){let t="default"===this.keyboard.options.layoutName?"shift":"default";this.keyboard.setOptions({layoutName:t})}}e.VirtualKeyboard=a,e.keyboard=null,e.initializeKeyboard=function(){return e.keyboard=new a,e.keyboard}},212:(t,e,i)=>{"use strict";const n=i(229),o=i(670),s=i(558),r=i(271),a=i(883),l=i(958),d=i(107),h=i(412),u=i(816),p=i(776),c=i(518),g=i(960),m=i(924),b=i(466),f=i(629),v=i(888),C=i(756),S=i(50);let w,y=null,P=null,M=null,x=window;document.addEventListener("DOMContentLoaded",(function(t){!function(){dat.GUI.DEFAULT_WIDTH=325,x.virtualKeyboard=u.initializeKeyboard(),w=new p.GUI({autoPlace:!1});let t=new c.Console,e=new h.CommandDisplay;e.createGUI(t),t.createGUI(),document.getElementById("gui").appendChild(w.getDomElement()),y=new d.Communication(w),n.settingsManager.createGUI(w,x.virtualKeyboard),a.SVGPlot.createGUI(w),l.Calibration.initialize(w),P=new s.Renderer,y.setTipibot(o.tipibot),o.tipibot.initialize(),P.centerOnTipibot(n.Settings.tipibot),g.VisualFeedback.initialize();let i=w.addFolder("Plugins"),r=new m.CommeUnDessein;r.createGUI(i);let M=new b.Telescreen;M.createGUI(i),(new f.SVGSplitter).createGUI(i),(new v.FileManager).createGUI(i);let A=new C.LiveDrawing;A.createGUI(i),A.setRenderer(P),(new S.GCodeViewer).createGUI(i),x.tipibot=o.tipibot,x.settingsManager=n.settingsManager,x.Settings=n.Settings,x.gui=w,x.GUI=p.GUI,x.renderer=P,x.communication=y,x.commandDisplay=e,x.visualFeedback=g.visualFeedback,x.SVGPlot=a.SVGPlot,x.commeUnDessein=r,x.telescreen=M}();let e=()=>{x.nCall=0,requestAnimationFrame(e),P.render()};e(),window.addEventListener("resize",(function(){P.windowResize()}),!1),document.body.addEventListener("mousedown",(function(t){P.mouseDown(t)})),document.body.addEventListener("mousemove",(function(t){if(P.mouseMove(t),o.tipibot.settingPosition){let e=P.getWorldPosition(t);null==M&&(M=paper.Path.Circle(e,r.Pen.HOME_RADIUS)),M.position=e,o.tipibot.setPositionSliders(e)}})),document.body.addEventListener("mouseup",(function(t){P.mouseUp(t),o.tipibot.settingPosition&&!n.settingsManager.tipibotPositionFolder.getController("Set position with mouse").contains(t.target)&&(null!=M&&(M.remove(),M=null),o.tipibot.setPosition(P.getWorldPosition(t)),o.tipibot.toggleSetPosition(!1,!1))})),document.body.addEventListener("mouseleave",(function(t){P.mouseLeave(t)})),document.body.addEventListener("keydown",(function(t){o.tipibot.keyDown(t),P.keyDown(t)})),document.body.addEventListener("keyup",(function(t){o.tipibot.keyUp(t),P.keyUp(t)})),addWheelListener(document.body,(function(t){P.mouseWheel(t)}))}))},271:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Pen=e.MoveType=void 0;const n=i(107),o=i(229),s=i(670);var r;!function(t){t[t.Direct=0]="Direct",t[t.Linear=1]="Linear"}(r=e.MoveType||(e.MoveType={}));class a{constructor(t,e,i,n){this.isUp=!0,this.dragging=!1,this.initialize(t,e,i,n)}static moveTypeFromMouseEvent(t){return t.altKey?r.Linear:r.Direct}initialize(t,e,i,n){this.group=new paper.Group;let o=new paper.Point(t,e),s=new paper.Point(t,e-i);this.circle=paper.Path.Circle(o,a.RADIUS),this.circle.fillColor=a.UP_COLOR,this.group.addChild(this.circle),this.lines=new paper.Path,this.lines.add(new paper.Point(0,0)),this.lines.add(s),this.lines.add(new paper.Point(n,0)),this.group.addChild(this.lines),this.offsetLine=new paper.Path,this.offsetLine.add(s),this.offsetLine.add(o),this.group.addChild(this.offsetLine),this.previousPosition=new paper.Point(0,0),this.group.onMouseDrag=t=>this.onMouseDrag(t),this.group.onMouseUp=t=>this.onMouseUp(t)}onMouseDrag(t){this.setPosition(this.circle.position.add(t.delta),!0,!1),this.dragging=!0}onMouseUp(t){this.dragging&&this.setPosition(this.getPosition(),!0,!0,a.moveTypeFromMouseEvent(t)),this.dragging=!1}getPosition(){return this.circle.position.clone()}setPosition(t,e=!0,i=!0,n=r.Direct,a=null){if(null==t||Number.isNaN(t.x)||Number.isNaN(t.y))return;e&&s.tipibot.setPositionSliders(t),i&&(n==r.Direct?s.tipibot.moveDirect(t,a):s.tipibot.moveLinear(t,0,o.Settings.tipibot.maxSpeed,a));let l=new paper.Point(t.x,t.y-o.Settings.tipibot.penOffset);this.circle.position=t,this.lines.segments[1].point=l,this.offsetLine.segments[0].point=l,this.offsetLine.segments[1].point=t}tipibotWidthChanged(){this.lines.segments[2].point.x=o.Settings.tipibot.width}penUp(t=o.SettingsManager.servoUpAngle(),e=o.Settings.servo.delay.up.before,i=o.Settings.servo.delay.up.after,s=null){n.communication.interpreter.sendPenUp(t,e,i,(()=>{this.isUp=!0,null!=s&&s()})),this.circle.fillColor=a.UP_COLOR,this.isUp=!0}penDown(t=o.SettingsManager.servoDownAngle(),e=o.Settings.servo.delay.down.before,i=o.Settings.servo.delay.down.after,s=null){n.communication.interpreter.sendPenDown(t,e,i,(()=>{this.isUp=!1,null!=s&&s()})),this.circle.fillColor=a.DOWN_COLOR,this.isUp=!1}}e.Pen=a,a.HOME_RADIUS=6,a.RADIUS=6,a.UP_COLOR="rgba(0, 20, 210, 0.25)",a.DOWN_COLOR="rgba(0, 20, 210, 0.8)"},883:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SVGPlot=void 0;const n=i(670),o=i(229),s=i(107),r=i(776);class a{constructor(t=null){this.pseudoCurvatureDistance=10,this.currentColorIndex=0,this.nSegments=0,this.currentPath=null,this.plotting=!1,null!=a.svgPlot&&(a.svgPlot.destroy(),a.svgPlot=null),a.svgPlot=this,null!=this.background&&this.background.remove(),null!=this.group&&this.group.remove(),this.group=new paper.Group,this.group.sendToBack(),null!=a.currentMatrix&&(this.group.applyMatrix=!1,this.group.matrix=a.currentMatrix),this.item=t,this.item.strokeScaling=!0,this.group.addChild(this.item),this.originalItem=null,this.setBackground(),this.center(),console.log("Collapsing SVG..."),a.collapse(this.item,this.group,this.item.strokeBounds),console.log("SVG collapsed."),this.filter(),this.group.onMouseDrag=t=>this.onMouseDrag(t),document.addEventListener("SettingChanged",(t=>this.onSettingChanged(t)),!1)}static loadImage(t,e=null){let i=paper.project.importSVG(t.target.result);new a(i),a.gui.getController("Draw").show(),a.gui.getController("Save GCode").show(),console.log("SVG imported."),r.GUI.stopLoadingAnimation(),null!=e&&e()}static onImageLoad(t,e=null){console.log("Importing SVG..."),r.GUI.startLoadingAnimation((()=>a.loadImage(t,e)))}static handleFileSelect(t){document.dispatchEvent(new CustomEvent("Load SVG")),this.gui.getController("Load SVG").hide(),this.gui.getController("Clear SVG").show();let e=null!=t.dataTransfer?t.dataTransfer.files:t.target.files;this.files=[];for(let t=0;t<e.length;t++){let i=null!=e[t]?e[t]:e.item(t);/^image\//.test(i.type)&&this.files.push(i)}this.fileIndex=0,this.files.length<e.length&&console.info("Warning: some of the selected files are not SVG images, there will not be imported."),this.loadNextFile()}static loadNextFile(t=null){if(this.fileIndex>=this.files.length)return;let e=this.files[this.fileIndex],i=new FileReader;i.onload=e=>this.onImageLoad(e,t),i.readAsText(e)}static plotAndLoadLoop(t=null){null!=this.svgPlot&&this.svgPlot.plot()}static saveGCode(){null!=this.svgPlot&&this.svgPlot.plot(null,!0,!0)}static clearClicked(t){document.dispatchEvent(new CustomEvent("Clear SVG")),this.fileIndex=0,s.communication.interpreter.clearQueue(),a.gui.getController("Load SVG").show(),a.gui.getController("Clear SVG").hide(),a.svgPlot.destroy(),a.svgPlot=null,a.gui.getController("Draw").name("Draw"),a.gui.getController("Draw").hide(),a.gui.getController("Save GCode").hide()}static drawClicked(t){null!=a.svgPlot&&(a.svgPlot.plotting?(a.gui.getController("Draw").name("Draw"),document.dispatchEvent(new CustomEvent("Stop drawing")),s.communication.interpreter.sendStop(!0),s.communication.interpreter.clearQueue(),a.svgPlot.plotting=!1,n.tipibot.goHome()):(a.gui.getController("Draw").name("Stop, clear commands & go home"),document.dispatchEvent(new CustomEvent("Draw")),a.plotAndLoadLoop()))}static saveGCodeClicked(t){if(null!=a.svgPlot){s.communication.interpreter.sendStop(!0),s.communication.interpreter.clearQueue(),s.communication.interpreter.justQueueCommands=!0,a.saveGCode();let t=s.communication.interpreter.getGCode(),e=new Blob([t],{type:"text/plain;charset=utf-8"});saveAs(e,"gcode.txt"),s.communication.interpreter.clearQueue(),s.communication.interpreter.justQueueCommands=!1}}static createGUI(t){a.gui=t.addFolder("Plot"),a.gui.open(),a.gui.add(o.Settings.plot,"optimizeTrajectories").name("Optimize Trajectories").onFinishChange((t=>o.settingsManager.save(!1))),a.gui.add(o.Settings.plot,"disableMotorsOnceFinished").name("Disable motors once finished").onFinishChange((t=>o.settingsManager.save(!1))),a.gui.addFileSelectorButton("Load SVG","image/svg+xml",!0,(t=>a.handleFileSelect(t))),a.gui.addButton("Clear SVG",a.clearClicked).hide(),a.gui.addButton("Draw",a.drawClicked).hide(),a.gui.addButton("Save GCode",a.saveGCodeClicked).hide();let e=a.gui.addFolder("Filter");e.add(o.Settings.plot,"showPoints").name("Show points").onChange(a.createCallback(a.prototype.showPoints,!0)),e.add(o.Settings.plot,"flatten").name("Flatten").onChange(a.createCallback(a.prototype.filter)),e.add(o.Settings.plot,"flattenPrecision",0,10).name("Flatten precision").onChange(a.createCallback(a.prototype.filter)),e.add(o.Settings.plot,"subdivide").name("Subdivide").onChange(a.createCallback(a.prototype.filter)),e.add(o.Settings.plot,"maxSegmentLength",0,100).name("Max segment length").onChange(a.createCallback(a.prototype.filter));let i=a.gui.addFolder("Transform");a.transformFolder=i,i.addButton("Center",a.createCallback(a.prototype.center)),i.addSlider("X",0).onFinishChange(a.createCallback(a.prototype.setX,!0)),i.addSlider("Y",0).onFinishChange(a.createCallback(a.prototype.setY,!0)),i.addButton("Flip horizontally",a.createCallback(a.prototype.flipX)),i.addButton("Flip vertically",a.createCallback(a.prototype.flipY)),i.addButton("Rotate",a.createCallback(a.prototype.rotate)),i.addSlider("Scale",1,.1,5).onChange(a.createCallback(a.prototype.scale,!0))}static createCallback(t,e=!1,i=[]){return n=>{o.settingsManager.save(!1),null!=a.svgPlot&&(e&&i.unshift(n),t.apply(a.svgPlot,i))}}static itemMustBeDrawn(t){return t.strokeWidth>0&&null!=t.strokeColor}static convertShapeToPath(t){if("Shape"!=t.className||!this.itemMustBeDrawn(t))return t;let e=t.toPath(!0);return t.parent.addChildren(t.children),t.remove(),e}static collapseItem(t,e,i=null,n=null){if(t.applyMatrix=!0,"CompoundPath"==(t=this.convertShapeToPath(t)).className)for(let e of t.children)e.strokeColor=t.strokeColor;for(t.remove(),"Path"==t.className&&this.itemMustBeDrawn(t)&&e.addChild(t);null!=t.children&&t.children.length>0;)this.collapseItem(t.firstChild,e,i,n)}static collapse(t,e=null,i=null){if(null==t.children||0==t.children.length)return;let n=t.children.slice();for(let o of n)this.collapseItem(o,t,e,i)}static subdividePath(t,e){if(null!=t.segments)for(let i of t.segments){let t=i.curve;do{t=t.divideAt(e)}while(null!=t)}}static filter(t){for(let e of t.children){if("Path"!=e.className)continue;let t=e;o.Settings.plot.flatten&&t.flatten(o.Settings.plot.flattenPrecision),o.Settings.plot.subdivide&&this.subdividePath(t,o.Settings.plot.maxSegmentLength)}}static splitLongPaths(t){for(let e of t.children){let t=e;t.segments.length>a.nSegmentsPerBatch&&t.splitAt(t.segments[a.nSegmentsPerBatch-1].location)}}setBackground(){null!=this.background&&this.background.remove(),this.background=paper.Path.Rectangle(this.item.bounds),this.background.fillColor="white",this.background.strokeColor=null,this.background.strokeWidth=0,this.background.sendToBack(),this.background.name="background",this.group.addChild(this.background)}countSegments(){let t=0;for(let e of this.item.children)t+=e.segments.length;return t}warnIfTooManyCommands(){let t=this.countSegments();if(t>a.nSegmentsPerBatch){let e=`Warning: there are ${t} segments to draw. \nOptimizing trajectories and computing speeds (in full speed mode) will take some time to compute \n(but it will optimize drawing time), make sure to check your settings before starting drawing.`;console.info(e)}}onSettingChanged(t){(t.detail.all||"Pen"==t.detail.parentNames[0])&&"penWidth"==t.detail.name&&null!=this.group&&this.updateShape()}onMouseDrag(t){n.tipibot.pen.dragging||this.checkPlotting()||(this.group.position=this.group.position.add(t.delta),this.updatePositionGUI())}updatePositionGUI(){a.transformFolder.getController("X").setValueNoCallback(this.group.bounds.left-n.tipibot.drawArea.bounds.left),a.transformFolder.getController("Y").setValueNoCallback(this.group.bounds.top-n.tipibot.drawArea.bounds.top)}saveItem(){for(let t of this.item.children){let e=t;null!=e.segments&&e.segments.length>1e5&&e.splitAt(e.segments[99999].location)}this.originalItem=this.item.clone(!1)}loadItem(){this.originalItem.position=this.item.position,this.originalItem.applyMatrix=!1,this.originalItem.scaling=this.item.scaling,this.item.remove(),this.item=this.originalItem.clone(!1),this.group.addChild(this.item)}updateShape(){null!=this.raster&&this.raster.remove(),this.item.strokeWidth=o.Settings.tipibot.penWidth/this.group.scaling.x;for(let t of this.item.children)t.strokeWidth=o.Settings.tipibot.penWidth/this.group.scaling.x;this.item.selected=!1,this.item.visible=!0,this.raster=this.item.rasterize(paper.project.view.resolution),this.group.addChild(this.raster),this.raster.sendToBack(),null!=this.background&&this.background.sendToBack(),this.item.selected=o.Settings.plot.showPoints,this.item.visible=o.Settings.plot.showPoints}filter(){this.checkPlotting()||(null==this.originalItem&&(o.Settings.plot.subdivide||o.Settings.plot.flatten)?this.saveItem():null!=this.originalItem&&this.loadItem(),console.log("Flattening and subdividing paths..."),a.filter(this.item),console.log("Paths flattenned and subdivided."),console.log("Splitting long paths..."),a.splitLongPaths(this.item),console.log("Paths split."),console.log("There are "+this.item.children.length+" paths in this SVG."),this.warnIfTooManyCommands(),this.updateShape())}findClosestPath(t,e){if("Path"!=t.className||null==t.firstSegment||null==t.lastSegment)return null;let i=null,n=Number.MAX_VALUE,o=!1,s=t.closed?t.firstSegment.point:t.lastSegment.point;for(let r of e.children){let e=r;if(e==t||null==e.segments)continue;let a=e.firstSegment.point.getDistance(s);a<n&&(n=a,i=e,o=!1),a=e.lastSegment.point.getDistance(s),a<n&&(n=a,i=e,o=!0)}return o&&i.reverse(),i}optimizeTrajectories(t){let e=[],i=t.firstChild,n=0;do{i.remove(),e.push(i),i=this.findClosestPath(i,t),n>100&&(console.log("Items to process: "+t.children.length),n=0),n++}while(t.children.length>0&&null!=i);t.addChildren(e)}plot(t=null,e=!0,i=!1){this.plotting=!0,console.log("Generating drawing commands...");let s=this.item.clone();s.applyMatrix=!0,s.transform(this.group.matrix),s.visible=!0,r.GUI.startLoadingAnimation();let a=new Map;for(let t of s.children){let e=t.strokeColor instanceof paper.Color?t.strokeColor.toCSS():t.strokeColor,i=a.get(e);null!=i?i.push(t):a.set(e,[t])}for(let[t,e]of a){console.log("color",t,e.length);let i=new paper.Group;i.addChildren(e),o.Settings.plot.optimizeTrajectories&&this.optimizeTrajectories(i),s.addChildren(i.children),i.remove()}r.GUI.stopLoadingAnimation(),this.currentPath=s.firstChild;let l=this.getColorCSS(this.currentPath.strokeColor);n.tipibot.sendChangePen(l,this.currentColorIndex++),i?(this.plotGCode(),e&&n.tipibot.goHome(),o.Settings.plot.disableMotorsOnceFinished&&n.tipibot.disableMotors(!0),this.plotting=!1):(this.plotAll(),e?n.tipibot.goHome((()=>this.plotFinished(t))):this.plotFinished(t)),s.remove()}showPoints(t){this.item.selected=t,this.item.visible=t}storeMatrix(){a.currentMatrix=this.group.matrix}checkPlotting(){return!!this.plotting&&(console.error("You cannot apply any filter or transformation while the machine is plotting."),!0)}rotate(){this.checkPlotting()||(this.group.rotate(90),this.updateShape(),this.updatePositionGUI(),this.storeMatrix())}scale(t){this.checkPlotting()||(this.group.applyMatrix=!1,this.group.scaling=new paper.Point(Math.sign(this.group.scaling.x)*t,Math.sign(this.group.scaling.y)*t),this.updateShape(),this.updatePositionGUI(),this.storeMatrix())}center(){this.checkPlotting()||(this.group.position=n.tipibot.drawArea.bounds.center,this.updatePositionGUI(),this.storeMatrix())}flipX(){this.checkPlotting()||(this.group.scale(-1,1),this.updateShape(),this.storeMatrix())}flipY(){this.checkPlotting()||(this.group.scale(1,-1),this.updateShape(),this.storeMatrix())}setX(t){this.checkPlotting()||(this.group.position.x=n.tipibot.drawArea.bounds.left+t+this.group.bounds.width/2,this.storeMatrix())}setY(t){this.checkPlotting()||(this.group.position.y=n.tipibot.drawArea.bounds.top+t+this.group.bounds.height/2,this.storeMatrix())}getAngle(t){if(null==t.previous||null==t.point||null==t.next)return 180;let e=t.previous.point.subtract(t.point),i=t.next.point.subtract(t.point),n=e.getDirectedAngle(i);return 180-Math.abs(n)}getPseudoCurvature(t){if(null==t.previous||null==t.point||null==t.next)return 180;let e=this.getAngle(t),i=t.previous,n=i.curve.length;for(;null!=i&&n<this.pseudoCurvatureDistance/2;)e+=this.getAngle(i),i=i.previous,n+=null!=i?i.curve.length:0;for(n=t.curve.length,i=t.next;null!=i.next&&n<this.pseudoCurvatureDistance/2;)e+=this.getAngle(i),i=i.next,n+=null!=i?i.curve.length:0;return Math.max(e,180)}moveTipibotLinear(t){let e=t.point;n.tipibot.moveLinear(e,0,o.Settings.tipibot.drawSpeed,(()=>n.tipibot.pen.setPosition(e,!0,!1)),!1)}plotPath(t){if("Path"==t.className&&a.itemMustBeDrawn(t)&&null!=t.segments){for(let e of t.segments){let i=e.point;e==t.firstSegment?(n.tipibot.lastSentPosition.equals(i)||(n.tipibot.penUp(),n.tipibot.moveDirect(i,(()=>n.tipibot.pen.setPosition(i,!0,!1)),!1)),n.tipibot.penDown()):this.moveTipibotLinear(e)}t.closed&&this.moveTipibotLinear(t.firstSegment)}}getColorCSS(t){return t instanceof paper.Color?t.toCSS():t}plotCurrentPath(){this.plotPath(this.currentPath),this.nSegments+=this.currentPath.segments.length;let t=this.currentPath.nextSibling;if(null!=t){let e=this.getColorCSS(this.currentPath.strokeColor),i=this.getColorCSS(t.strokeColor);if(null!=e&&null!=i&&e!=i){let t=n.tipibot.pen.isUp;n.tipibot.penUp(),n.tipibot.sendChangePen(i,this.currentColorIndex++),t||n.tipibot.penDown()}}this.currentPath=t}plotGCode(){for(this.nSegments=0;null!=this.currentPath;)this.plotCurrentPath()}plotAll(){let t=s.communication.interpreter.commandQueue.length;for(s.communication.interpreter.justQueueCommands=!0,this.nSegments=0;null!=this.currentPath;)this.plotCurrentPath();s.communication.interpreter.justQueueCommands=!1,s.communication.interpreter.startQueue();let e=[];for(let i=t;i<s.communication.interpreter.commandQueue.length;i++)e.push(s.communication.interpreter.commandQueue[i].id);document.dispatchEvent(new CustomEvent("QueueCommands",{detail:e}))}plotFinished(t=null){a.gui.getController("Draw").name("Draw"),this.plotting=!1,null!=t&&t(),o.Settings.plot.disableMotorsOnceFinished&&n.tipibot.disableMotors(!0)}clearData(t){if(t.data=null,t.children)for(let e of t.children)this.clearData(e)}clear(){a.svgPlot==this&&(a.svgPlot=null),null!=this.raster&&(this.raster.remove(),this.raster=null),null!=this.item&&(this.item.remove(),this.item=null),null!=this.originalItem&&(this.originalItem.remove(),this.originalItem=null),null!=this.background&&(this.background.remove(),this.background=null),this.group.removeChildren()}destroy(){this.clear(),null!=this.group&&(this.group.remove(),this.group=null)}}e.SVGPlot=a,a.svgPlot=null,a.gui=null,a.transformFolder=null,a.files=null,a.fileIndex=0,a.currentMatrix=null,a.nSegmentsPerBatch=1e3,a.nSegmentsMax=3*a.nSegmentsPerBatch},924:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CommeUnDessein=void 0;const n=i(229),o=i(883),s=i(107),r=i(670),a=i(960);let l=new paper.Size(4e3,3e3),d=function(t){let e=r.tipibot.drawArea.bounds,i=new paper.Point(-l.width/2,-l.height/2);const n=new paper.Rectangle(i,l);return t.subtract(n.topLeft).divide(n.size).multiply(e.size).add(e.topLeft)},h=function(t,e){null==t.x&&null==t.y&&(t=new paper.Point(t));let i=180*e.x+t.x,n=90*e.y+t.y;return i*=1e3,n*=1e3,new paper.Point(i,n)},u="/ajaxCallNoCSRF/";const p="Mode",c="Origin",g="CommeUnDesseinSecret";var m;!function(t){t[t.NextDrawing=0]="NextDrawing",t[t.RequestedNextDrawing=1]="RequestedNextDrawing",t[t.Drawing=2]="Drawing",t[t.SetStatus=3]="SetStatus",t[t.RequestedSetStatus=4]="RequestedSetStatus"}(m||(m={})),e.CommeUnDessein=class{constructor(t=!1){this.mode="CommeUnDessein",this.origin="",this.secret="******",this.state=m.NextDrawing,this.started=!1,this.timeoutID=null,this.testMode=t,this.mode=localStorage.getItem(p)||"CommeUnDessein",this.origin=localStorage.getItem(c)||"";let e=localStorage.getItem(g);null!=e&&(this.secret=e)}createGUI(t){let e="Comme un dessein";this.testMode&&(e+=" (Test mode)");let i=t.addFolder(e);i.add(this,"origin").onFinishChange((t=>localStorage.setItem(c,t))),i.add(this,"mode").onFinishChange((t=>localStorage.setItem(p,t))),i.add(this,"secret").onFinishChange((t=>localStorage.setItem(g,t))),l.width=parseInt(window.localStorage.getItem("commeUnDesseinWidth"))||r.tipibot.drawArea.bounds.width,l.height=parseInt(window.localStorage.getItem("commeUnDesseinHeight"))||r.tipibot.drawArea.bounds.height,i.add(l,"width",0,5e3,1).name("Width").onFinishChange((t=>{window.localStorage.setItem("commeUnDesseinWidth",t)})),i.add(l,"height",0,5e3,1).name("Height").onFinishChange((t=>{window.localStorage.setItem("commeUnDesseinHeight",t)})),this.startButton=i.addButton("Start",(()=>this.toggleStart()))}toggleStart(){this.started?(this.startButton.setName("Start"),this.stopAndClear()):(document.cookie.indexOf("csrftoken")<0&&console.log("Old Warning (which you can ignore safely): the Comme un dessein csrf token cookie is not present, please visit http://commeundessein.co/ before starting Comme un Dessein"),this.startButton.setName("Stop, clear queue & go home"),this.requestNextDrawing()),this.started=!this.started}stopAndClear(){null!=o.SVGPlot.svgPlot&&o.SVGPlot.svgPlot.destroy(),s.communication.interpreter.sendStop(!0),s.communication.interpreter.clearQueue(),r.tipibot.goHome(),this.state=m.NextDrawing,clearTimeout(this.timeoutID)}requestNextDrawing(){if(this.state!=m.NextDrawing)return void console.error("CommeUnDessein trying to request next drawing while not in NextDrawing state");let t={cityName:this.mode,secret:this.secret},e=this.testMode?"getNextTestDrawing":"getNextValidatedDrawing",i={data:JSON.stringify({function:e,args:t})};this.state=m.RequestedNextDrawing,console.log("Request next drawing...");let n=this.origin+u;$.ajax({method:"POST",url:n,data:i}).done((t=>{if(this.testMode&&console.log(t),"no path"==t.message)return this.state=m.NextDrawing,console.log("There are no path to draw. Request next drawing in two seconds..."),void(this.started&&(clearTimeout(this.timeoutID),this.timeoutID=setTimeout((()=>this.requestNextDrawing()),2e3)));this.state==m.RequestedNextDrawing?this.drawSVG(t):console.error("CommeUnDessein trying to set to draw while not in RequestedNextDrawing state")})).fail((t=>{console.error("getNextValidatedDrawing request failed"),console.error(t),this.state=m.NextDrawing,this.started&&(clearTimeout(this.timeoutID),this.timeoutID=setTimeout((()=>this.requestNextDrawing()),2e3))}))}drawSVG(t){if("error"==t.state)return void console.log(t);this.state=m.Drawing,this.currentDrawing=t;let e=new paper.Group;paper.project.importSVG(t.svg,((i,s)=>{if(0!=i.visible){for(let t of i.children){if("Path"!=t.className)continue;let i=t.strokeColor;if(t.strokeWidth<=.2||"white"==t.strokeColor||null==t.strokeColor||t.opacity<=.1||i.alpha<=.2||!t.visible)continue;let o=t.clone();o.flatten(n.Settings.plot.flattenPrecision);for(let t of o.segments)t.point=d(t.point);e.addChild(o)}i.remove(),null!=o.SVGPlot.svgPlot&&o.SVGPlot.svgPlot.destroy(),o.SVGPlot.svgPlot=new o.SVGPlot(e),o.SVGPlot.svgPlot.plot((()=>this.setDrawingStatusDrawn(t.pk)))}else console.error("When receiving next validated drawing: while importing SVG: the imported item is not visible: ignore.")}))}draw(t){if("error"==t.state)return void console.log(t);this.state=m.Drawing,this.currentDrawing=t;let e=new paper.Group;for(let i of t.items){let t=JSON.parse(i),o=(t._id.$oid,t.clientId,null!=t.date&&t.date.$date,null!=t.data&&t.data.length>0?JSON.parse(t.data):null),s=o.points,r=o.planet,a=new paper.Path;for(let t=0;t<s.length;t+=4){let e=s[t];a.add(h(e,r)),a.lastSegment.handleIn=new paper.Point(s[t+1]),a.lastSegment.handleOut=new paper.Point(s[t+2])}a.flatten(n.Settings.plot.flattenPrecision);for(let t of a.segments)t.point=d(t.point);e.addChild(a)}null!=o.SVGPlot.svgPlot&&o.SVGPlot.svgPlot.destroy(),o.SVGPlot.svgPlot=new o.SVGPlot(e),o.SVGPlot.svgPlot.plot((()=>this.setDrawingStatusDrawn(t.pk)))}setDrawingStatusDrawn(t){if(a.visualFeedback.paths.children.length>0&&a.visualFeedback.paths.removeChildren(),this.state!=m.Drawing)return void console.error("CommeUnDessein trying to setDrawingStatusDrawn while not in Drawing state");let e={pk:t,secret:this.secret},i=this.testMode?"setDrawingStatusDrawnTest":"setDrawingStatusDrawn",n={data:JSON.stringify({function:i,args:e})};this.state=m.RequestedSetStatus,this.testMode&&console.log("setDrawingStatusDrawn");let o=this.origin+u;$.ajax({method:"POST",url:o,data:n}).done((t=>{console.log(t),this.testMode&&console.log(t),"error"!=t.state?this.state==m.RequestedSetStatus?(this.state=m.NextDrawing,this.started&&this.requestNextDrawing()):console.error("CommeUnDessein trying to requestNextDrawing while not in RequestedSetStatus state"):console.error(t)})).fail((e=>{console.error("setDrawingStatusDrawn request failed"),console.error(e),this.state=m.Drawing,this.started&&this.setDrawingStatusDrawn(t)}))}}},888:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FileManager=void 0;const n=i(107),o=i(883);e.FileManager=class{constructor(){this.saveFileName="drawing.txt",document.addEventListener("ServerMessage",(t=>this.onServerMessage(t.detail)),!1),this.printingFileName=null}createGUI(t){this.gui=t.addFolder("File Manager"),this.gui.add(this,"saveFileName").name("File name"),this.gui.addButton("Save file",(()=>this.saveFile())),this.filesFolder=this.gui.addFolder("Files"),this.listJ=$('<ul id="console-list" class="c-list">'),this.listJ.insertAfter($(this.filesFolder.gui.domElement).find("li"))}saveFile(){null!=o.SVGPlot.svgPlot?n.communication.interpreter.commandQueue.length>0?console.error("Command queue is not empty ; please finish / empty queue before saving a file."):(n.communication.send("write-file",this.saveFileName),o.SVGPlot.plotAndLoadLoop((()=>n.communication.send("close-file")))):console.error("No SVG loaded.")}exportFile(t,e,i,n,o){let s=t+"_"+e+".svg";console.log("Exporting "+s+"...");let r=i.exportSVG({asString:!0}),a=new Blob([r],{type:"image/svg+xml"});console.log("Exported "+s+"."),n.file(s,a,{}),o.removeChildren()}listFiles(){n.communication.send("list-files")}createFileItem(t){let e=$("<li>").attr("id",t),i=$("<div>").append(t).addClass("file-name");e.append(i);let n=$("<button>Print</button>").addClass("print");n.click((e=>this.printFileItem(t))),e.append(n);let o=$("<button>x</button>").addClass("close");return o.click((e=>this.removeFileItem(t))),e.append(o),e}printFileItem(t){null==this.printingFileName?(this.listJ.find("#"+t).find(".print").text("Cancel print"),n.communication.send("print-file",t),this.printingFileName=t):this.printingFileName==t?(this.listJ.find("#"+t).find(".print").text("Print"),n.communication.send("cancel-print-file",t),this.printingFileName=null):console.error("The file "+this.printingFileName+" is already being printed.")}removeFileItem(t){this.listJ.find("#"+t).remove(),n.communication.send("delete-file",t)}onServerMessage(t){if("files"==t.type){this.listJ.children().remove();for(let e of t.data)this.createFileItem(e)}else"file-printed"==t.type&&(this.listJ.find("#"+t.data).find(".print").text("Print"),console.info("File "+t.data+" printed."))}}},50:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GCodeViewer=void 0;const n=i(229),o=i(670);e.GCodeViewer=class{constructor(){this.fileName=null,this.group=new paper.Group}handleFileSelect(t){let e=null!=t.dataTransfer?t.dataTransfer.files:t.target.files;for(let t=0;t<e.length;t++){let i=null!=e[t]?e[t]:e.item(t),n=new FileReader;n.onload=t=>this.onGCodeLoad(t.target.result,i.name),n.readAsText(i);break}}convertFromMakelangeloCoordinates(t){let e=new paper.Size(n.Settings.tipibot.width,n.Settings.tipibot.height);return t.y*=-1,t.add(e.multiply(.5))}onGCodeLoad(t,e){this.fileName=e;let i=t.split("\n"),s=null,r=null;for(let t of i)if(0==t.indexOf("G0")&&t.indexOf("Z")>0){let e=t.split(" ");for(let t of e)if(0==t.indexOf("Z")){let e=parseFloat(t.substr(1));if(null!=s||null!=r){e>s?r=e:s=e;break}s=e,r=e}}let a=o.tipibot.getHome(),l=new paper.Color(0,0,0),d=!0,h=null,u=null;for(let t of i){if(0==t.indexOf("G0")){let e=t.split(" "),i={};for(let t of e)i[t[0]]=parseFloat(t.substr(1));if(null!=i.Z&&(i.Z!=h&&(h=i.Z,d=!d),d?u=null:(u=new paper.Path,u.strokeColor=l,u.strokeWidth=1,u.add(a),this.group.addChild(u))),null!=i.X||null!=i.Y){let t=null!=i.X?i.X+.5*n.Settings.tipibot.width:a.x,e=null!=i.Y?-i.Y+.5*n.Settings.tipibot.height:a.y;a=new paper.Point(t,e),d||null==u||u.add(a)}}0==t.indexOf("M117 Change pen to ")&&(t=t.replace("M117 Change pen to ","").replace("Click to continue",""),l=new paper.Color(t))}}createGUI(t){this.gui=t.addFolder("GCode Viewer"),this.gui.addFileSelectorButton("Open GCode","text/*",!1,(t=>this.handleFileSelect(t))),this.gui.addButton("Save to SVG",(()=>this.saveSVG())),this.gui.addButton("Clear",(()=>this.clear()))}saveSVG(){var t=document.createElement("div"),e={width:n.Settings.drawArea.width,height:n.Settings.drawArea.height};let i=o.tipibot.computeDrawArea();var s=new Two(e).appendTo(t);for(let t of this.group.children){let e=new Array;for(let n of t.segments)e.push(new Two.Anchor(n.point.x-i.left,n.point.y-i.top,n.handleIn.x,n.handleIn.y,n.handleOut.x,n.handleOut.y,"M"));let n=s.makePath(e,!1);n.linewidth=t.strokeWidth,n.stroke=t.strokeColor.toCSS()}s.update(),t.firstElementChild.setAttribute("xmlns","http://www.w3.org/2000/svg");var r=t.innerHTML;let a=new Blob([r],{type:"image/svg+xml"}),l=URL.createObjectURL(a),d=document.createElement("a");document.body.appendChild(d),d.download=this.fileName+".svg",d.href=l,d.click(),document.body.removeChild(d)}clear(){this.group.removeChildren()}}},756:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LiveDrawing=void 0;const n=i(229),o=i(107),s=i(670);e.LiveDrawing=class{constructor(){this.liveDrawing=!1,this.mouseDown=!1,this.undoRedo=!0,this.undoRedoButtons=!1,this.mustClearCommandQueueOnMouseUp=!1,document.body.addEventListener("mousedown",(t=>this.onMouseDown(t))),document.body.addEventListener("mousemove",(t=>this.onMouseMove(t))),document.body.addEventListener("mouseup",(t=>this.onMouseUp(t))),document.body.addEventListener("mouseleave",(t=>this.onMouseLeave(t))),document.body.addEventListener("keydown",(t=>this.onKeyDown(t))),document.body.addEventListener("keyup",(t=>this.onKeyUp(t))),window.addEventListener("resize",(t=>this.windowResize(t))),document.addEventListener("QueueCommand",(t=>this.queueCommand(t.detail)),!1),document.addEventListener("SendCommand",(t=>this.sendCommand(t.detail)),!1),document.addEventListener("CommandExecuted",(t=>this.commandExecuted(t.detail)),!1),document.addEventListener("ClearQueue",(t=>this.clearQueue()),!1),this.mode="4 Symmetries",this.nRepetitions=1,this.commandQueues=[],this.undoneCommandQueues=[]}setRenderer(t){this.renderer=t}createGUI(t){let e=t.addFolder("Live drawing");this.toggleLiveDrawingButton=e.addButton("Start",(t=>this.toggleLiveDrawing())),e.add(this,"undoRedo").name("Undo / Redo"),e.add(this,"undoRedoButtons").name("Display buttons"),e.add({Mode:this.mode},"Mode",["None","2 Symmetries","4 Symmetries","N. Repetitions"]).onFinishChange((t=>this.renderAxes(t))),e.addSlider("N. Repetitions",1,1,10,1).onChange((t=>{this.nRepetitions=t,this.renderAxes(this.mode)})),e.addButton("Clear drawing",(t=>this.clearDrawing())),e.addButton("Undo",(t=>this.undo())),e.addButton("Redo",(t=>this.redo())),e.addButton("Export SVG",(t=>this.exportSVG()))}clearDrawing(){this.drawing.removeChildren()}exportSVG(){let t=this.project.exportSVG({asString:!0}),e=new Blob([t],{type:"image/svg+xml"}),i=URL.createObjectURL(e),n=document.createElement("a");document.body.appendChild(n),n.download="result.svg",n.href=i,n.click(),document.body.removeChild(n)}renderAxes(t){this.mode=t,this.axes.removeChildren();let e=s.tipibot.drawArea.bounds;if("None"==t);else if("2 Symmetries"==t||"4 Symmetries"==t){let i=new paper.Path;i.strokeColor="black",i.strokeWidth=1,i.dashArray=[5,5],i.add(e.topCenter),i.add(e.bottomCenter),this.axes.addChild(i);let n=i.clone();if(n.firstSegment.point=e.leftCenter,n.lastSegment.point=e.rightCenter,this.axes.addChild(n),"4 Symmetries"==t){let t=i.clone();t.firstSegment.point.x-=e.height<e.width?e.height/2:e.width/2,t.lastSegment.point.x+=e.height<e.width?e.height/2:e.width/2,this.axes.addChild(t);let n=i.clone();n.firstSegment.point.x+=e.height<e.width?e.height/2:e.width/2,n.lastSegment.point.x-=e.height<e.width?e.height/2:e.width/2,this.axes.addChild(n)}}else if("N. Repetitions"==t)for(let t=0;t<this.nRepetitions;t++){let i=new paper.Path;i.strokeColor="black",i.strokeWidth=1,i.dashArray=[5,5];let n=e.center;i.add(n),i.add(e.bottomCenter.rotate(360*t/this.nRepetitions,n)),this.axes.addChild(i)}}windowResize(t=null){if(null==this.canvasJ)return;let e=window.innerWidth,i=window.innerHeight;this.canvasJ.width(e),this.canvasJ.height(i),paper.view.viewSize=new paper.Size(e,i),this.renderer.centerOnTipibot(this.drawArea.bounds,!0,this.canvasJ.get(0)),this.project.view.setCenter(this.drawArea.bounds.center)}startLiveDrawing(){if(n.settingsManager.settingsFolder.getController("disableCommandList").setValue(!0),null==this.canvasJ){this.divJ=$("<div>"),this.canvasJ=$("<canvas>");let t=1e6;this.canvasJ.css({position:"absolute",top:0,left:0,right:0,bottom:0,"z-index":t++,width:window.innerWidth,height:window.innerHeight,background:"white"}),this.divJ.append(this.canvasJ),this.footerJ=$("<div>").css({position:"absolute",bottom:0,left:0,right:0,display:"flex","flex-direction":"row","justify-content":"center","z-index":t++});let e={width:"200px",height:"40px","margin-bottom":"20px","user-select":"none"};this.undoButtonJ=$("<button>").html("&#8592;").css(e).click((()=>this.left())),this.redoButtonJ=$("<button>").html("&#8594;").css(e).click((()=>this.right())),this.footerJ.append(this.undoButtonJ),this.footerJ.append(this.redoButtonJ),this.divJ.append(this.footerJ),$("body").append(this.divJ),this.project=new paper.Project(this.canvasJ.get(0)),this.project.activate(),this.axes=new paper.Group,this.drawing=new paper.Group,this.currentDrawing=new paper.Group,this.drawArea=paper.Path.Rectangle(s.tipibot.drawArea.bounds),this.drawArea.strokeColor="black",this.drawArea.strokeWidth=1,this.undoRedoButtons||(this.undoButtonJ.hide(),this.redoButtonJ.hide()),this.windowResize()}else this.divJ.show(),this.project.activate(),this.undoRedoButtons?(this.undoButtonJ.show(),this.redoButtonJ.show()):(this.undoButtonJ.hide(),this.redoButtonJ.hide());this.renderAxes(this.mode),s.tipibot.ignoreKeyEvents=!0,this.renderer.ignoreWindowResize=!0}stopLiveDrawing(){this.divJ.hide(),paper.projects[0].activate(),this.axes.removeChildren(),s.tipibot.ignoreKeyEvents=!1,this.renderer.ignoreWindowResize=!1,this.renderer.windowResize()}toggleLiveDrawing(){this.liveDrawing=!this.liveDrawing,this.toggleLiveDrawingButton.setName(this.liveDrawing?"Stop":"Start"),this.liveDrawing?this.startLiveDrawing():this.stopLiveDrawing()}createNewCommandQueue(){let t={commands:new Array,paths:new Array};return this.commandQueues.push(t),t}eventWasOnGUI(t){return $.contains(document.getElementById("gui"),t.target)||$.contains(document.getElementById("info"),t.target)||$.contains(this.footerJ.get(0),t.target)}onMouseDown(t){if(!this.liveDrawing||this.eventWasOnGUI(t))return;let e=this.renderer.getWorldPosition(t);if(!s.tipibot.drawArea.bounds.contains(e))return;this.mouseDown=!0;let i=this.undoRedo?this.createNewCommandQueue():null;this.currentLine=new paper.Path,this.currentLine.strokeWidth=n.Settings.tipibot.penWidth,this.currentLine.strokeColor="green",this.currentLine.add(e),this.undoRedo?(this.undoneCommandQueues=[],s.tipibot.moveDirect(e),s.tipibot.penDown(),this.drawing.addChild(this.currentLine),i.paths.push(this.currentLine)):this.currentDrawing.addChild(this.currentLine)}onMouseMove(t){if(this.liveDrawing&&!this.eventWasOnGUI(t)&&this.mouseDown){let e=this.renderer.getWorldPosition(t);if(!s.tipibot.drawArea.bounds.contains(e)||this.undoRedo&&e.getDistance(this.currentLine.lastSegment.point)<15)return;this.undoRedo&&s.tipibot.moveLinear(e),this.currentLine.add(e)}}addLines(t,e){this.undoRedo?(this.drawing.addChild(t),this.drawLines(t),e.paths.push(t)):this.currentDrawing.addChild(t)}pathDrawn(t){t.strokeColor="black"}penUp(t){s.tipibot.penUp(void 0,void 0,void 0,(()=>this.pathDrawn(t)))}drawLines(t){s.tipibot.penUp(),s.tipibot.moveDirect(t.firstSegment.point),s.tipibot.penDown();for(let e of t.segments)s.tipibot.moveLinear(e.point);this.penUp(t)}onMouseUp(t){if(!this.liveDrawing||this.eventWasOnGUI(t))return;let e=this.renderer.getWorldPosition(t);if(!s.tipibot.drawArea.bounds.contains(e))return;this.undoRedo&&s.tipibot.moveLinear(e),this.currentLine.add(e),this.mouseDown=!1,this.undoRedo?this.penUp(this.currentLine):(this.currentLine.simplify(),this.currentLine.flatten(4.25));let i=this.commandQueues[this.commandQueues.length-1];if("None"==this.mode);else if("2 Symmetries"==this.mode||"4 Symmetries"==this.mode){let t=this.currentLine.clone();if(t.pivot=s.tipibot.drawArea.bounds.center,t.scaling.y=-1,this.addLines(t,i),t=this.currentLine.clone(),t.pivot=s.tipibot.drawArea.bounds.center,t.scaling.x=-1,this.addLines(t,i),t=this.currentLine.clone(),t.pivot=s.tipibot.drawArea.bounds.center,t.scaling.x=-1,t.scaling.y=-1,this.addLines(t,i),"4 Symmetries"==this.mode){let t=this.currentLine.clone();t.pivot=s.tipibot.drawArea.bounds.center,t.rotate(90),this.addLines(t,i),t=this.currentLine.clone(),t.pivot=s.tipibot.drawArea.bounds.center,t.rotate(90),t.scaling.x=-1,this.addLines(t,i),t=this.currentLine.clone(),t.pivot=s.tipibot.drawArea.bounds.center,t.rotate(90),t.scaling.y=-1,this.addLines(t,i),t=this.currentLine.clone(),t.pivot=s.tipibot.drawArea.bounds.center,t.rotate(90),t.scaling.x=-1,t.scaling.y=-1,this.addLines(t,i)}}else if("N. Repetitions"==this.mode)for(let t=1;t<this.nRepetitions;t++){let e=this.currentLine.clone();e.pivot=s.tipibot.drawArea.bounds.center,e.rotate(360*t/this.nRepetitions),this.addLines(e,i)}if(this.mustClearCommandQueueOnMouseUp&&1==this.commandQueues.length){this.mustClearCommandQueueOnMouseUp=!1;for(let t of this.commandQueues[0].paths)t.strokeColor="blue";this.commandQueues=[],this.createNewCommandQueue()}}onMouseLeave(t){this.liveDrawing}onKeyDown(t){if(this.liveDrawing)switch(t.keyCode){case 37:this.left();break;case 39:this.right();break;case 27:this.toggleLiveDrawing()}}onKeyUp(t){this.liveDrawing}undo(){if(!this.liveDrawing)return;let t=this.commandQueues.pop();if(null!=t){this.undoneCommandQueues.push(t);for(let e of t.commands)o.communication.interpreter.removeCommand(e.id),document.dispatchEvent(new CustomEvent("CancelCommand",{detail:e}));for(let e of t.paths)e.remove()}}redo(){if(!this.liveDrawing)return;let t=this.undoneCommandQueues.pop();if(null!=t){this.createNewCommandQueue();for(let e of t.commands)o.communication.interpreter.queue(e.data,e.message,e.callback);for(let e of t.paths)this.drawing.addChild(e),this.commandQueues[this.commandQueues.length-1].paths.push(e)}}left(){this.undoRedo?this.undo():this.currentDrawing.removeChildren()}right(){if(this.undoRedo)this.redo();else{for(let t of this.currentDrawing.children.slice())t.strokeColor="black",this.drawing.addChild(t),this.drawLines(t);this.currentDrawing.removeChildren()}}removeCommand(t,e){let i=t.findIndex((t=>t.id==e));i>=0&&t.splice(i,1)}removeCommandFromQueues(t){for(let e of this.commandQueues)for(let i of e.commands)i.id==t&&this.removeCommand(e.commands,t)}queueCommand(t){this.liveDrawing&&this.undoRedo&&this.commandQueues[this.commandQueues.length-1].commands.push(t)}sendCommand(t){if(this.liveDrawing&&this.undoRedo)for(let e of this.commandQueues)for(let i of e.commands)if(t==i){console.log("SEND");let t=this.commandQueues.findIndex((t=>t==e));t>=0&&(!this.mouseDown||1!=this.commandQueues.length)?this.commandQueues.splice(t,1):t>=0&&this.mouseDown&&1==this.commandQueues.length&&(this.mustClearCommandQueueOnMouseUp=!0),this.commandQueues.length<=0&&this.createNewCommandQueue();for(let t of e.paths)t.strokeColor="blue";return}}commandExecuted(t){this.liveDrawing&&this.undoRedo&&this.removeCommandFromQueues(t.id)}clearQueue(){this.liveDrawing&&(this.commandQueues=[],this.undoneCommandQueues=[])}}},629:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SVGSplitter=void 0;const n=i(776),o=i(883);e.SVGSplitter=class{constructor(){}loadImage(t,e){let i=paper.project.importSVG(t.target.result);console.log("SVG imported."),this.splitSVG(i,e),n.GUI.stopLoadingAnimation()}onImageLoad(t,e){console.log("Importing SVG..."),n.GUI.startLoadingAnimation((()=>this.loadImage(t,e)))}handleFileSelect(t){let e=null!=t.dataTransfer?t.dataTransfer.files:t.target.files;for(let t=0;t<e.length;t++){let i=null!=e[t]?e[t]:e.item(t);if(!/^image\//.test(i.type))continue;let n=new FileReader;n.onload=t=>this.onImageLoad(t,i.name),n.readAsText(i);break}}createGUI(t){this.gui=t.addFolder("SVG Splitter"),this.gui.addFileSelectorButton("Split SVG","image/svg+xml",!1,(t=>this.handleFileSelect(t)))}exportFile(t,e,i,n,o){let s=t+"_"+e+".svg";console.log("Exporting "+s+"...");let r=i.exportSVG({asString:!0}),a=new Blob([r],{type:"image/svg+xml"});console.log("Exported "+s+"."),n.file(s,a,{}),o.removeChildren()}splitSVG(t,e){let i=e.replace(/\.[^/.]+$/,"");e.replace(i,""),console.log("Collapsing SVG..."),o.SVGPlot.collapse(t),console.log("SVG collapsed."),o.SVGPlot.collapse(t),console.log("Flattening and subdividing paths..."),o.SVGPlot.filter(t),console.log("Paths flattenned and subdivided."),console.log("Splitting long paths..."),o.SVGPlot.splitLongPaths(t),console.log("Paths split."),console.log("There are "+t.children.length+" paths.");let n=paper.project,s=document.createElement("canvas");s.width=t.strokeBounds.width,s.height=t.strokeBounds.height;let r=new paper.Project(s),a=paper.Path.Rectangle(t.bounds);a.matrix=t.matrix,a.fillColor="white",a.sendToBack();let l=new paper.Group;l.matrix=t.matrix,l.strokeWidth=t.strokeWidth,l.fillColor=t.fillColor,l.strokeColor=t.strokeColor,r.view.setCenter(t.bounds.center);let d=0,h=new JSZip;var u=h.folder(i);let p=0;for(;t.children.length>0;){let e=t.firstChild;e.remove(),l.addChild(e),d+=e.segments.length,d>o.SVGPlot.nSegmentsMax&&(this.exportFile(i,p,r,u,l),d=0,p++)}l.children.length>0&&(this.exportFile(i,p,r,u,l),p++),p>0?(console.log("Exports finished."),console.log(`The SVG was split in ${p} files.`),console.log("Generating zip file..."),h.generateAsync({type:"blob"}).then((t=>{console.log("Zip file generated..."),saveAs(t,i+".zip")}))):console.error("The SVG file seems empty."),l.remove(),r.remove(),s.remove(),t.remove(),n.activate()}}},466:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Telescreen=void 0;const n=i(670);class o{constructor(t){this.timeoutID=null,this.telescreen=t}moveTipibot(t){this.timeoutID=null,"linear"==t?n.tipibot.moveLinear(this.telescreen.position):"direct"==t&&n.tipibot.moveDirect(this.telescreen.position)}moveTipibotDeferred(t){this.clearTimeout(),this.timeoutID=setTimeout((()=>this.moveTipibot(t)),500)}clearTimeout(){null!=this.timeoutID&&(clearTimeout(this.timeoutID),this.timeoutID=null)}positiveLeft(){}negativeLeft(){}positiveRight(){}negativeRight(){}}class s extends o{positiveLeft(){this.telescreen.position.x+=this.telescreen.speed,this.moveTipibotDeferred("linear")}negativeLeft(){this.telescreen.position.x-=this.telescreen.speed,this.moveTipibotDeferred("linear")}positiveRight(){this.telescreen.position.y+=this.telescreen.speed,this.moveTipibotDeferred("linear")}negativeRight(){this.telescreen.position.y-=this.telescreen.speed,this.moveTipibotDeferred("linear")}}class r extends o{positiveLeft(){let t=n.tipibot.cartesianToLengths(this.telescreen.position);t.x+=this.telescreen.speed,this.telescreen.position=n.tipibot.lengthsToCartesian(t),this.moveTipibotDeferred("direct")}negativeLeft(){let t=n.tipibot.cartesianToLengths(this.telescreen.position);t.x-=this.telescreen.speed,this.telescreen.position=n.tipibot.lengthsToCartesian(t),this.moveTipibotDeferred("direct")}positiveRight(){let t=n.tipibot.cartesianToLengths(this.telescreen.position);t.y+=this.telescreen.speed,this.telescreen.position=n.tipibot.lengthsToCartesian(t),this.moveTipibotDeferred("direct")}negativeRight(){let t=n.tipibot.cartesianToLengths(this.telescreen.position);t.y-=this.telescreen.speed,this.telescreen.position=n.tipibot.lengthsToCartesian(t),this.moveTipibotDeferred("direct")}}class a extends o{constructor(){super(...arguments),this.direction=new paper.Point(1,0)}positiveLeft(){this.direction.angle+=12}negativeLeft(){this.direction.angle-=12}positiveRight(){this.telescreen.position=this.telescreen.position.add(this.direction.multiply(this.telescreen.speed)),this.moveTipibotDeferred("linear")}negativeRight(){this.telescreen.position=this.telescreen.position.subtract(this.direction.multiply(this.telescreen.speed)),this.moveTipibotDeferred("linear")}}e.Telescreen=class{constructor(){this.speed=1,this.move=null,this.moves=new Map,this.moves.set("Orthographic",new s(this)),this.moves.set("Polar",new r(this)),this.moves.set("Direction",new a(this)),document.addEventListener("Disconnect",(()=>this.disconnect()),!1),document.addEventListener("Connect",(t=>this.connect(t.detail)),!1),document.addEventListener("MessageReceived",(t=>this.messageReceived(t.detail)),!1),this.move=this.moves.get("Orthographic"),this.position=n.tipibot.getPosition()}createGUI(t){let e=t.addFolder("Telescreen");e.addSlider("Speed",1,1,100,1).onChange((t=>this.speed=t)),this.modeController=e.add({Mode:"Orthographic"},"Mode",["Orthographic","Polar","Direction"]).onFinishChange((t=>this.modeChanged(t)))}changeMode(t){for(let t of this.moves)t[1].clearTimeout();this.move=this.moves.get(t)}modeChanged(t){this.changeMode(t)}cycleMode(){let t=[],e=0,i=0;for(let n of this.moves)n[1]==this.move&&(i=e),t.push(n[0]),e++;let n=t[e+1<t.length?e+1:0];this.changeMode(n),this.modeController.setValue(n),this.modeController.updateDisplay()}connect(t){}disconnect(){}messageReceived(t){n.tipibot.getPosition(),0==t.indexOf("left")?t.indexOf("+")>0?this.move.positiveLeft():t.indexOf("-")>0?this.move.negativeLeft():t.indexOf("OFF")>0&&n.tipibot.togglePenState():0==t.indexOf("right")&&(t.indexOf("+")>0?this.move.positiveRight():t.indexOf("-")>0?this.move.negativeRight():t.indexOf("OFF")>0&&this.cycleMode())}}},558:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Renderer=void 0;const n=i(229);e.Renderer=class{constructor(){this.ignoreWindowResize=!1,this.canvas=document.createElement("canvas");let t=$("#canvas");this.canvas.width=t.width(),this.canvas.height=t.height(),t.get(0).appendChild(this.canvas),paper.setup(this.canvas),paper.project.currentStyle.strokeColor="black",paper.project.currentStyle.strokeWidth=.5,paper.project.currentStyle.strokeScaling=!1,new paper.Layer,this.dragging=!1,this.previousPosition=new paper.Point(0,0),document.addEventListener("SettingChanged",(t=>this.onSettingChanged(t)),!1)}onSettingChanged(t){(t.detail.all||"Machine dimensions"==t.detail.parentNames[0])&&this.centerOnTipibot(n.Settings.tipibot,!0)}centerOnTipibot(t,e=!0,i=this.canvas){if(e){let e=200,n=Math.max((t.width+e)/i.width*window.devicePixelRatio,(t.height+e)/i.height*window.devicePixelRatio);paper.view.zoom=1/n,document.dispatchEvent(new CustomEvent("ZoomChanged",{detail:{}}))}paper.view.setCenter(new paper.Point(t.width/2,t.height/2))}getDomElement(){return paper.view.element}windowResize(){if(this.ignoreWindowResize)return;let t=$("#canvas"),e=t.width(),i=t.height(),o=$(this.canvas);o.width(e),o.height(i),paper.view.viewSize=new paper.Size(e,i),this.centerOnTipibot(n.Settings.tipibot,!1)}getMousePosition(t){return new paper.Point(t.clientX,t.clientY)}getWorldPosition(t){return paper.view.viewToProject(this.getMousePosition(t))}mouseDown(t){this.dragging=!0,this.previousPosition=this.getMousePosition(t)}mouseMove(t){if(4==t.buttons||this.spacePressed&&this.dragging){let e=this.getMousePosition(t);paper.view.translate(e.subtract(this.previousPosition).divide(paper.view.zoom)),paper.view.draw(),this.previousPosition.x=e.x,this.previousPosition.y=e.y}}mouseUp(t){this.dragging=!1}mouseLeave(t){this.dragging=!1}mouseWheel(t){if(t.target!=this.getDomElement())return;let e=this.getWorldPosition(t);paper.view.zoom=Math.max(.1,Math.min(5,paper.view.zoom-t.deltaY/300)),document.dispatchEvent(new CustomEvent("ZoomChanged",{detail:{}}));let i=this.getWorldPosition(t);paper.view.translate(i.subtract(e))}keyDown(t){switch(t.keyCode){case 32:this.spacePressed=!0,$("#canvas").addClass("grab")}}keyUp(t){switch(t.keyCode){case 32:this.spacePressed=!1,$("#canvas").removeClass("grab")}}render(){}}},229:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.settingsManager=e.SettingsManager=e.Settings=void 0,e.Settings={autoConnect:!0,firmware:"Tipibot",forceLinearMoves:!0,forceInitialization:!0,enableTouchKeyboard:!1,tipibot:{width:1780,height:2020,homeX:890,homeY:1288,invertMotorLeft:!1,invertMotorRight:!1,drawSpeed:330,maxSpeed:4042,acceleration:200,stepsPerRev:200,microstepResolution:32,mmPerRev:96,progressiveMicrosteps:!1,penWidth:2,penOffset:0},servo:{speed:100,position:{invert:!1,up:90,down:180},delay:{up:{before:0,after:0},down:{before:1e3,after:2e3}}},drawArea:{y:388,width:1200,height:900},transformMatrix:{destinationPoints:new Array,apply:!1},plot:{showPoints:!1,optimizeTrajectories:!0,disableMotorsOnceFinished:!1,flatten:!0,flattenPrecision:.25,subdivide:!1,maxSegmentLength:10},feedback:{enable:!0,rate:10}};const i=2e4;class n{constructor(){this.gui=null,this.tipibotPositionFolder=null,this.drawAreaDimensionsFolder=null,this.settingsFolder=null,this.motorsFolder=null,this.homeFolder=null,this.virtualKeyboard=null,this.debug=!1,this.loadLocalStorage()}static mmPerSteps(){return e.Settings.tipibot.mmPerRev/(e.Settings.tipibot.stepsPerRev*e.Settings.tipibot.microstepResolution)}static stepsPerMm(){return e.Settings.tipibot.stepsPerRev*e.Settings.tipibot.microstepResolution/e.Settings.tipibot.mmPerRev}static mmToSteps(t){return t.multiply(n.stepsPerMm())}static stepsToMm(t){return t.multiply(n.mmPerSteps())}static servoUpAngle(){return e.Settings.servo.position.invert?e.Settings.servo.position.down:e.Settings.servo.position.up}static servoDownAngle(){return e.Settings.servo.position.invert?e.Settings.servo.position.up:e.Settings.servo.position.down}getControllers(){return this.gui.getFolder("Settings").getAllControllers()}createGUI(t,o){this.gui=t,this.virtualKeyboard=o;let s=t.addFolder("Settings");this.settingsFolder=s,s.open();let r=s.addFolder("Load & Save");r.addFileSelectorButton("Load","application/json",!1,(t=>this.handleFileSelect(t))),r.add(this,"save").name("Save"),this.tipibotPositionFolder=s.addFolder("Position"),this.tipibotPositionFolder.addButton("Set position to home",(()=>this.tipibot.setHome())),this.tipibotPositionFolder.addButton("Set position with mouse",(()=>this.tipibot.toggleSetPosition()));let a=new paper.Point(e.Settings.tipibot.homeX,e.Settings.tipibot.homeY);this.tipibotPositionFolder.add(a,"x",0,e.Settings.tipibot.width).name("X"),this.tipibotPositionFolder.add(a,"y",0,e.Settings.tipibot.height).name("Y"),this.tipibotPositionFolder.open(),this.homeFolder=s.addFolder("Home"),this.homeFolder.add({Position:"Bottom"},"Position",["Custom","Top","Center","Bottom","Left","Right","TopLeft","BottomLeft","TopRight","BottomRight"]),this.homeFolder.add(e.Settings.tipibot,"homeX",0,e.Settings.tipibot.width).name("Home X"),this.homeFolder.add(e.Settings.tipibot,"homeY",0,e.Settings.tipibot.height).name("Home Y");let l=s.addFolder("Machine dimensions");l.add(e.Settings.tipibot,"width",100,1e4,1).name("Width"),l.add(e.Settings.tipibot,"height",100,1e4,1).name("Height"),this.drawAreaDimensionsFolder=s.addFolder("Draw area dimensions"),this.drawAreaDimensionsFolder.add(e.Settings.drawArea,"y",0,e.Settings.tipibot.height,1).name("Offset Y"),this.drawAreaDimensionsFolder.add(e.Settings.drawArea,"width",0,e.Settings.tipibot.width,1).name("Width"),this.drawAreaDimensionsFolder.add(e.Settings.drawArea,"height",0,e.Settings.tipibot.height,1).name("Height");let d=s.addFolder("Pen");d.add(e.Settings.tipibot,"penWidth",.1,20).name("Pen width"),d.add(e.Settings.tipibot,"penOffset",-200,200,1).name("Pen offset"),d.add(e.Settings.servo,"speed",1,360,1).name("Servo speed deg/sec.");let h=d.addFolder("Angles");h.add(e.Settings.servo.position,"invert").name("Invert"),h.add(e.Settings.servo.position,"up",0,3180).name("Up"),h.add(e.Settings.servo.position,"down",0,3180).name("Down");let u=d.addFolder("Delays"),p=u.addFolder("Up");p.add(e.Settings.servo.delay.up,"before",0,3e3,1).name("Before"),p.add(e.Settings.servo.delay.up,"after",0,3e3,1).name("After");let c=u.addFolder("Down");c.add(e.Settings.servo.delay.down,"before",0,3e3,1).name("Before"),c.add(e.Settings.servo.delay.down,"after",0,3e3,1).name("After"),this.motorsFolder=s.addFolder("Motors"),this.motorsFolder.add(e.Settings.tipibot,"invertMotorLeft").name("Invert left motor"),this.motorsFolder.add(e.Settings.tipibot,"invertMotorRight").name("Invert right motor"),this.motorsFolder.add(e.Settings.tipibot,"drawSpeed",1,i,1).name("Draw speed steps/sec."),this.motorsFolder.add(e.Settings.tipibot,"maxSpeed",1,i,1).name("Max speed steps/sec."),this.motorsFolder.add({maxSpeedMm:e.Settings.tipibot.maxSpeed*n.mmPerSteps()},"maxSpeedMm",.1,i*n.mmPerSteps(),.01).name("Max speed mm/sec."),this.motorsFolder.add(e.Settings.tipibot,"acceleration",1,5e3,1).name("Acceleration"),this.motorsFolder.add(e.Settings.tipibot,"stepsPerRev",1,500,1).name("Steps per rev."),this.motorsFolder.add(e.Settings.tipibot,"microstepResolution",1,256,1).name("Step multiplier"),this.motorsFolder.add(e.Settings.tipibot,"mmPerRev",1,250,1).name("Mm per rev."),this.motorsFolder.add(e.Settings.tipibot,"progressiveMicrosteps").name("Progressive Microsteps");let g=s.addFolder("Feedback");g.add(e.Settings.feedback,"enable").name("Enable feedback"),g.add(e.Settings.feedback,"rate",1,100,1).name("Feedback rate (info/sec.)"),g.addButton("Clear feedback",(()=>document.dispatchEvent(new CustomEvent("ClearFeedback")))),s.add(e.Settings,"forceLinearMoves").name("Force linear moves"),s.add(e.Settings,"forceInitialization").name("Force initialization"),s.add(e.Settings,"enableTouchKeyboard").name("Touch Keyboard");let m=this.getControllers();for(let t of m){let e=t.getName(),i=t.getParentNames();t.onChange((t=>this.settingChanged(i,e,t,!1))),t.onFinishChange((t=>this.settingChanged(i,e,t,!0)))}o.createGUI(s),s.add({fullscreen:!1},"fullscreen").onChange((t=>{if(t){let t=document.body;t.requestFullscreen?t.requestFullscreen():t.webkitRequestFullscreen?t.webkitRequestFullscreen():t.msRequestFullscreen&&t.msRequestFullscreen()}else{let t=document;t.exitFullscreen?t.exitFullscreen():t.webkitExitFullscreen?t.webkitExitFullscreen():t.msExitFullscreen&&t.msExitFullscreen()}})).name("Fullscreen")}setTipibot(t){this.tipibot=t}updateHomePosition(t,i=!0){"Top"==t?(e.Settings.tipibot.homeX=e.Settings.tipibot.width/2,e.Settings.tipibot.homeY=e.Settings.drawArea.y):"Center"==t?(e.Settings.tipibot.homeX=e.Settings.tipibot.width/2,e.Settings.tipibot.homeY=e.Settings.drawArea.y+e.Settings.drawArea.height/2):"Bottom"==t?(e.Settings.tipibot.homeX=e.Settings.tipibot.width/2,e.Settings.tipibot.homeY=e.Settings.drawArea.y+e.Settings.drawArea.height):"Left"==t?(e.Settings.tipibot.homeX=e.Settings.tipibot.width/2-e.Settings.drawArea.width/2,e.Settings.tipibot.homeY=e.Settings.drawArea.y+e.Settings.drawArea.height/2):"Right"==t?(e.Settings.tipibot.homeX=e.Settings.tipibot.width/2+e.Settings.drawArea.width/2,e.Settings.tipibot.homeY=e.Settings.drawArea.y+e.Settings.drawArea.height/2):"TopLeft"==t?(e.Settings.tipibot.homeX=e.Settings.tipibot.width/2-e.Settings.drawArea.width/2,e.Settings.tipibot.homeY=e.Settings.drawArea.y):"BottomLeft"==t?(e.Settings.tipibot.homeX=e.Settings.tipibot.width/2-e.Settings.drawArea.width/2,e.Settings.tipibot.homeY=e.Settings.drawArea.y+e.Settings.drawArea.height):"TopRight"==t?(e.Settings.tipibot.homeX=e.Settings.tipibot.width/2+e.Settings.drawArea.width/2,e.Settings.tipibot.homeY=e.Settings.drawArea.y):"BottomRight"==t&&(e.Settings.tipibot.homeX=e.Settings.tipibot.width/2+e.Settings.drawArea.width/2,e.Settings.tipibot.homeY=e.Settings.drawArea.y+e.Settings.drawArea.height),i&&(this.homeFolder.getController("homeX").setValueNoCallback(e.Settings.tipibot.homeX),this.homeFolder.getController("homeY").setValueNoCallback(e.Settings.tipibot.homeY)),this.tipibot.setHome(!1)}settingChanged(t,o,s=null,r=!1){if(e.settingsManager.debug,"Machine dimensions"==t[0])"width"==o?(this.tipibotPositionFolder.getController("x").max(s,!1),this.drawAreaDimensionsFolder.getController("width").max(s,r)):"height"==o&&(this.tipibotPositionFolder.getController("y").max(s,!1),this.drawAreaDimensionsFolder.getController("height").max(s,r),this.drawAreaDimensionsFolder.getController("y").max(s-e.Settings.drawArea.height,r)),"width"!=o&&"height"!=o||(this.updateHomePosition(this.homeFolder.getController("Position").getValue(),!0),this.tipibot.sizeChanged(r));else if("Home"==t[0])"Position"==o&&this.updateHomePosition(s,!0),"homeX"!=o&&"homeY"!=o||(this.homeFolder.getController("Position").setValueNoCallback("Custom"),this.tipibot.setHome(!1));else if("Motors"==t[0]){if("drawSpeed"==o)this.tipibot.drawSpeedChanged(r);else if("maxSpeed"==o){let t=s*n.mmPerSteps();this.motorsFolder.getController("maxSpeedMm").setValueNoCallback(t),this.tipibot.maxSpeedChanged(r)}else if("maxSpeedMm"==o){let t=s/n.mmPerSteps();this.motorsFolder.getController("maxSpeed").setValueNoCallback(t),e.Settings.tipibot.maxSpeed=t,this.tipibot.maxSpeedChanged(r)}else"acceleration"==o?this.tipibot.accelerationChanged(r):"mmPerRev"==o?this.tipibot.mmPerRevChanged(r):"stepsPerRev"==o?this.tipibot.stepsPerRevChanged(r):"microstepResolution"==o?this.tipibot.microstepResolutionChanged(r):"invertMotorLeft"==o||"invertMotorRight"==o&&r?this.tipibot.sendInvertXY():"progressiveMicrosteps"==o&&r&&this.tipibot.sendProgressiveMicrosteps();{let t=e.Settings.tipibot.maxSpeed*n.mmPerSteps(),o=this.motorsFolder.getController("maxSpeedMm");o.max(i*n.mmPerSteps()),o.setValueNoCallback(t)}}else"Position"==t[0]?"x"==o?this.tipibot.setX(s,r):"y"==o&&this.tipibot.setY(s,r):"Angles"!=t[0]||"Pen"!=t[1]||"up"!=o&&"down"!=o?"Pen"==t[0]?"penWidth"==o?r&&this.tipibot.penWidthChanged(!0):"speed"==o?this.tipibot.servoChanged(r,null,!0):"penOffset"==o&&this.tipibot.setPosition(this.tipibot.getPosition(),r,!1):"Draw area dimensions"==t[0]?(this.tipibot.drawAreaChanged(r),this.updateHomePosition(this.homeFolder.getController("Position").getValue(),!0)):"Feedback"==t[0]?this.tipibot.feedbackChanged(r):"enableTouchKeyboard"==o&&(s?this.virtualKeyboard.enableArrowsController.show():this.virtualKeyboard.enableArrowsController.hide()):r&&this.tipibot.servoChanged(r,"up"==o||"down"!=o&&null,!1);document.dispatchEvent(new CustomEvent("SettingChanged",{detail:{parentNames:t,name:o,value:s,changeFinished:r}})),this.save(!1)}settingsChanged(){this.tipibotPositionFolder.getController("x").max(e.Settings.tipibot.width,!1),this.tipibotPositionFolder.getController("y").max(e.Settings.tipibot.height,!1),this.drawAreaDimensionsFolder.getController("width").max(e.Settings.tipibot.width,!1),this.drawAreaDimensionsFolder.getController("height").max(e.Settings.tipibot.height,!1),this.drawAreaDimensionsFolder.getController("y").max(e.Settings.tipibot.height-e.Settings.drawArea.height,!1),this.tipibotPositionFolder.getController("x").setValue(e.Settings.tipibot.homeX,!1),this.tipibotPositionFolder.getController("y").setValue(e.Settings.tipibot.homeY,!1),this.homeFolder.getController("Position").setValue("Custom",!1),this.homeFolder.getController("homeX").setValue(e.Settings.tipibot.homeX,!1),this.homeFolder.getController("homeY").setValue(e.Settings.tipibot.homeY,!1);for(let t of this.getControllers())t.updateDisplay();this.tipibot.drawSpeedChanged(!0),this.tipibot.maxSpeedChanged(!0),this.tipibot.mmPerRevChanged(!0),this.tipibot.stepsPerRevChanged(!0),this.tipibot.microstepResolutionChanged(!0),this.tipibot.penWidthChanged(!0),this.tipibot.servoChanged(!0,null,!0),this.tipibot.sizeChanged(!0),this.tipibot.drawAreaChanged(!0),this.tipibot.setHome(!1),document.dispatchEvent(new CustomEvent("SettingChanged",{detail:{all:!0}})),this.save(!1)}save(t=!0){let i=JSON.stringify(e.Settings,null,"\t");if(localStorage.setItem("settings",i),t){var n=new Blob([i],{type:"application/json"});saveAs(n,"settings.json")}}updateSliders(){let t=this.getControllers();for(let e of t)e.updateDisplay()}copyObjectProperties(t,e){if(null!=e)for(let i in t)t[i]instanceof Array?t[i]=e[i].slice():"object"==typeof t[i]?this.copyObjectProperties(t[i],e[i]):null!=e[i]&&typeof t[i]==typeof e[i]&&(t[i]=e[i])}copyObjectPropertiesFromJSON(t,e){null!=e&&this.copyObjectProperties(t,JSON.parse(e))}onJsonLoad(t){null!=t.target&&null!=t.target.result&&(this.copyObjectPropertiesFromJSON(e.Settings,t.target.result),this.settingsChanged(),this.updateSliders())}handleFileSelect(t){let e=null!=t.dataTransfer?t.dataTransfer.files:t.target.files;for(let t=0;t<e.length;t++){let i=e.item(t),n=new FileReader;n.onload=t=>this.onJsonLoad(t),n.readAsText(i)}}loadLocalStorage(){this.copyObjectPropertiesFromJSON(e.Settings,localStorage.getItem("settings"))}}e.SettingsManager=n,e.settingsManager=new n},670:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.tipibot=e.Tipibot=void 0;const n=i(107),o=i(229),s=i(271),r=i(958);class a{constructor(){this.penStateButton=null,this.motorsEnableButton=null,this.settingPosition=!1,this.initialPosition=null,this.initializedCommunication=!1,this.motorsEnabled=!0,this.ignoreKeyEvents=!1,this.moveToButtons=[],document.addEventListener("ZoomChanged",(t=>this.onZoomChanged()),!1),this.lastSentPosition=new paper.Point(0,0)}cartesianToLengths(t){let e=o.Settings.tipibot.width-t.x;return new paper.Point(Math.sqrt(t.x*t.x+t.y*t.y),Math.sqrt(e*e+t.y*t.y))}lengthsToCartesian(t){let e=t.x,i=t.y,n=o.Settings.tipibot.width,s=(e*e-i*i+n*n)/(2*n),r=Math.sqrt(e*e-s*s);return new paper.Point(s,r)}setPositionSliders(t){o.settingsManager.tipibotPositionFolder.getController("x").setValue(t.x,!1),o.settingsManager.tipibotPositionFolder.getController("y").setValue(t.y,!1),this.gui.getController("moveX").setValue(t.x,!1),this.gui.getController("moveY").setValue(t.y,!1)}toggleSetPosition(t=!this.settingPosition,e=!0){t?(o.settingsManager.tipibotPositionFolder.getController("Set position with mouse").setName("Cancel"),this.initialPosition=this.getPosition()):(o.settingsManager.tipibotPositionFolder.getController("Set position with mouse").setName("Set position with mouse"),e&&this.setPositionSliders(this.initialPosition)),this.settingPosition=t}togglePenState(){let t=()=>console.log("pen state changed");this.pen.isUp?this.penDown(o.SettingsManager.servoDownAngle(),o.Settings.servo.delay.down.before,o.Settings.servo.delay.down.after,t,!0):this.penUp(o.SettingsManager.servoUpAngle(),o.Settings.servo.delay.up.before,o.Settings.servo.delay.up.after,t,!0)}computeTipibotArea(){return new paper.Rectangle(0,0,o.Settings.tipibot.width,o.Settings.tipibot.height)}computeDrawArea(){return new paper.Rectangle(o.Settings.tipibot.width/2-o.Settings.drawArea.width/2,o.Settings.drawArea.y,o.Settings.drawArea.width,o.Settings.drawArea.height)}createTarget(t,e,i){let n=new paper.Group,o=new paper.Point(t,e),s=paper.Path.Circle(o,i);s.strokeWidth=1,n.addChild(s);let r=new paper.Path;r.add(new paper.Point(o.x-i,o.y)),r.add(new paper.Point(o.x+i,o.y)),n.addChild(r);let a=new paper.Path;return a.add(new paper.Point(o.x,o.y-i)),a.add(new paper.Point(o.x,o.y+i)),n.addChild(a),n}createMoveToButton(t){let e=paper.Path.Rectangle(t.subtract(6),t.add(6));return e.fillColor="rgba(0, 0, 0, 0.05)",e.onMouseUp=t=>this.moveToButtonClicked(t,e.position),e}initialize(){this.tipibotArea=paper.Path.Rectangle(this.computeTipibotArea()),this.drawArea=paper.Path.Rectangle(this.computeDrawArea()),this.motorLeft=paper.Path.Circle(new paper.Point(0,0),50),this.motorRight=paper.Path.Circle(new paper.Point(o.Settings.tipibot.width,0),50),this.pen=new s.Pen(o.Settings.tipibot.homeX,o.Settings.tipibot.homeY,o.Settings.tipibot.penOffset,o.Settings.tipibot.width),this.home=this.createTarget(o.Settings.tipibot.homeX,o.Settings.tipibot.homeY,s.Pen.HOME_RADIUS);let t=new paper.Point(o.Settings.tipibot.homeX,o.Settings.tipibot.homeY);this.moveToButtonClicked.bind(this),this.moveToButtons.push(this.createMoveToButton(this.drawArea.bounds.topLeft)),this.moveToButtons.push(this.createMoveToButton(this.drawArea.bounds.topRight)),this.moveToButtons.push(this.createMoveToButton(this.drawArea.bounds.bottomLeft)),this.moveToButtons.push(this.createMoveToButton(this.drawArea.bounds.bottomRight)),this.moveToButtons.push(this.createMoveToButton(t)),this.pen.group.bringToFront(),o.settingsManager.setTipibot(this)}moveToButtonClicked(t,e){s.Pen.moveTypeFromMouseEvent(t)==s.MoveType.Direct?this.moveDirect(e):this.moveLinear(e)}onZoomChanged(){let t=new paper.Point(1/paper.view.zoom,1/paper.view.zoom);for(let e of this.moveToButtons)e.applyMatrix=!1,e.scaling=t;this.pen.circle.applyMatrix=!1,this.pen.circle.scaling=t,this.home.applyMatrix=!1,this.home.scaling=t}updateMoveToButtons(){let t=new paper.Point(o.Settings.tipibot.homeX,o.Settings.tipibot.homeY);this.moveToButtons[0].position=this.drawArea.bounds.topLeft,this.moveToButtons[1].position=this.drawArea.bounds.topRight,this.moveToButtons[2].position=this.drawArea.bounds.bottomLeft,this.moveToButtons[3].position=this.drawArea.bounds.bottomRight,this.moveToButtons[4].position=t}updateTipibotArea(){this.tipibotArea.remove(),this.tipibotArea=paper.Path.Rectangle(this.computeTipibotArea())}updateDrawArea(){this.drawArea.remove(),this.drawArea=paper.Path.Rectangle(this.computeDrawArea())}sizeChanged(t){this.motorRight.position.x=o.Settings.tipibot.width,this.updateTipibotArea(),this.updateDrawArea(),this.pen.tipibotWidthChanged(),t&&n.communication.interpreter.sendSize(),this.updateMoveToButtons()}drawAreaChanged(t){this.updateDrawArea(),this.updateMoveToButtons()}drawSpeedChanged(t){t&&n.communication.interpreter.sendDrawSpeed()}maxSpeedChanged(t){t&&n.communication.interpreter.sendMaxSpeed()}accelerationChanged(t){t&&n.communication.interpreter.sendAcceleration()}getPosition(){return this.pen.getPosition()}getHome(){return new paper.Point(o.Settings.tipibot.homeX,o.Settings.tipibot.homeY-o.Settings.tipibot.penOffset)}getGondolaPosition(){let t=this.getPosition();return t.y-=o.Settings.tipibot.penOffset,t}getLengths(){return this.cartesianToLengths(this.getPosition())}setX(t,e=!0){let i=this.getPosition();this.setPosition(new paper.Point(t,i.y),e)}setY(t,e=!0){let i=this.getPosition();this.setPosition(new paper.Point(i.x,t),e)}checkInitialized(){o.Settings.forceInitialization&&!this.initializedCommunication&&n.communication.interpreter.initialize()}sendGondolaPosition(){n.communication.interpreter.sendSetPosition(this.getGondolaPosition())}sendChangePen(t,e){n.communication.interpreter.sendChangePen(t,e)}setPosition(t,e=!0,i=!1){this.pen.setPosition(t,i,!1),e&&(this.lastSentPosition=t,this.checkInitialized(),this.sendGondolaPosition())}sendInvertXY(){n.communication.interpreter.sendInvertXY(),this.sendGondolaPosition()}sendProgressiveMicrosteps(){n.communication.interpreter.sendProgressiveMicrosteps()}move(t,e,i=0,a=o.Settings.tipibot.maxSpeed,l=null,d=!0){this.checkInitialized();let h=d?l:()=>{this.pen.setPosition(e,!0,!1),null!=l&&l()};this.lastSentPosition=e,this.motorsEnabled||this.enableMotors(!0);let u=new paper.Point(e.x,e.y-o.Settings.tipibot.penOffset);t!=s.MoveType.Direct||o.Settings.forceLinearMoves?(r.calibration.applyTransform&&(u=r.calibration.transform(u)),n.communication.interpreter.sendMoveLinear(u,i,a,h)):(r.calibration.applyTransform&&(u=r.calibration.transform(u)),n.communication.interpreter.sendMoveDirect(u,h)),d&&this.pen.setPosition(e,!0,!1)}moveDirect(t,e=null,i=!0){this.move(s.MoveType.Direct,t,0,o.Settings.tipibot.maxSpeed,e,i)}moveLinear(t,e=0,i=o.Settings.tipibot.maxSpeed,n=null,r=!0){this.move(s.MoveType.Linear,t,e,i,n,r)}setSpeed(t){n.communication.interpreter.sendMaxSpeed(t)}stepsPerRevChanged(t){t&&n.communication.interpreter.sendStepsPerRev(o.Settings.tipibot.stepsPerRev)}mmPerRevChanged(t){t&&n.communication.interpreter.sendMmPerRev(o.Settings.tipibot.mmPerRev)}microstepResolutionChanged(t){t&&n.communication.interpreter.sendStepMultiplier(o.Settings.tipibot.microstepResolution)}feedbackChanged(t){t&&n.communication.interpreter.sendFeedback(o.Settings.feedback.enable,o.Settings.feedback.rate)}penWidthChanged(t){t&&n.communication.interpreter.sendPenWidth(o.Settings.tipibot.penWidth)}servoChanged(t,e,i){t&&(i&&(n.communication.interpreter.sendPenLiftRange(),n.communication.interpreter.sendPenDelays(),n.communication.interpreter.sendServoSpeed()),null!=e&&(e?n.communication.interpreter.sendPenUp():n.communication.interpreter.sendPenDown()))}sendSpecs(){n.communication.interpreter.sendSpecs(o.Settings.tipibot.width,o.Settings.tipibot.height,o.Settings.tipibot.stepsPerRev,o.Settings.tipibot.mmPerRev,o.Settings.tipibot.microstepResolution)}pause(t){n.communication.interpreter.sendPause(t)}disableMotors(t){t&&n.communication.interpreter.sendMotorOff(),this.motorsEnableButton.setName("Enable motors"),this.motorsEnabled=!1}enableMotors(t){t&&n.communication.interpreter.sendMotorOn(),this.motorsEnableButton.setName("Disable motors"),this.motorsEnabled=!0}toggleMotors(){this.motorsEnabled?this.disableMotors(!0):this.enableMotors(!0)}executeOnceFinished(t){n.communication.interpreter.executeOnceFinished(t)}penUp(t=o.SettingsManager.servoUpAngle(),e=o.Settings.servo.delay.up.before,i=o.Settings.servo.delay.up.after,n=null,s=!1){this.pen.isUp&&!s||(this.pen.penUp(t,e,i,n),this.penStateButton.setName("Pen down"))}penDown(t=o.SettingsManager.servoDownAngle(),e=o.Settings.servo.delay.down.before,i=o.Settings.servo.delay.down.after,n=null,s=!1){(this.pen.isUp||s)&&(this.pen.penDown(t,e,i,n),this.penStateButton.setName("Pen up"))}setHome(t=!0,e=!0){let i=new paper.Point(o.Settings.tipibot.homeX,o.Settings.tipibot.homeY);this.home.position=i,t&&this.setPosition(i,!0,e),n.communication.interpreter.sendSetHome(this.getGondolaPosition())}goHome(t=null){let e=new paper.Point(o.Settings.tipibot.homeX,o.Settings.tipibot.homeY);this.penUp(o.SettingsManager.servoUpAngle(),o.Settings.servo.delay.up.before,o.Settings.servo.delay.up.after,null,!0),this.moveDirect(e,t,!1)}keyDown(t){if(this.ignoreKeyEvents)return;let e=t.keyCode||t.code;if($.contains($("#gui").get(0),document.activeElement)&&(37==e||38==e||39==e||40==e))return void console.log("Focus on the draw area to move the bot with arrows");let i=t.shiftKey?25:t.ctrlKey?5:t.altKey?1:.25;switch(e){case 37:this.moveDirect(this.getPosition().add(new paper.Point(-i,0)));break;case 38:this.moveDirect(this.getPosition().add(new paper.Point(0,-i)));break;case 39:this.moveDirect(this.getPosition().add(new paper.Point(i,0)));break;case 40:this.moveDirect(this.getPosition().add(new paper.Point(0,i)));break;case 13:this.togglePenState()}}keyUp(t){}windowResize(){this.motorRight.position.x=o.Settings.tipibot.width,this.updateTipibotArea(),this.updateDrawArea()}}e.Tipibot=a,e.tipibot=new a},960:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.VisualFeedback=e.visualFeedback=void 0;const n=i(229),o=i(271),s=i(670);e.visualFeedback=null;class r{constructor(){this.drawing=!1,this.isPenUp=!0,this.positionPrefix="-p: l: ",this.penPrefix="-pen: ",this.subTargetPrefix="-st: l: ",this.paths=new paper.Group,this.subTargets=new paper.Group,this.group=new paper.Group,this.group.addChild(this.paths),this.group.addChild(this.subTargets);let t=s.tipibot.getPosition(),e=s.tipibot.getGondolaPosition();this.circle=paper.Path.Circle(t,o.Pen.HOME_RADIUS),this.circle.fillColor="rgba(255, 193, 7, 0.25)",this.circle.strokeColor="black",this.circle.strokeWidth=1,this.group.addChild(this.circle),this.lines=new paper.Path,this.lines.add(new paper.Point(0,0)),this.lines.add(e),this.lines.add(new paper.Point(n.Settings.tipibot.width,0)),this.lines.strokeWidth=.5,this.lines.strokeColor="rgba(0, 0, 0, 0.5)",this.lines.dashArray=[2,2],this.lines.strokeScaling=!1,this.group.addChild(this.lines),this.offsetLine=new paper.Path,this.offsetLine.add(e),this.offsetLine.add(t),this.offsetLine.dashArray=[2,2],this.group.addChild(this.offsetLine),document.addEventListener("MessageReceived",(t=>this.onMessageReceived(t.detail)),!1),document.addEventListener("SettingChanged",(t=>this.onSettingChanged(t)),!1),document.addEventListener("ClearFeedback",(t=>this.clear()),!1),document.addEventListener("ZoomChanged",(t=>this.onZoomChanged()),!1),this.group.sendToBack()}static initialize(){e.visualFeedback=new r}clear(){this.paths.removeChildren(),this.subTargets.removeChildren()}onZoomChanged(){this.circle.applyMatrix=!1,this.circle.scaling=new paper.Point(1/paper.view.zoom,1/paper.view.zoom)}setVisible(t){this.group.visible=t}setPosition(t){this.circle.position=t,this.offsetLine.segments[1].point=t;let e=new paper.Point(t.x,t.y-n.Settings.tipibot.penOffset);this.lines.segments[1].point=e,this.offsetLine.segments[0].point=e}computePoint(t,e){let i=t.replace(e,"").split(", r: "),o=parseInt(i[0]),r=parseInt(i[1]),a=new paper.Point(o,r),l=n.SettingsManager.stepsToMm(a);return s.tipibot.lengthsToCartesian(l)}onMessageReceived(t){0==t.indexOf(this.positionPrefix)?this.updatePosition(t):0==t.indexOf(this.subTargetPrefix)?this.setSubTarget(t):0==t.indexOf(this.penPrefix)&&this.updatePen(t)}updatePosition(t){let e=this.computePoint(t,this.positionPrefix);if(!e.isNaN()){if(this.isPenUp)this.drawing=!1;else if(!this.drawing&&this.paths){let t=new paper.Path;t.strokeWidth=n.Settings.tipibot.penWidth,t.strokeColor="black",t.strokeScaling=!0,t.add(e),this.paths.addChild(t),this.drawing=!0}else null!=this.paths.lastChild&&this.paths.lastChild.add(e);this.setPosition(e)}}updatePen(t){let e=t.replace(this.penPrefix,""),i=Math.round(parseFloat(e));this.isPenUp=Math.abs(i-Math.round(n.Settings.servo.position.up))<.1||!(Math.abs(i-Math.round(n.Settings.servo.position.down))<.1)&&null,n.Settings.servo.position.invert&&(this.isPenUp=!this.isPenUp),this.circle.fillColor=this.isPenUp?"rgba(255, 193, 7, 0.25)":this.circle.fillColor="rgba(255, 193, 7, 0.9)"}setSubTarget(t){let e=this.computePoint(t,this.subTargetPrefix);if(!this.isPenUp){let t=new paper.Path;t.strokeWidth=.1,t.strokeColor="red",t.strokeScaling=!0,this.subTargets.addChild(t);let i=2;t.add(e.add(i)),t.add(e.add(-i)),t.add(e),t.add(e.add(new paper.Point(i,-i))),t.add(e.add(new paper.Point(-i,i)))}}onSettingChanged(t){(t.detail.all||"Machine dimensions"==t.detail.parentNames[0])&&"width"==t.detail.name&&(this.lines.segments[2].point.x=n.Settings.tipibot.width),(t.detail.all||"Feedback"==t.detail.parentNames[0])&&this.setVisible(n.Settings.feedback.enable),(t.detail.all||"Pen"==t.detail.parentNames[0]&&"penOffset"==t.detail.name)&&this.setPosition(this.circle.position)}}e.VisualFeedback=r}},e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={id:n,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i(212)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,